
Stacja_pogodowa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007320  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  080074b0  080074b0  000174b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007974  08007974  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007974  08007974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800797c  0800797c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800797c  0800797c  0001797c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007980  08007980  00017980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000000e0  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c0  200002c0  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb6f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b9  00000000  00000000  0002bd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002de38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  0002e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b4f  00000000  00000000  0002f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce3c  00000000  00000000  00051c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb37d  00000000  00000000  0005ea4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00129dc8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037dc  00000000  00000000  00129e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007498 	.word	0x08007498

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007498 	.word	0x08007498

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <DWT_Delay_Init>:
 *
 * @param temp, is a temperature
 * @returns something ...
 */
uint32_t DWT_Delay_Init(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <DWT_Delay_Init+0x58>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <DWT_Delay_Init+0x58>)
 8000eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000eba:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <DWT_Delay_Init+0x58>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <DWT_Delay_Init+0x58>)
 8000ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ec6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <DWT_Delay_Init+0x5c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <DWT_Delay_Init+0x5c>)
 8000ece:	f023 0301 	bic.w	r3, r3, #1
 8000ed2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <DWT_Delay_Init+0x5c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <DWT_Delay_Init+0x5c>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <DWT_Delay_Init+0x5c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ee6:	bf00      	nop
     __ASM volatile ("NOP");
 8000ee8:	bf00      	nop
  __ASM volatile ("NOP");
 8000eea:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <DWT_Delay_Init+0x5c>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e000      	b.n	8000efa <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ef8:	2301      	movs	r3, #1
  }
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000edf0 	.word	0xe000edf0
 8000f08:	e0001000 	.word	0xe0001000

08000f0c <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <delay+0x40>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f1a:	f002 fbb1 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <delay+0x44>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0c9b      	lsrs	r3, r3, #18
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	fb02 f303 	mul.w	r3, r2, r3
 8000f2e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f30:	bf00      	nop
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <delay+0x40>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1ad2      	subs	r2, r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d3f8      	bcc.n	8000f32 <delay+0x26>
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e0001000 	.word	0xe0001000
 8000f50:	431bde83 	.word	0x431bde83

08000f54 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f70:	887b      	ldrh	r3, [r7, #2]
 8000f72:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f001 fd4a 	bl	8002a1c <HAL_GPIO_Init>
}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f001 fd2c 	bl	8002a1c <HAL_GPIO_Init>
}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <DHT_Start>:


void DHT_Start (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000fd0:	f7ff ff6c 	bl	8000eac <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000fd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd8:	480e      	ldr	r0, [pc, #56]	; (8001014 <DHT_Start+0x48>)
 8000fda:	f7ff ffbb 	bl	8000f54 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <DHT_Start+0x48>)
 8000fe6:	f001 fecd 	bl	8002d84 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000fea:	f244 6050 	movw	r0, #18000	; 0x4650
 8000fee:	f7ff ff8d 	bl	8000f0c <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff8:	4806      	ldr	r0, [pc, #24]	; (8001014 <DHT_Start+0x48>)
 8000ffa:	f001 fec3 	bl	8002d84 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000ffe:	2014      	movs	r0, #20
 8001000:	f7ff ff84 	bl	8000f0c <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8001004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <DHT_Start+0x48>)
 800100a:	f7ff ffc1 	bl	8000f90 <Set_Pin_Input>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40020c00 	.word	0x40020c00

08001018 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001022:	2028      	movs	r0, #40	; 0x28
 8001024:	f7ff ff72 	bl	8000f0c <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001028:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102c:	4811      	ldr	r0, [pc, #68]	; (8001074 <DHT_Check_Response+0x5c>)
 800102e:	f001 fe91 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10f      	bne.n	8001058 <DHT_Check_Response+0x40>
	{
		delay (80);
 8001038:	2050      	movs	r0, #80	; 0x50
 800103a:	f7ff ff67 	bl	8000f0c <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 800103e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <DHT_Check_Response+0x5c>)
 8001044:	f001 fe86 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <DHT_Check_Response+0x3c>
 800104e:	2301      	movs	r3, #1
 8001050:	71fb      	strb	r3, [r7, #7]
 8001052:	e001      	b.n	8001058 <DHT_Check_Response+0x40>
		else Response = -1;
 8001054:	23ff      	movs	r3, #255	; 0xff
 8001056:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001058:	bf00      	nop
 800105a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <DHT_Check_Response+0x5c>)
 8001060:	f001 fe78 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f7      	bne.n	800105a <DHT_Check_Response+0x42>

	return Response;
 800106a:	79fb      	ldrb	r3, [r7, #7]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40020c00 	.word	0x40020c00

08001078 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800107e:	2300      	movs	r3, #0
 8001080:	71bb      	strb	r3, [r7, #6]
 8001082:	e03a      	b.n	80010fa <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001084:	bf00      	nop
 8001086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800108a:	4820      	ldr	r0, [pc, #128]	; (800110c <DHT_Read+0x94>)
 800108c:	f001 fe62 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f7      	beq.n	8001086 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001096:	2028      	movs	r0, #40	; 0x28
 8001098:	f7ff ff38 	bl	8000f0c <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800109c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a0:	481a      	ldr	r0, [pc, #104]	; (800110c <DHT_Read+0x94>)
 80010a2:	f001 fe57 	bl	8002d54 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10e      	bne.n	80010ca <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2201      	movs	r2, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	b25a      	sxtb	r2, r3
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	4013      	ands	r3, r2
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	e00b      	b.n	80010e2 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	f1c3 0307 	rsb	r3, r3, #7
 80010d0:	2201      	movs	r2, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	b25a      	sxtb	r2, r3
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4313      	orrs	r3, r2
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80010e2:	bf00      	nop
 80010e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <DHT_Read+0x94>)
 80010ea:	f001 fe33 	bl	8002d54 <HAL_GPIO_ReadPin>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f7      	bne.n	80010e4 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	3301      	adds	r3, #1
 80010f8:	71bb      	strb	r3, [r7, #6]
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2b07      	cmp	r3, #7
 80010fe:	d9c1      	bls.n	8001084 <DHT_Read+0xc>
	}
	return i;
 8001100:	79fb      	ldrb	r3, [r7, #7]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020c00 	.word	0x40020c00

08001110 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001118:	f7ff ff58 	bl	8000fcc <DHT_Start>
	Presence = DHT_Check_Response ();
 800111c:	f7ff ff7c 	bl	8001018 <DHT_Check_Response>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <DHT_GetData+0xa4>)
 8001126:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001128:	f7ff ffa6 	bl	8001078 <DHT_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <DHT_GetData+0xa8>)
 8001132:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001134:	f7ff ffa0 	bl	8001078 <DHT_Read>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <DHT_GetData+0xac>)
 800113e:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001140:	f7ff ff9a 	bl	8001078 <DHT_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <DHT_GetData+0xb0>)
 800114a:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 800114c:	f7ff ff94 	bl	8001078 <DHT_Read>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <DHT_GetData+0xb4>)
 8001156:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001158:	f7ff ff8e 	bl	8001078 <DHT_Read>
 800115c:	4603      	mov	r3, r0
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <DHT_GetData+0xb8>)
 8001162:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <DHT_GetData+0xb8>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <DHT_GetData+0xa8>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <DHT_GetData+0xac>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4413      	add	r3, r2
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <DHT_GetData+0xb0>)
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <DHT_GetData+0xb4>)
 800117e:	7812      	ldrb	r2, [r2, #0]
 8001180:	4413      	add	r3, r2
 8001182:	4299      	cmp	r1, r3
 8001184:	d111      	bne.n	80011aa <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <DHT_GetData+0xb0>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <DHT_GetData+0xa8>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000202 	.word	0x20000202
 80011b8:	200001fc 	.word	0x200001fc
 80011bc:	200001fd 	.word	0x200001fd
 80011c0:	200001fe 	.word	0x200001fe
 80011c4:	200001ff 	.word	0x200001ff
 80011c8:	20000200 	.word	0x20000200

080011cc <showTempAndHum>:
#include "lcd16x2.h"
#include "stdio.h"
#include "stdbool.h"

void showTempAndHum(float temp, float hum) // Pokaż temperaturę oraz wilgotność powietrza
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80011d6:	edc7 0a00 	vstr	s1, [r7]
	lcd16x2_printf("Temp: %.1f C",temp);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff f9b4 	bl	8000548 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4808      	ldr	r0, [pc, #32]	; (8001208 <showTempAndHum+0x3c>)
 80011e6:	f000 fcc3 	bl	8001b70 <lcd16x2_printf>
	lcd16x2_2ndLine();
 80011ea:	f000 fcaf 	bl	8001b4c <lcd16x2_2ndLine>
	lcd16x2_printf("Humi: %.1f %%",hum);
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f7ff f9aa 	bl	8000548 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <showTempAndHum+0x40>)
 80011fa:	f000 fcb9 	bl	8001b70 <lcd16x2_printf>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	080074b0 	.word	0x080074b0
 800120c:	080074c0 	.word	0x080074c0

08001210 <showTimeAndDate>:

void showTimeAndDate(RTC_DateTypeDef sDate, RTC_TimeTypeDef sTime) // Pokaż czas i datę
{
 8001210:	b084      	sub	sp, #16
 8001212:	b580      	push	{r7, lr}
 8001214:	b094      	sub	sp, #80	; 0x50
 8001216:	af02      	add	r7, sp, #8
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800121e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	char currTime[30];
	char currDate[30];
	sprintf(currDate,"Date: %02d.%02d.%02d",sDate.Date,sDate.Month,sDate.Year);
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	461a      	mov	r2, r3
 8001226:	797b      	ldrb	r3, [r7, #5]
 8001228:	4619      	mov	r1, r3
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f107 0008 	add.w	r0, r7, #8
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	460b      	mov	r3, r1
 8001234:	4913      	ldr	r1, [pc, #76]	; (8001284 <showTimeAndDate+0x74>)
 8001236:	f003 fe95 	bl	8004f64 <siprintf>
	sprintf(currTime,"Time: %02d:%02d:%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 800123a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800123e:	461a      	mov	r2, r3
 8001240:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001244:	4619      	mov	r1, r3
 8001246:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800124a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	460b      	mov	r3, r1
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <showTimeAndDate+0x78>)
 8001254:	f003 fe86 	bl	8004f64 <siprintf>
	lcd16x2_printf("%s",currDate);
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	4619      	mov	r1, r3
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <showTimeAndDate+0x7c>)
 8001260:	f000 fc86 	bl	8001b70 <lcd16x2_printf>
	lcd16x2_2ndLine();
 8001264:	f000 fc72 	bl	8001b4c <lcd16x2_2ndLine>
	lcd16x2_printf("%s",currTime);
 8001268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126c:	4619      	mov	r1, r3
 800126e:	4807      	ldr	r0, [pc, #28]	; (800128c <showTimeAndDate+0x7c>)
 8001270:	f000 fc7e 	bl	8001b70 <lcd16x2_printf>
}
 8001274:	bf00      	nop
 8001276:	3748      	adds	r7, #72	; 0x48
 8001278:	46bd      	mov	sp, r7
 800127a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800127e:	b004      	add	sp, #16
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	080074d0 	.word	0x080074d0
 8001288:	080074e8 	.word	0x080074e8
 800128c:	08007500 	.word	0x08007500

08001290 <showSettingUpTime>:

void showSettingUpTime(int *pos, RTC_TimeTypeDef sTime) // Wyświetlenie czasu przy edycji
{
 8001290:	b084      	sub	sp, #16
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	f107 0014 	add.w	r0, r7, #20
 800129e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	lcd16x2_clear();
 80012a2:	f000 fc5b 	bl	8001b5c <lcd16x2_clear>
	lcd16x2_printf("Time: %02d.%02d.%02d", sTime.Hours,sTime.Minutes,sTime.Seconds);
 80012a6:	7d3b      	ldrb	r3, [r7, #20]
 80012a8:	4619      	mov	r1, r3
 80012aa:	7d7b      	ldrb	r3, [r7, #21]
 80012ac:	461a      	mov	r2, r3
 80012ae:	7dbb      	ldrb	r3, [r7, #22]
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <showSettingUpTime+0x4c>)
 80012b2:	f000 fc5d 	bl	8001b70 <lcd16x2_printf>
	lcd16x2_2ndLine();
 80012b6:	f000 fc49 	bl	8001b4c <lcd16x2_2ndLine>
	lcd16x2_setCursor(1, *pos);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4619      	mov	r1, r3
 80012c2:	2001      	movs	r0, #1
 80012c4:	f000 fc1e 	bl	8001b04 <lcd16x2_setCursor>
	lcd16x2_printf("^");
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <showSettingUpTime+0x50>)
 80012ca:	f000 fc51 	bl	8001b70 <lcd16x2_printf>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012d8:	b004      	add	sp, #16
 80012da:	4770      	bx	lr
 80012dc:	08007504 	.word	0x08007504
 80012e0:	0800751c 	.word	0x0800751c

080012e4 <setTime>:

void setTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime) // Ustawianie czasu
{
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	int position = 7; // Pozycja strzałki która wskazuje na obecnie edytowany element
 80012ee:	2307      	movs	r3, #7
 80012f0:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<3;i++) // Edycja kolejno 3 kolumn czasu
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e0c4      	b.n	8001482 <setTime+0x19e>
	{
		showSettingUpTime(&position, *sTime);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f107 0408 	add.w	r4, r7, #8
 80012fe:	466d      	mov	r5, sp
 8001300:	f103 020c 	add.w	r2, r3, #12
 8001304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001308:	e885 0003 	stmia.w	r5, {r0, r1}
 800130c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800130e:	4620      	mov	r0, r4
 8001310:	f7ff ffbe 	bl	8001290 <showSettingUpTime>
		HAL_Delay(500);
 8001314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001318:	f001 fa4a 	bl	80027b0 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 1) // Powtarzaj dopóki MIDDLE BUTTON nie zostanie naciśnięty
 800131c:	e0a2      	b.n	8001464 <setTime+0x180>
		{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0) // Jeśli wciśnięty UP BUTTON
 800131e:	2140      	movs	r1, #64	; 0x40
 8001320:	485e      	ldr	r0, [pc, #376]	; (800149c <setTime+0x1b8>)
 8001322:	f001 fd17 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d148      	bne.n	80013be <setTime+0xda>
			{
				switch(i) // Obsługa kolumny w zależności od iteracji pętli edycji
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d027      	beq.n	8001382 <setTime+0x9e>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b02      	cmp	r3, #2
 8001336:	dc33      	bgt.n	80013a0 <setTime+0xbc>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <setTime+0x62>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d00f      	beq.n	8001364 <setTime+0x80>
 8001344:	e02c      	b.n	80013a0 <setTime+0xbc>
				{
					case 0:
						if(sTime->Hours>=23) sTime->Hours=0; // Dodatkowy warunek nie pozwalający
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b16      	cmp	r3, #22
 800134c:	d903      	bls.n	8001356 <setTime+0x72>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
						else sTime->Hours+=1;				 // przekroczyć dozwolonej wartości
						break;
 8001354:	e024      	b.n	80013a0 <setTime+0xbc>
						else sTime->Hours+=1;				 // przekroczyć dozwolonej wartości
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	701a      	strb	r2, [r3, #0]
						break;
 8001362:	e01d      	b.n	80013a0 <setTime+0xbc>
					case 1:
						if(sTime->Minutes>=59) sTime->Minutes=0;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	785b      	ldrb	r3, [r3, #1]
 8001368:	2b3a      	cmp	r3, #58	; 0x3a
 800136a:	d903      	bls.n	8001374 <setTime+0x90>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	705a      	strb	r2, [r3, #1]
						else sTime->Minutes+=1;
						break;
 8001372:	e015      	b.n	80013a0 <setTime+0xbc>
						else sTime->Minutes+=1;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	785b      	ldrb	r3, [r3, #1]
 8001378:	3301      	adds	r3, #1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	705a      	strb	r2, [r3, #1]
						break;
 8001380:	e00e      	b.n	80013a0 <setTime+0xbc>
					case 2:
						if(sTime->Seconds>=59) sTime->Seconds=0;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	789b      	ldrb	r3, [r3, #2]
 8001386:	2b3a      	cmp	r3, #58	; 0x3a
 8001388:	d903      	bls.n	8001392 <setTime+0xae>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2200      	movs	r2, #0
 800138e:	709a      	strb	r2, [r3, #2]
						else sTime->Seconds+=1;
						break;
 8001390:	e005      	b.n	800139e <setTime+0xba>
						else sTime->Seconds+=1;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	789b      	ldrb	r3, [r3, #2]
 8001396:	3301      	adds	r3, #1
 8001398:	b2da      	uxtb	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	709a      	strb	r2, [r3, #2]
						break;
 800139e:	bf00      	nop
				}
				showSettingUpTime(&position, *sTime); // Wyświetlenie czasu przy każdej zmianie wartości w kolumnie
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f107 0408 	add.w	r4, r7, #8
 80013a6:	466d      	mov	r5, sp
 80013a8:	f103 020c 	add.w	r2, r3, #12
 80013ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80013b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff ff6a 	bl	8001290 <showSettingUpTime>
 80013bc:	e04f      	b.n	800145e <setTime+0x17a>
			}
			else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0) // Jeśli wciśnięty DOWN BUTTON
 80013be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c2:	4836      	ldr	r0, [pc, #216]	; (800149c <setTime+0x1b8>)
 80013c4:	f001 fcc6 	bl	8002d54 <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d147      	bne.n	800145e <setTime+0x17a>
			{
				switch(i)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d027      	beq.n	8001424 <setTime+0x140>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	dc33      	bgt.n	8001442 <setTime+0x15e>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <setTime+0x104>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d00f      	beq.n	8001406 <setTime+0x122>
 80013e6:	e02c      	b.n	8001442 <setTime+0x15e>
				{
					case 0:
						if(sTime->Hours<=0) sTime->Hours=23;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d103      	bne.n	80013f8 <setTime+0x114>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2217      	movs	r2, #23
 80013f4:	701a      	strb	r2, [r3, #0]
						else sTime->Hours-=1;
						break;
 80013f6:	e024      	b.n	8001442 <setTime+0x15e>
						else sTime->Hours-=1;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	701a      	strb	r2, [r3, #0]
						break;
 8001404:	e01d      	b.n	8001442 <setTime+0x15e>
					case 1:
						if(sTime->Minutes<=0) sTime->Minutes=59;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d103      	bne.n	8001416 <setTime+0x132>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	223b      	movs	r2, #59	; 0x3b
 8001412:	705a      	strb	r2, [r3, #1]
						else sTime->Minutes-=1;
						break;
 8001414:	e015      	b.n	8001442 <setTime+0x15e>
						else sTime->Minutes-=1;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	3b01      	subs	r3, #1
 800141c:	b2da      	uxtb	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	705a      	strb	r2, [r3, #1]
						break;
 8001422:	e00e      	b.n	8001442 <setTime+0x15e>
					case 2:
						if(sTime->Seconds<=0) sTime->Seconds=59;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	789b      	ldrb	r3, [r3, #2]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d103      	bne.n	8001434 <setTime+0x150>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	223b      	movs	r2, #59	; 0x3b
 8001430:	709a      	strb	r2, [r3, #2]
						else sTime->Seconds-=1;
					    break;
 8001432:	e005      	b.n	8001440 <setTime+0x15c>
						else sTime->Seconds-=1;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	789b      	ldrb	r3, [r3, #2]
 8001438:	3b01      	subs	r3, #1
 800143a:	b2da      	uxtb	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	709a      	strb	r2, [r3, #2]
					    break;
 8001440:	bf00      	nop
				}
				showSettingUpTime(&position, *sTime);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f107 0408 	add.w	r4, r7, #8
 8001448:	466d      	mov	r5, sp
 800144a:	f103 020c 	add.w	r2, r3, #12
 800144e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001452:	e885 0003 	stmia.w	r5, {r0, r1}
 8001456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff ff19 	bl	8001290 <showSettingUpTime>
			}
			HAL_Delay(100); // Czasowy bufor dla wciśnięcia przycisku
 800145e:	2064      	movs	r0, #100	; 0x64
 8001460:	f001 f9a6 	bl	80027b0 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 1) // Powtarzaj dopóki MIDDLE BUTTON nie zostanie naciśnięty
 8001464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <setTime+0x1bc>)
 800146a:	f001 fc73 	bl	8002d54 <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	f43f af54 	beq.w	800131e <setTime+0x3a>
		}
		position+=3; // Przesuń pozycje strzałki na kolejną kolumne
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3303      	adds	r3, #3
 800147a:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<3;i++) // Edycja kolejno 3 kolumn czasu
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3301      	adds	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b02      	cmp	r3, #2
 8001486:	f77f af37 	ble.w	80012f8 <setTime+0x14>
	}
	HAL_RTC_SetTime(hrtc, sTime, RTC_FORMAT_BIN); // Ustaw czas
 800148a:	2200      	movs	r2, #0
 800148c:	6839      	ldr	r1, [r7, #0]
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f002 fa82 	bl	8003998 <HAL_RTC_SetTime>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bdb0      	pop	{r4, r5, r7, pc}
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020000 	.word	0x40020000

080014a4 <showSettingUpDate>:

void showSettingUpDate(int *pos, RTC_DateTypeDef sDate) // Wyświetlenie daty przy edycji
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	lcd16x2_clear();
 80014ae:	f000 fb55 	bl	8001b5c <lcd16x2_clear>
	lcd16x2_printf("Date: %02d.%02d.%02d",sDate.Date,sDate.Month,sDate.Year);
 80014b2:	78bb      	ldrb	r3, [r7, #2]
 80014b4:	4619      	mov	r1, r3
 80014b6:	787b      	ldrb	r3, [r7, #1]
 80014b8:	461a      	mov	r2, r3
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	4809      	ldr	r0, [pc, #36]	; (80014e4 <showSettingUpDate+0x40>)
 80014be:	f000 fb57 	bl	8001b70 <lcd16x2_printf>
	lcd16x2_2ndLine();
 80014c2:	f000 fb43 	bl	8001b4c <lcd16x2_2ndLine>
	lcd16x2_setCursor(1, *pos);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4619      	mov	r1, r3
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 fb18 	bl	8001b04 <lcd16x2_setCursor>
	lcd16x2_printf("^");
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <showSettingUpDate+0x44>)
 80014d6:	f000 fb4b 	bl	8001b70 <lcd16x2_printf>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	080074d0 	.word	0x080074d0
 80014e8:	0800751c 	.word	0x0800751c

080014ec <setDate>:

void setDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate) // Ustawienie daty działa na tej samej zasadzie co czasu
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	int position = 7;
 80014f6:	2307      	movs	r3, #7
 80014f8:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<3;i++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e0b5      	b.n	800166c <setDate+0x180>
	{
		showSettingUpDate(&position, *sDate);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	f107 0208 	add.w	r2, r7, #8
 8001506:	6819      	ldr	r1, [r3, #0]
 8001508:	460b      	mov	r3, r1
 800150a:	4619      	mov	r1, r3
 800150c:	4610      	mov	r0, r2
 800150e:	f7ff ffc9 	bl	80014a4 <showSettingUpDate>
		HAL_Delay(500);
 8001512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001516:	f001 f94b 	bl	80027b0 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 1)
 800151a:	e098      	b.n	800164e <setDate+0x162>
		{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0) //UP
 800151c:	2140      	movs	r1, #64	; 0x40
 800151e:	485a      	ldr	r0, [pc, #360]	; (8001688 <setDate+0x19c>)
 8001520:	f001 fc18 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d143      	bne.n	80015b2 <setDate+0xc6>
			{
				switch(i)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d027      	beq.n	8001580 <setDate+0x94>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b02      	cmp	r3, #2
 8001534:	dc33      	bgt.n	800159e <setDate+0xb2>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <setDate+0x58>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d00f      	beq.n	8001562 <setDate+0x76>
 8001542:	e02c      	b.n	800159e <setDate+0xb2>
				{
					case 0:
						if(sDate->Date>=31) sDate->Date=0;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	2b1e      	cmp	r3, #30
 800154a:	d903      	bls.n	8001554 <setDate+0x68>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	709a      	strb	r2, [r3, #2]
						else sDate->Date+=1;
						break;
 8001552:	e024      	b.n	800159e <setDate+0xb2>
						else sDate->Date+=1;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	789b      	ldrb	r3, [r3, #2]
 8001558:	3301      	adds	r3, #1
 800155a:	b2da      	uxtb	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	709a      	strb	r2, [r3, #2]
						break;
 8001560:	e01d      	b.n	800159e <setDate+0xb2>
					case 1:
						if(sDate->Month>=12) sDate->Month=0;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	785b      	ldrb	r3, [r3, #1]
 8001566:	2b0b      	cmp	r3, #11
 8001568:	d903      	bls.n	8001572 <setDate+0x86>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2200      	movs	r2, #0
 800156e:	705a      	strb	r2, [r3, #1]
						else sDate->Month+=1;
						break;
 8001570:	e015      	b.n	800159e <setDate+0xb2>
						else sDate->Month+=1;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	785b      	ldrb	r3, [r3, #1]
 8001576:	3301      	adds	r3, #1
 8001578:	b2da      	uxtb	r2, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	705a      	strb	r2, [r3, #1]
						break;
 800157e:	e00e      	b.n	800159e <setDate+0xb2>
					case 2:
						if(sDate->Year>=99) sDate->Year=0;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	78db      	ldrb	r3, [r3, #3]
 8001584:	2b62      	cmp	r3, #98	; 0x62
 8001586:	d903      	bls.n	8001590 <setDate+0xa4>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	70da      	strb	r2, [r3, #3]
						else sDate->Year+=1;
						break;
 800158e:	e005      	b.n	800159c <setDate+0xb0>
						else sDate->Year+=1;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	78db      	ldrb	r3, [r3, #3]
 8001594:	3301      	adds	r3, #1
 8001596:	b2da      	uxtb	r2, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	70da      	strb	r2, [r3, #3]
						break;
 800159c:	bf00      	nop
				}
				showSettingUpDate(&position, *sDate);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	f107 0208 	add.w	r2, r7, #8
 80015a4:	6819      	ldr	r1, [r3, #0]
 80015a6:	460b      	mov	r3, r1
 80015a8:	4619      	mov	r1, r3
 80015aa:	4610      	mov	r0, r2
 80015ac:	f7ff ff7a 	bl	80014a4 <showSettingUpDate>
 80015b0:	e04a      	b.n	8001648 <setDate+0x15c>
			}
			else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0) //DOWN
 80015b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b6:	4834      	ldr	r0, [pc, #208]	; (8001688 <setDate+0x19c>)
 80015b8:	f001 fbcc 	bl	8002d54 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d142      	bne.n	8001648 <setDate+0x15c>
			{
				switch(i)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d027      	beq.n	8001618 <setDate+0x12c>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	dc33      	bgt.n	8001636 <setDate+0x14a>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <setDate+0xf0>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d00f      	beq.n	80015fa <setDate+0x10e>
 80015da:	e02c      	b.n	8001636 <setDate+0x14a>
				{
					case 0:
						if(sDate->Date<=0) sDate->Date=31;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d103      	bne.n	80015ec <setDate+0x100>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	221f      	movs	r2, #31
 80015e8:	709a      	strb	r2, [r3, #2]
						else sDate->Date-=1;
						break;
 80015ea:	e024      	b.n	8001636 <setDate+0x14a>
						else sDate->Date-=1;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	789b      	ldrb	r3, [r3, #2]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	709a      	strb	r2, [r3, #2]
						break;
 80015f8:	e01d      	b.n	8001636 <setDate+0x14a>
					case 1:
						if(sDate->Month<=0) sDate->Month=12;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	785b      	ldrb	r3, [r3, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d103      	bne.n	800160a <setDate+0x11e>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	220c      	movs	r2, #12
 8001606:	705a      	strb	r2, [r3, #1]
						else sDate->Month-=1;
						break;
 8001608:	e015      	b.n	8001636 <setDate+0x14a>
						else sDate->Month-=1;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	3b01      	subs	r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	705a      	strb	r2, [r3, #1]
						break;
 8001616:	e00e      	b.n	8001636 <setDate+0x14a>
					case 2:
						if(sDate->Year<=0) sDate->Year=99;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	78db      	ldrb	r3, [r3, #3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <setDate+0x13c>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2263      	movs	r2, #99	; 0x63
 8001624:	70da      	strb	r2, [r3, #3]
						else sDate->Year-=1;
					    break;
 8001626:	e005      	b.n	8001634 <setDate+0x148>
						else sDate->Year-=1;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	78db      	ldrb	r3, [r3, #3]
 800162c:	3b01      	subs	r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	70da      	strb	r2, [r3, #3]
					    break;
 8001634:	bf00      	nop
				}
				showSettingUpDate(&position, *sDate);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	f107 0208 	add.w	r2, r7, #8
 800163c:	6819      	ldr	r1, [r3, #0]
 800163e:	460b      	mov	r3, r1
 8001640:	4619      	mov	r1, r3
 8001642:	4610      	mov	r0, r2
 8001644:	f7ff ff2e 	bl	80014a4 <showSettingUpDate>
			}
			HAL_Delay(100);
 8001648:	2064      	movs	r0, #100	; 0x64
 800164a:	f001 f8b1 	bl	80027b0 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 1)
 800164e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001652:	480e      	ldr	r0, [pc, #56]	; (800168c <setDate+0x1a0>)
 8001654:	f001 fb7e 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	f43f af5e 	beq.w	800151c <setDate+0x30>
		}
		position+=3;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3303      	adds	r3, #3
 8001664:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<3;i++)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3301      	adds	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b02      	cmp	r3, #2
 8001670:	f77f af46 	ble.w	8001500 <setDate+0x14>
	}
	HAL_RTC_SetDate(hrtc, sDate, RTC_FORMAT_BIN);
 8001674:	2200      	movs	r2, #0
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f002 fa85 	bl	8003b88 <HAL_RTC_SetDate>
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40020800 	.word	0x40020800
 800168c:	40020000 	.word	0x40020000

08001690 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <DWT_Delay_Init+0x58>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <DWT_Delay_Init+0x58>)
 800169a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <DWT_Delay_Init+0x58>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <DWT_Delay_Init+0x58>)
 80016a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016aa:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <DWT_Delay_Init+0x5c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <DWT_Delay_Init+0x5c>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <DWT_Delay_Init+0x5c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <DWT_Delay_Init+0x5c>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <DWT_Delay_Init+0x5c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 80016ca:	bf00      	nop
  __NOP();
 80016cc:	bf00      	nop
  __NOP();
 80016ce:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <DWT_Delay_Init+0x5c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <DWT_Delay_Init+0x4c>
  {
    return 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	e000      	b.n	80016de <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 80016dc:	2301      	movs	r3, #1
  }
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000edf0 	.word	0xe000edf0
 80016ec:	e0001000 	.word	0xe0001000

080016f0 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <DWT_Delay_us+0x40>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80016fe:	f001 ffbf 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 8001702:	4603      	mov	r3, r0
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <DWT_Delay_us+0x44>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8001714:	bf00      	nop
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <DWT_Delay_us+0x40>)
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad2      	subs	r2, r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	d3f8      	bcc.n	8001716 <DWT_Delay_us+0x26>
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e0001000 	.word	0xe0001000
 8001734:	431bde83 	.word	0x431bde83

08001738 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <lcd16x2_enablePulse+0x34>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <lcd16x2_enablePulse+0x38>)
 8001742:	8811      	ldrh	r1, [r2, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fb1c 	bl	8002d84 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 800174c:	2014      	movs	r0, #20
 800174e:	f7ff ffcf 	bl	80016f0 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <lcd16x2_enablePulse+0x34>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a06      	ldr	r2, [pc, #24]	; (8001770 <lcd16x2_enablePulse+0x38>)
 8001758:	8811      	ldrh	r1, [r2, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f001 fb11 	bl	8002d84 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8001762:	203c      	movs	r0, #60	; 0x3c
 8001764:	f7ff ffc4 	bl	80016f0 <DWT_Delay_us>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000204 	.word	0x20000204
 8001770:	2000020a 	.word	0x2000020a

08001774 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <lcd16x2_rs+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a06      	ldr	r2, [pc, #24]	; (800179c <lcd16x2_rs+0x28>)
 8001784:	8811      	ldrh	r1, [r2, #0]
 8001786:	79fa      	ldrb	r2, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f001 fafb 	bl	8002d84 <HAL_GPIO_WritePin>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000204 	.word	0x20000204
 800179c:	20000208 	.word	0x20000208

080017a0 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 80017b8:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <lcd16x2_write+0x198>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d05a      	beq.n	8001876 <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80017c0:	4b5e      	ldr	r3, [pc, #376]	; (800193c <lcd16x2_write+0x19c>)
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <lcd16x2_write+0x1a0>)
 80017c6:	8819      	ldrh	r1, [r3, #0]
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	f001 fad7 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80017d6:	4b59      	ldr	r3, [pc, #356]	; (800193c <lcd16x2_write+0x19c>)
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	4b5a      	ldr	r3, [pc, #360]	; (8001944 <lcd16x2_write+0x1a4>)
 80017dc:	8819      	ldrh	r1, [r3, #0]
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	f001 facc 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <lcd16x2_write+0x19c>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	4b55      	ldr	r3, [pc, #340]	; (8001948 <lcd16x2_write+0x1a8>)
 80017f2:	8819      	ldrh	r1, [r3, #0]
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	f001 fac1 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001802:	4b4e      	ldr	r3, [pc, #312]	; (800193c <lcd16x2_write+0x19c>)
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	4b51      	ldr	r3, [pc, #324]	; (800194c <lcd16x2_write+0x1ac>)
 8001808:	8819      	ldrh	r1, [r3, #0]
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	f001 fab6 	bl	8002d84 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001818:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <lcd16x2_write+0x1b0>)
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <lcd16x2_write+0x1b4>)
 800181e:	8819      	ldrh	r1, [r3, #0]
 8001820:	7bbb      	ldrb	r3, [r7, #14]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	f001 faab 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800182e:	4b48      	ldr	r3, [pc, #288]	; (8001950 <lcd16x2_write+0x1b0>)
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	4b49      	ldr	r3, [pc, #292]	; (8001958 <lcd16x2_write+0x1b8>)
 8001834:	8819      	ldrh	r1, [r3, #0]
 8001836:	7bbb      	ldrb	r3, [r7, #14]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	f001 faa0 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001844:	4b42      	ldr	r3, [pc, #264]	; (8001950 <lcd16x2_write+0x1b0>)
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	4b44      	ldr	r3, [pc, #272]	; (800195c <lcd16x2_write+0x1bc>)
 800184a:	8819      	ldrh	r1, [r3, #0]
 800184c:	7bbb      	ldrb	r3, [r7, #14]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	f001 fa95 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800185a:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <lcd16x2_write+0x1b0>)
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	4b40      	ldr	r3, [pc, #256]	; (8001960 <lcd16x2_write+0x1c0>)
 8001860:	8819      	ldrh	r1, [r3, #0]
 8001862:	7bbb      	ldrb	r3, [r7, #14]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	f001 fa8a 	bl	8002d84 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001870:	f7ff ff62 	bl	8001738 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8001874:	e05b      	b.n	800192e <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001876:	4b36      	ldr	r3, [pc, #216]	; (8001950 <lcd16x2_write+0x1b0>)
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	4b36      	ldr	r3, [pc, #216]	; (8001954 <lcd16x2_write+0x1b4>)
 800187c:	8819      	ldrh	r1, [r3, #0]
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	f001 fa7c 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <lcd16x2_write+0x1b0>)
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	4b31      	ldr	r3, [pc, #196]	; (8001958 <lcd16x2_write+0x1b8>)
 8001892:	8819      	ldrh	r1, [r3, #0]
 8001894:	7bbb      	ldrb	r3, [r7, #14]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	f001 fa71 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <lcd16x2_write+0x1b0>)
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <lcd16x2_write+0x1bc>)
 80018a8:	8819      	ldrh	r1, [r3, #0]
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	f001 fa66 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <lcd16x2_write+0x1b0>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <lcd16x2_write+0x1c0>)
 80018be:	8819      	ldrh	r1, [r3, #0]
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	f001 fa5b 	bl	8002d84 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80018ce:	f7ff ff33 	bl	8001738 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <lcd16x2_write+0x1b0>)
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <lcd16x2_write+0x1b4>)
 80018d8:	8819      	ldrh	r1, [r3, #0]
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	f001 fa4e 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <lcd16x2_write+0x1b0>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <lcd16x2_write+0x1b8>)
 80018ee:	8819      	ldrh	r1, [r3, #0]
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	f001 fa43 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <lcd16x2_write+0x1b0>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <lcd16x2_write+0x1bc>)
 8001904:	8819      	ldrh	r1, [r3, #0]
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	f001 fa38 	bl	8002d84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <lcd16x2_write+0x1b0>)
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <lcd16x2_write+0x1c0>)
 800191a:	8819      	ldrh	r1, [r3, #0]
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	f001 fa2d 	bl	8002d84 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 800192a:	f7ff ff05 	bl	8001738 <lcd16x2_enablePulse>
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000
 800193c:	2000020c 	.word	0x2000020c
 8001940:	20000210 	.word	0x20000210
 8001944:	20000212 	.word	0x20000212
 8001948:	20000214 	.word	0x20000214
 800194c:	20000216 	.word	0x20000216
 8001950:	20000218 	.word	0x20000218
 8001954:	2000021c 	.word	0x2000021c
 8001958:	2000021e 	.word	0x2000021e
 800195c:	20000220 	.word	0x20000220
 8001960:	20000222 	.word	0x20000222

08001964 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff ff00 	bl	8001774 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff12 	bl	80017a0 <lcd16x2_write>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 800198e:	2001      	movs	r0, #1
 8001990:	f7ff fef0 	bl	8001774 <lcd16x2_rs>
  lcd16x2_write(data);
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff02 	bl	80017a0 <lcd16x2_write>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff fedc 	bl	8001774 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <lcd16x2_write4+0x7c>)
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <lcd16x2_write4+0x80>)
 80019c2:	8819      	ldrh	r1, [r3, #0]
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	f001 f9d9 	bl	8002d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <lcd16x2_write4+0x7c>)
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <lcd16x2_write4+0x84>)
 80019d8:	8819      	ldrh	r1, [r3, #0]
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	f001 f9ce 	bl	8002d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <lcd16x2_write4+0x7c>)
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <lcd16x2_write4+0x88>)
 80019ee:	8819      	ldrh	r1, [r3, #0]
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	f001 f9c3 	bl	8002d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <lcd16x2_write4+0x7c>)
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <lcd16x2_write4+0x8c>)
 8001a04:	8819      	ldrh	r1, [r3, #0]
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f001 f9b8 	bl	8002d84 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8001a14:	f7ff fe90 	bl	8001738 <lcd16x2_enablePulse>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000218 	.word	0x20000218
 8001a24:	2000021c 	.word	0x2000021c
 8001a28:	2000021e 	.word	0x2000021e
 8001a2c:	20000220 	.word	0x20000220
 8001a30:	20000222 	.word	0x20000222

08001a34 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	817b      	strh	r3, [r7, #10]
 8001a42:	4613      	mov	r3, r2
 8001a44:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8001a46:	f7ff fe23 	bl	8001690 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8001a4a:	4a24      	ldr	r2, [pc, #144]	; (8001adc <lcd16x2_init_4bits+0xa8>)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8001a50:	4a23      	ldr	r2, [pc, #140]	; (8001ae0 <lcd16x2_init_4bits+0xac>)
 8001a52:	897b      	ldrh	r3, [r7, #10]
 8001a54:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8001a56:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <lcd16x2_init_4bits+0xb0>)
 8001a58:	893b      	ldrh	r3, [r7, #8]
 8001a5a:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8001a5c:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <lcd16x2_init_4bits+0xb4>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8001a62:	4a22      	ldr	r2, [pc, #136]	; (8001aec <lcd16x2_init_4bits+0xb8>)
 8001a64:	8b3b      	ldrh	r3, [r7, #24]
 8001a66:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8001a68:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <lcd16x2_init_4bits+0xbc>)
 8001a6a:	8bbb      	ldrh	r3, [r7, #28]
 8001a6c:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8001a6e:	4a21      	ldr	r2, [pc, #132]	; (8001af4 <lcd16x2_init_4bits+0xc0>)
 8001a70:	8c3b      	ldrh	r3, [r7, #32]
 8001a72:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8001a74:	4a20      	ldr	r2, [pc, #128]	; (8001af8 <lcd16x2_init_4bits+0xc4>)
 8001a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a78:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <lcd16x2_init_4bits+0xc8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8001a80:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <lcd16x2_init_4bits+0xcc>)
 8001a82:	2228      	movs	r2, #40	; 0x28
 8001a84:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8001a86:	2014      	movs	r0, #20
 8001a88:	f000 fe92 	bl	80027b0 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f7ff ff89 	bl	80019a4 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8001a92:	2005      	movs	r0, #5
 8001a94:	f000 fe8c 	bl	80027b0 <HAL_Delay>
  lcd16x2_write4(0x3);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f7ff ff83 	bl	80019a4 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f000 fe86 	bl	80027b0 <HAL_Delay>
  lcd16x2_write4(0x3);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f7ff ff7d 	bl	80019a4 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 fe80 	bl	80027b0 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f7ff ff77 	bl	80019a4 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f000 fe7a 	bl	80027b0 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001abc:	2028      	movs	r0, #40	; 0x28
 8001abe:	f7ff ff51 	bl	8001964 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f7ff ff4e 	bl	8001964 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff ff4b 	bl	8001964 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8001ace:	2003      	movs	r0, #3
 8001ad0:	f000 fe6e 	bl	80027b0 <HAL_Delay>
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000204 	.word	0x20000204
 8001ae0:	20000208 	.word	0x20000208
 8001ae4:	2000020a 	.word	0x2000020a
 8001ae8:	20000218 	.word	0x20000218
 8001aec:	2000021c 	.word	0x2000021c
 8001af0:	2000021e 	.word	0x2000021e
 8001af4:	20000220 	.word	0x20000220
 8001af8:	20000222 	.word	0x20000222
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000001 	.word	0x20000001

08001b04 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	4613      	mov	r3, r2
 8001b12:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d108      	bne.n	8001b34 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b28:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff19 	bl	8001964 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8001b32:	e007      	b.n	8001b44 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001b3a:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff10 	bl	8001964 <lcd16x2_writeCommand>
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <lcd16x2_2ndLine>:
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001b50:	2100      	movs	r1, #0
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7ff ffd6 	bl	8001b04 <lcd16x2_setCursor>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001b60:	2001      	movs	r0, #1
 8001b62:	f7ff feff 	bl	8001964 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8001b66:	2003      	movs	r0, #3
 8001b68:	f000 fe22 	bl	80027b0 <HAL_Delay>
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8001b70:	b40f      	push	{r0, r1, r2, r3}
 8001b72:	b590      	push	{r4, r7, lr}
 8001b74:	b089      	sub	sp, #36	; 0x24
 8001b76:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001b78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b7c:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fa22 	bl	8004fd0 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	77fb      	strb	r3, [r7, #31]
 8001b90:	e00a      	b.n	8001ba8 <lcd16x2_printf+0x38>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	3320      	adds	r3, #32
 8001b96:	443b      	add	r3, r7
 8001b98:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fef1 	bl	8001984 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001ba2:	7ffb      	ldrb	r3, [r7, #31]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	77fb      	strb	r3, [r7, #31]
 8001ba8:	7ffc      	ldrb	r4, [r7, #31]
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fb0e 	bl	80001d0 <strlen>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	429c      	cmp	r4, r3
 8001bb8:	d202      	bcs.n	8001bc0 <lcd16x2_printf+0x50>
 8001bba:	7ffb      	ldrb	r3, [r7, #31]
 8001bbc:	2b0f      	cmp	r3, #15
 8001bbe:	d9e8      	bls.n	8001b92 <lcd16x2_printf+0x22>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3724      	adds	r7, #36	; 0x24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001bca:	b004      	add	sp, #16
 8001bcc:	4770      	bx	lr
	...

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b09c      	sub	sp, #112	; 0x70
 8001bd4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	const int numOfOptions = 5;
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	65bb      	str	r3, [r7, #88]	; 0x58
	char currTime[30];
	char currDate[30];
	float temperature;
	float humidity;
	int state = 1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
	int position = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
	struct option options[numOfOptions];
 8001be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001be4:	3b01      	subs	r3, #1
 8001be6:	657b      	str	r3, [r7, #84]	; 0x54
 8001be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bea:	2200      	movs	r2, #0
 8001bec:	461c      	mov	r4, r3
 8001bee:	4615      	mov	r5, r2
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	01eb      	lsls	r3, r5, #7
 8001bfa:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8001bfe:	01e2      	lsls	r2, r4, #7
 8001c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c02:	2200      	movs	r2, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	4611      	mov	r1, r2
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	01cb      	lsls	r3, r1, #7
 8001c12:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8001c16:	01c2      	lsls	r2, r0, #7
 8001c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	3307      	adds	r3, #7
 8001c1e:	08db      	lsrs	r3, r3, #3
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	ebad 0d03 	sub.w	sp, sp, r3
 8001c26:	ab04      	add	r3, sp, #16
 8001c28:	3300      	adds	r3, #0
 8001c2a:	653b      	str	r3, [r7, #80]	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c2c:	f000 fd4e 	bl	80026cc <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd16x2_init_4bits(GPIOE, GPIO_PIN_7, GPIO_PIN_11, GPIOE, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15);
 8001c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c34:	9303      	str	r3, [sp, #12]
 8001c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c3a:	9302      	str	r3, [sp, #8]
 8001c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <main+0x1d0>)
 8001c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	4853      	ldr	r0, [pc, #332]	; (8001da0 <main+0x1d0>)
 8001c52:	f7ff feef 	bl	8001a34 <lcd16x2_init_4bits>
  initMenu(options);
 8001c56:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c58:	f000 fa66 	bl	8002128 <initMenu>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c5c:	f000 f8b0 	bl	8001dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c60:	f000 f99c 	bl	8001f9c <MX_GPIO_Init>
  MX_RTC_Init();
 8001c64:	f000 f916 	bl	8001e94 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8001c68:	f000 f96e 	bl	8001f48 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch(state)
 8001c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	f200 8086 	bhi.w	8001d80 <main+0x1b0>
 8001c74:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <main+0xac>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c99 	.word	0x08001c99
 8001c80:	08001ca7 	.word	0x08001ca7
 8001c84:	08001cbd 	.word	0x08001cbd
 8001c88:	08001ce9 	.word	0x08001ce9
 8001c8c:	08001d45 	.word	0x08001d45
 8001c90:	08001d57 	.word	0x08001d57
 8001c94:	08001d69 	.word	0x08001d69
	{
	  case 0: // Stan bezczyności
	  {
		  state = action(numOfOptions, &position);
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001c9e:	f000 fb07 	bl	80022b0 <action>
 8001ca2:	65f8      	str	r0, [r7, #92]	; 0x5c
		  break;
 8001ca4:	e078      	b.n	8001d98 <main+0x1c8>
	  }
	  case 1: // Wyświetlenie menu
	  {
		  lcd16x2_clear();
 8001ca6:	f7ff ff59 	bl	8001b5c <lcd16x2_clear>
		  showMenu(numOfOptions, position, options);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001cb2:	f000 fa9f 	bl	80021f4 <showMenu>
		  state = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
		  break;
 8001cba:	e06d      	b.n	8001d98 <main+0x1c8>
	  }
	  case 2: // Wyświetlenie temperatury oraz wilogtoności
	  {
		  lcd16x2_clear();
 8001cbc:	f7ff ff4e 	bl	8001b5c <lcd16x2_clear>
		  DHT_GetData(&DHT11_Data);
 8001cc0:	4838      	ldr	r0, [pc, #224]	; (8001da4 <main+0x1d4>)
 8001cc2:	f7ff fa25 	bl	8001110 <DHT_GetData>
		  temperature = DHT11_Data.Temperature;
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <main+0x1d4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	64fb      	str	r3, [r7, #76]	; 0x4c
		  humidity = DHT11_Data.Humidity;
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <main+0x1d4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	64bb      	str	r3, [r7, #72]	; 0x48
		  showTempAndHum(temperature, humidity);
 8001cd2:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8001cd6:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001cda:	f7ff fa77 	bl	80011cc <showTempAndHum>
		  state = checkIfBack(state);
 8001cde:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001ce0:	f000 fa66 	bl	80021b0 <checkIfBack>
 8001ce4:	65f8      	str	r0, [r7, #92]	; 0x5c
		  break;
 8001ce6:	e057      	b.n	8001d98 <main+0x1c8>
	  }
	  case 3:
	  {
		  lcd16x2_clear();
 8001ce8:	f7ff ff38 	bl	8001b5c <lcd16x2_clear>
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001cec:	2200      	movs	r2, #0
 8001cee:	492e      	ldr	r1, [pc, #184]	; (8001da8 <main+0x1d8>)
 8001cf0:	482e      	ldr	r0, [pc, #184]	; (8001dac <main+0x1dc>)
 8001cf2:	f001 feeb 	bl	8003acc <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	492d      	ldr	r1, [pc, #180]	; (8001db0 <main+0x1e0>)
 8001cfa:	482c      	ldr	r0, [pc, #176]	; (8001dac <main+0x1dc>)
 8001cfc:	f001 ffc8 	bl	8003c90 <HAL_RTC_GetDate>
		  showTimeAndDate(sDate, sTime);
 8001d00:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <main+0x1d8>)
 8001d02:	4d2b      	ldr	r5, [pc, #172]	; (8001db0 <main+0x1e0>)
 8001d04:	466c      	mov	r4, sp
 8001d06:	f103 020c 	add.w	r2, r3, #12
 8001d0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d0e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d14:	6828      	ldr	r0, [r5, #0]
 8001d16:	f7ff fa7b 	bl	8001210 <showTimeAndDate>
		  HAL_UART_Transmit(&huart3, (uint8_t *)currDate, sizeof(currDate), 300);
 8001d1a:	f107 0108 	add.w	r1, r7, #8
 8001d1e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001d22:	221e      	movs	r2, #30
 8001d24:	4823      	ldr	r0, [pc, #140]	; (8001db4 <main+0x1e4>)
 8001d26:	f002 f90c 	bl	8003f42 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3, (uint8_t *)currTime, sizeof(currTime), 300);
 8001d2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d2e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001d32:	221e      	movs	r2, #30
 8001d34:	481f      	ldr	r0, [pc, #124]	; (8001db4 <main+0x1e4>)
 8001d36:	f002 f904 	bl	8003f42 <HAL_UART_Transmit>
		  state = checkIfBack(state);
 8001d3a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001d3c:	f000 fa38 	bl	80021b0 <checkIfBack>
 8001d40:	65f8      	str	r0, [r7, #92]	; 0x5c
		  break;
 8001d42:	e029      	b.n	8001d98 <main+0x1c8>
	  }
	  case 4:
	  {
		  lcd16x2_clear();
 8001d44:	f7ff ff0a 	bl	8001b5c <lcd16x2_clear>
		  setTime(&hrtc, &sTime);
 8001d48:	4917      	ldr	r1, [pc, #92]	; (8001da8 <main+0x1d8>)
 8001d4a:	4818      	ldr	r0, [pc, #96]	; (8001dac <main+0x1dc>)
 8001d4c:	f7ff faca 	bl	80012e4 <setTime>
		  state=1;
 8001d50:	2301      	movs	r3, #1
 8001d52:	65fb      	str	r3, [r7, #92]	; 0x5c
		  break;
 8001d54:	e020      	b.n	8001d98 <main+0x1c8>
	  }
	  case 5:
	  {
		  lcd16x2_clear();
 8001d56:	f7ff ff01 	bl	8001b5c <lcd16x2_clear>
		  setDate(&hrtc, &sDate);
 8001d5a:	4915      	ldr	r1, [pc, #84]	; (8001db0 <main+0x1e0>)
 8001d5c:	4813      	ldr	r0, [pc, #76]	; (8001dac <main+0x1dc>)
 8001d5e:	f7ff fbc5 	bl	80014ec <setDate>
		  state=1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	65fb      	str	r3, [r7, #92]	; 0x5c
		  break;
 8001d66:	e017      	b.n	8001d98 <main+0x1c8>
	  }
	  case 6:
	  {
		  lcd16x2_clear();
 8001d68:	f7ff fef8 	bl	8001b5c <lcd16x2_clear>
		  lcd16x2_printf("HISTORY");
 8001d6c:	4812      	ldr	r0, [pc, #72]	; (8001db8 <main+0x1e8>)
 8001d6e:	f7ff feff 	bl	8001b70 <lcd16x2_printf>
		  HAL_Delay(1000);
 8001d72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d76:	f000 fd1b 	bl	80027b0 <HAL_Delay>
		  state=1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
		  break;
 8001d7e:	e00b      	b.n	8001d98 <main+0x1c8>
	  }
	  default:
	  {
	  		  lcd16x2_clear();
 8001d80:	f7ff feec 	bl	8001b5c <lcd16x2_clear>
	  		  lcd16x2_printf("NO FUNCTION");
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <main+0x1ec>)
 8001d86:	f7ff fef3 	bl	8001b70 <lcd16x2_printf>
	  		  HAL_Delay(1000);
 8001d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d8e:	f000 fd0f 	bl	80027b0 <HAL_Delay>
	  		  state=1;
 8001d92:	2301      	movs	r3, #1
 8001d94:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  break;
 8001d96:	bf00      	nop
	  }
    }
	HAL_Delay(100);
 8001d98:	2064      	movs	r0, #100	; 0x64
 8001d9a:	f000 fd09 	bl	80027b0 <HAL_Delay>
	switch(state)
 8001d9e:	e765      	b.n	8001c6c <main+0x9c>
 8001da0:	40021000 	.word	0x40021000
 8001da4:	20000288 	.word	0x20000288
 8001da8:	20000290 	.word	0x20000290
 8001dac:	20000224 	.word	0x20000224
 8001db0:	200002a4 	.word	0x200002a4
 8001db4:	20000244 	.word	0x20000244
 8001db8:	08007520 	.word	0x08007520
 8001dbc:	08007528 	.word	0x08007528

08001dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b094      	sub	sp, #80	; 0x50
 8001dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dc6:	f107 0320 	add.w	r3, r7, #32
 8001dca:	2230      	movs	r2, #48	; 0x30
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 fc56 	bl	8004680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <SystemClock_Config+0xcc>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <SystemClock_Config+0xcc>)
 8001dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df2:	6413      	str	r3, [r2, #64]	; 0x40
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <SystemClock_Config+0xcc>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e00:	2300      	movs	r3, #0
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <SystemClock_Config+0xd0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <SystemClock_Config+0xd0>)
 8001e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <SystemClock_Config+0xd0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e20:	2301      	movs	r3, #1
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e24:	2310      	movs	r3, #16
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e30:	2300      	movs	r3, #0
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e34:	2308      	movs	r3, #8
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001e38:	2348      	movs	r3, #72	; 0x48
 8001e3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e40:	2304      	movs	r3, #4
 8001e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e44:	f107 0320 	add.w	r3, r7, #32
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 ffb5 	bl	8002db8 <HAL_RCC_OscConfig>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e54:	f000 f962 	bl	800211c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e58:	230f      	movs	r3, #15
 8001e5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	2102      	movs	r1, #2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 fa17 	bl	80032a8 <HAL_RCC_ClockConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e80:	f000 f94c 	bl	800211c <Error_Handler>
  }
}
 8001e84:	bf00      	nop
 8001e86:	3750      	adds	r7, #80	; 0x50
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40007000 	.word	0x40007000

08001e94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <MX_RTC_Init+0xac>)
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <MX_RTC_Init+0xb0>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <MX_RTC_Init+0xac>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <MX_RTC_Init+0xac>)
 8001eba:	227f      	movs	r2, #127	; 0x7f
 8001ebc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <MX_RTC_Init+0xac>)
 8001ec0:	22ff      	movs	r2, #255	; 0xff
 8001ec2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <MX_RTC_Init+0xac>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_RTC_Init+0xac>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <MX_RTC_Init+0xac>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ed6:	481a      	ldr	r0, [pc, #104]	; (8001f40 <MX_RTC_Init+0xac>)
 8001ed8:	f001 fce8 	bl	80038ac <HAL_RTC_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ee2:	f000 f91b 	bl	800211c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2201      	movs	r2, #1
 8001efe:	4619      	mov	r1, r3
 8001f00:	480f      	ldr	r0, [pc, #60]	; (8001f40 <MX_RTC_Init+0xac>)
 8001f02:	f001 fd49 	bl	8003998 <HAL_RTC_SetTime>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001f0c:	f000 f906 	bl	800211c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001f10:	2303      	movs	r3, #3
 8001f12:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001f14:	2305      	movs	r3, #5
 8001f16:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8001f18:	2312      	movs	r3, #18
 8001f1a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001f1c:	2323      	movs	r3, #35	; 0x23
 8001f1e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f20:	463b      	mov	r3, r7
 8001f22:	2201      	movs	r2, #1
 8001f24:	4619      	mov	r1, r3
 8001f26:	4806      	ldr	r0, [pc, #24]	; (8001f40 <MX_RTC_Init+0xac>)
 8001f28:	f001 fe2e 	bl	8003b88 <HAL_RTC_SetDate>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f32:	f000 f8f3 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000224 	.word	0x20000224
 8001f44:	40002800 	.word	0x40002800

08001f48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <MX_USART3_UART_Init+0x50>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f80:	f001 ff92 	bl	8003ea8 <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f8a:	f000 f8c7 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000244 	.word	0x20000244
 8001f98:	40004800 	.word	0x40004800

08001f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	; 0x30
 8001fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	f107 031c 	add.w	r3, r7, #28
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	4b53      	ldr	r3, [pc, #332]	; (8002104 <MX_GPIO_Init+0x168>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a52      	ldr	r2, [pc, #328]	; (8002104 <MX_GPIO_Init+0x168>)
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b50      	ldr	r3, [pc, #320]	; (8002104 <MX_GPIO_Init+0x168>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <MX_GPIO_Init+0x168>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a4b      	ldr	r2, [pc, #300]	; (8002104 <MX_GPIO_Init+0x168>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b49      	ldr	r3, [pc, #292]	; (8002104 <MX_GPIO_Init+0x168>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	4b45      	ldr	r3, [pc, #276]	; (8002104 <MX_GPIO_Init+0x168>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a44      	ldr	r2, [pc, #272]	; (8002104 <MX_GPIO_Init+0x168>)
 8001ff4:	f043 0310 	orr.w	r3, r3, #16
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b42      	ldr	r3, [pc, #264]	; (8002104 <MX_GPIO_Init+0x168>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <MX_GPIO_Init+0x168>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a3d      	ldr	r2, [pc, #244]	; (8002104 <MX_GPIO_Init+0x168>)
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <MX_GPIO_Init+0x168>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4b37      	ldr	r3, [pc, #220]	; (8002104 <MX_GPIO_Init+0x168>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a36      	ldr	r2, [pc, #216]	; (8002104 <MX_GPIO_Init+0x168>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b34      	ldr	r3, [pc, #208]	; (8002104 <MX_GPIO_Init+0x168>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	4b30      	ldr	r3, [pc, #192]	; (8002104 <MX_GPIO_Init+0x168>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <MX_GPIO_Init+0x168>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <MX_GPIO_Init+0x168>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800205a:	2200      	movs	r2, #0
 800205c:	f64f 4180 	movw	r1, #64640	; 0xfc80
 8002060:	4829      	ldr	r0, [pc, #164]	; (8002108 <MX_GPIO_Init+0x16c>)
 8002062:	f000 fe8f 	bl	8002d84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002066:	2302      	movs	r3, #2
 8002068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206a:	2303      	movs	r3, #3
 800206c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	4824      	ldr	r0, [pc, #144]	; (800210c <MX_GPIO_Init+0x170>)
 800207a:	f000 fccf 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE10 PE11 PE12
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800207e:	f64f 4380 	movw	r3, #64640	; 0xfc80
 8002082:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002084:	2301      	movs	r3, #1
 8002086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	481c      	ldr	r0, [pc, #112]	; (8002108 <MX_GPIO_Init+0x16c>)
 8002098:	f000 fcc0 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800209c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	4619      	mov	r1, r3
 80020b0:	4817      	ldr	r0, [pc, #92]	; (8002110 <MX_GPIO_Init+0x174>)
 80020b2:	f000 fcb3 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80020b6:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 80020ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	4619      	mov	r1, r3
 80020ca:	4812      	ldr	r0, [pc, #72]	; (8002114 <MX_GPIO_Init+0x178>)
 80020cc:	f000 fca6 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <MX_GPIO_Init+0x17c>)
 80020e6:	f000 fc99 	bl	8002a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2017      	movs	r0, #23
 80020f0:	f000 fc5d 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020f4:	2017      	movs	r0, #23
 80020f6:	f000 fc76 	bl	80029e6 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 80020fa:	bf00      	nop
 80020fc:	3730      	adds	r7, #48	; 0x30
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	40021000 	.word	0x40021000
 800210c:	40020400 	.word	0x40020400
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40020800 	.word	0x40020800
 8002118:	40020000 	.word	0x40020000

0800211c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002120:	b672      	cpsid	i
}
 8002122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002124:	e7fe      	b.n	8002124 <Error_Handler+0x8>
	...

08002128 <initMenu>:
#include "stdbool.h"
#include "string.h"
#include "lcd16x2.h"

void initMenu(struct option options[])		  //
{											  // Funkcja do inicjalizacji menu czyli
 8002128:	b490      	push	{r4, r7}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	strcpy(options[0].name, "1. TEMP/HUM");   // przypisanie poszczególnym opcjom nazwy
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a1a      	ldr	r2, [pc, #104]	; (800219c <initMenu+0x74>)
 8002134:	461c      	mov	r4, r3
 8002136:	4613      	mov	r3, r2
 8002138:	cb07      	ldmia	r3!, {r0, r1, r2}
 800213a:	6020      	str	r0, [r4, #0]
 800213c:	6061      	str	r1, [r4, #4]
 800213e:	60a2      	str	r2, [r4, #8]
	strcpy(options[1].name, "2. TIME/DATE");  //
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3310      	adds	r3, #16
 8002144:	461a      	mov	r2, r3
 8002146:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <initMenu+0x78>)
 8002148:	4614      	mov	r4, r2
 800214a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800214c:	6020      	str	r0, [r4, #0]
 800214e:	6061      	str	r1, [r4, #4]
 8002150:	60a2      	str	r2, [r4, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	7323      	strb	r3, [r4, #12]
	strcpy(options[2].name, "3. SET TIME");   // Ilość opcji można zmienić w
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3320      	adds	r3, #32
 800215a:	461a      	mov	r2, r3
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <initMenu+0x7c>)
 800215e:	4614      	mov	r4, r2
 8002160:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002162:	6020      	str	r0, [r4, #0]
 8002164:	6061      	str	r1, [r4, #4]
 8002166:	60a2      	str	r2, [r4, #8]
	strcpy(options[3].name, "4. SET DATE");   // stałej numOfOptions w main.c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3330      	adds	r3, #48	; 0x30
 800216c:	461a      	mov	r2, r3
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <initMenu+0x80>)
 8002170:	4614      	mov	r4, r2
 8002172:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002174:	6020      	str	r0, [r4, #0]
 8002176:	6061      	str	r1, [r4, #4]
 8002178:	60a2      	str	r2, [r4, #8]
	strcpy(options[4].name, "5. HISTORY");    //
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3340      	adds	r3, #64	; 0x40
 800217e:	461a      	mov	r2, r3
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <initMenu+0x84>)
 8002182:	cb03      	ldmia	r3!, {r0, r1}
 8002184:	6010      	str	r0, [r2, #0]
 8002186:	6051      	str	r1, [r2, #4]
 8002188:	8819      	ldrh	r1, [r3, #0]
 800218a:	789b      	ldrb	r3, [r3, #2]
 800218c:	8111      	strh	r1, [r2, #8]
 800218e:	7293      	strb	r3, [r2, #10]
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bc90      	pop	{r4, r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	08007534 	.word	0x08007534
 80021a0:	08007540 	.word	0x08007540
 80021a4:	08007550 	.word	0x08007550
 80021a8:	0800755c 	.word	0x0800755c
 80021ac:	08007568 	.word	0x08007568

080021b0 <checkIfBack>:

int checkIfBack(int currState) // Funkcja sprawdzająca czy przycisk powrotu został wciśnięty podczas odświeżania co sekundę obrazu
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	for(int i=0;i<20;i++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e00f      	b.n	80021de <checkIfBack+0x2e>
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 0)
 80021be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c2:	480b      	ldr	r0, [pc, #44]	; (80021f0 <checkIfBack+0x40>)
 80021c4:	f000 fdc6 	bl	8002d54 <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <checkIfBack+0x22>
			return 1;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e009      	b.n	80021e6 <checkIfBack+0x36>
		HAL_Delay(50);
 80021d2:	2032      	movs	r0, #50	; 0x32
 80021d4:	f000 faec 	bl	80027b0 <HAL_Delay>
	for(int i=0;i<20;i++)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3301      	adds	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b13      	cmp	r3, #19
 80021e2:	ddec      	ble.n	80021be <checkIfBack+0xe>
	}
	return currState;
 80021e4:	687b      	ldr	r3, [r7, #4]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40020000 	.word	0x40020000

080021f4 <showMenu>:

void showMenu(int num, int pos, struct option options[] ) // Funkcja do pokazywania opcji wedle pozycji X
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
	if(pos < num-1)  // Jeśli X wskazuje do przedostatniej opcji
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3b01      	subs	r3, #1
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	429a      	cmp	r2, r3
 8002208:	da13      	bge.n	8002232 <showMenu+0x3e>
	{
		lcd16x2_printf("%s x",options[pos].name);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	4619      	mov	r1, r3
 8002214:	4815      	ldr	r0, [pc, #84]	; (800226c <showMenu+0x78>)
 8002216:	f7ff fcab 	bl	8001b70 <lcd16x2_printf>
		lcd16x2_2ndLine();
 800221a:	f7ff fc97 	bl	8001b4c <lcd16x2_2ndLine>
		lcd16x2_printf("%s",options[pos+1].name);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3301      	adds	r3, #1
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4413      	add	r3, r2
 8002228:	4619      	mov	r1, r3
 800222a:	4811      	ldr	r0, [pc, #68]	; (8002270 <showMenu+0x7c>)
 800222c:	f7ff fca0 	bl	8001b70 <lcd16x2_printf>
	{
		lcd16x2_printf("%s",options[pos-1].name);
		lcd16x2_2ndLine();
		lcd16x2_printf("%s x",options[num-1].name);
	}
}
 8002230:	e017      	b.n	8002262 <showMenu+0x6e>
		lcd16x2_printf("%s",options[pos-1].name);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8002238:	3b01      	subs	r3, #1
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	4619      	mov	r1, r3
 8002242:	480b      	ldr	r0, [pc, #44]	; (8002270 <showMenu+0x7c>)
 8002244:	f7ff fc94 	bl	8001b70 <lcd16x2_printf>
		lcd16x2_2ndLine();
 8002248:	f7ff fc80 	bl	8001b4c <lcd16x2_2ndLine>
		lcd16x2_printf("%s x",options[num-1].name);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8002252:	3b01      	subs	r3, #1
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4619      	mov	r1, r3
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <showMenu+0x78>)
 800225e:	f7ff fc87 	bl	8001b70 <lcd16x2_printf>
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	08007574 	.word	0x08007574
 8002270:	0800757c 	.word	0x0800757c

08002274 <verifyPosition>:

void verifyPosition(int num, int *pos) // Weryfikacja pozycji X aby nie przekraczała dozwolonych opcji
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
	if(*pos >= num-1)   // Jeśli X ma przesunąć się niżej niż ostatnia opcja
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3b01      	subs	r3, #1
 8002286:	429a      	cmp	r2, r3
 8002288:	db04      	blt.n	8002294 <verifyPosition+0x20>
		*pos=num-1;     // Ustaw na ostatnią opcję
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	601a      	str	r2, [r3, #0]
	else if(*pos == -1) // Jeśli X ma przesunąć się wyżej niż pierwsza opcja
		*pos=0;         // Ustaw pierwszą opcję
}
 8002292:	e007      	b.n	80022a4 <verifyPosition+0x30>
	else if(*pos == -1) // Jeśli X ma przesunąć się wyżej niż pierwsza opcja
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d102      	bne.n	80022a4 <verifyPosition+0x30>
		*pos=0;         // Ustaw pierwszą opcję
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <action>:

int action(int num, int *pos) // Funkcja do obsługi przycisków będąc w menu głównym
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0) //DOWN
 80022ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022be:	481e      	ldr	r0, [pc, #120]	; (8002338 <action+0x88>)
 80022c0:	f000 fd48 	bl	8002d54 <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <action+0x36>
	{
		*pos+=1; // Przesuń pozycje X w dół
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	601a      	str	r2, [r3, #0]
		verifyPosition(num, pos);
 80022d4:	6839      	ldr	r1, [r7, #0]
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ffcc 	bl	8002274 <verifyPosition>
		HAL_Delay(100);
 80022dc:	2064      	movs	r0, #100	; 0x64
 80022de:	f000 fa67 	bl	80027b0 <HAL_Delay>
		return 1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e024      	b.n	8002330 <action+0x80>
	}
	else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0) //UP
 80022e6:	2140      	movs	r1, #64	; 0x40
 80022e8:	4813      	ldr	r0, [pc, #76]	; (8002338 <action+0x88>)
 80022ea:	f000 fd33 	bl	8002d54 <HAL_GPIO_ReadPin>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10d      	bne.n	8002310 <action+0x60>
	{
		*pos-=1; // Przesuń pozycje X w górę
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	1e5a      	subs	r2, r3, #1
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	601a      	str	r2, [r3, #0]
		verifyPosition(num, pos);
 80022fe:	6839      	ldr	r1, [r7, #0]
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ffb7 	bl	8002274 <verifyPosition>
		HAL_Delay(100);
 8002306:	2064      	movs	r0, #100	; 0x64
 8002308:	f000 fa52 	bl	80027b0 <HAL_Delay>
		return 1;
 800230c:	2301      	movs	r3, #1
 800230e:	e00f      	b.n	8002330 <action+0x80>
	}
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 0) //MIDDLE
 8002310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002314:	4809      	ldr	r0, [pc, #36]	; (800233c <action+0x8c>)
 8002316:	f000 fd1d 	bl	8002d54 <HAL_GPIO_ReadPin>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d106      	bne.n	800232e <action+0x7e>
	{
		HAL_Delay(100);
 8002320:	2064      	movs	r0, #100	; 0x64
 8002322:	f000 fa45 	bl	80027b0 <HAL_Delay>
		return *pos+2; // Wybierz opcję pod pozycją X
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3302      	adds	r3, #2
 800232c:	e000      	b.n	8002330 <action+0x80>
	}

	return 0; //NONE
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40020800 	.word	0x40020800
 800233c:	40020000 	.word	0x40020000

08002340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_MspInit+0x4c>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a0f      	ldr	r2, [pc, #60]	; (800238c <HAL_MspInit+0x4c>)
 8002350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_MspInit+0x4c>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_MspInit+0x4c>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a08      	ldr	r2, [pc, #32]	; (800238c <HAL_MspInit+0x4c>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002370:	6413      	str	r3, [r2, #64]	; 0x40
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_MspInit+0x4c>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800

08002390 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <HAL_RTC_MspInit+0x4c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d111      	bne.n	80023d4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023b0:	2302      	movs	r3, #2
 80023b2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	4618      	mov	r0, r3
 80023c0:	f001 f992 	bl	80036e8 <HAL_RCCEx_PeriphCLKConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80023ca:	f7ff fea7 	bl	800211c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <HAL_RTC_MspInit+0x50>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023d4:	bf00      	nop
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40002800 	.word	0x40002800
 80023e0:	42470e3c 	.word	0x42470e3c

080023e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_UART_MspInit+0x84>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d12c      	bne.n	8002460 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_UART_MspInit+0x88>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4a17      	ldr	r2, [pc, #92]	; (800246c <HAL_UART_MspInit+0x88>)
 8002410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002414:	6413      	str	r3, [r2, #64]	; 0x40
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <HAL_UART_MspInit+0x88>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_UART_MspInit+0x88>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_UART_MspInit+0x88>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_UART_MspInit+0x88>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800243e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002450:	2307      	movs	r3, #7
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4619      	mov	r1, r3
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <HAL_UART_MspInit+0x8c>)
 800245c:	f000 fade 	bl	8002a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002460:	bf00      	nop
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40004800 	.word	0x40004800
 800246c:	40023800 	.word	0x40023800
 8002470:	40020400 	.word	0x40020400

08002474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <NMI_Handler+0x4>

0800247a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247e:	e7fe      	b.n	800247e <HardFault_Handler+0x4>

08002480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <MemManage_Handler+0x4>

08002486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248a:	e7fe      	b.n	800248a <BusFault_Handler+0x4>

0800248c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <UsageFault_Handler+0x4>

08002492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c0:	f000 f956 	bl	8002770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return 1;
 80024cc:	2301      	movs	r3, #1
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_kill>:

int _kill(int pid, int sig)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024e2:	f002 f8a3 	bl	800462c <__errno>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2216      	movs	r2, #22
 80024ea:	601a      	str	r2, [r3, #0]
  return -1;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_exit>:

void _exit (int status)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ffe7 	bl	80024d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800250a:	e7fe      	b.n	800250a <_exit+0x12>

0800250c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	e00a      	b.n	8002534 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800251e:	f3af 8000 	nop.w
 8002522:	4601      	mov	r1, r0
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	60ba      	str	r2, [r7, #8]
 800252a:	b2ca      	uxtb	r2, r1
 800252c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3301      	adds	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	dbf0      	blt.n	800251e <_read+0x12>
  }

  return len;
 800253c:	687b      	ldr	r3, [r7, #4]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	e009      	b.n	800256c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	60ba      	str	r2, [r7, #8]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	3301      	adds	r3, #1
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	dbf1      	blt.n	8002558 <_write+0x12>
  }
  return len;
 8002574:	687b      	ldr	r3, [r7, #4]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <_close>:

int _close(int file)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a6:	605a      	str	r2, [r3, #4]
  return 0;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <_isatty>:

int _isatty(int file)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025be:	2301      	movs	r3, #1
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <_sbrk+0x5c>)
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <_sbrk+0x60>)
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <_sbrk+0x64>)
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <_sbrk+0x68>)
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	429a      	cmp	r2, r3
 8002616:	d207      	bcs.n	8002628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002618:	f002 f808 	bl	800462c <__errno>
 800261c:	4603      	mov	r3, r0
 800261e:	220c      	movs	r2, #12
 8002620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	e009      	b.n	800263c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <_sbrk+0x64>)
 8002638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20020000 	.word	0x20020000
 8002648:	00000400 	.word	0x00000400
 800264c:	200002a8 	.word	0x200002a8
 8002650:	200002c0 	.word	0x200002c0

08002654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <SystemInit+0x20>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <SystemInit+0x20>)
 8002660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800267c:	480d      	ldr	r0, [pc, #52]	; (80026b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800267e:	490e      	ldr	r1, [pc, #56]	; (80026b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002680:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002684:	e002      	b.n	800268c <LoopCopyDataInit>

08002686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268a:	3304      	adds	r3, #4

0800268c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800268c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002690:	d3f9      	bcc.n	8002686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002692:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002694:	4c0b      	ldr	r4, [pc, #44]	; (80026c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002698:	e001      	b.n	800269e <LoopFillZerobss>

0800269a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800269c:	3204      	adds	r2, #4

0800269e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a0:	d3fb      	bcc.n	800269a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026a2:	f7ff ffd7 	bl	8002654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026a6:	f001 ffc7 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026aa:	f7ff fa91 	bl	8001bd0 <main>
  bx  lr    
 80026ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80026bc:	08007984 	.word	0x08007984
  ldr r2, =_sbss
 80026c0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80026c4:	200002c0 	.word	0x200002c0

080026c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC_IRQHandler>
	...

080026cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0d      	ldr	r2, [pc, #52]	; (800270c <HAL_Init+0x40>)
 80026d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_Init+0x40>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_Init+0x40>)
 80026e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_Init+0x40>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_Init+0x40>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f4:	2003      	movs	r0, #3
 80026f6:	f000 f94f 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fa:	200f      	movs	r0, #15
 80026fc:	f000 f808 	bl	8002710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002700:	f7ff fe1e 	bl	8002340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023c00 	.word	0x40023c00

08002710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_InitTick+0x54>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_InitTick+0x58>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	fbb3 f3f1 	udiv	r3, r3, r1
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f967 	bl	8002a02 <HAL_SYSTICK_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e00e      	b.n	800275c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d80a      	bhi.n	800275a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002744:	2200      	movs	r2, #0
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f000 f92f 	bl	80029ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <HAL_InitTick+0x5c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000004 	.word	0x20000004
 8002768:	2000000c 	.word	0x2000000c
 800276c:	20000008 	.word	0x20000008

08002770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x20>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x24>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4413      	add	r3, r2
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_IncTick+0x24>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	2000000c 	.word	0x2000000c
 8002794:	200002ac 	.word	0x200002ac

08002798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return uwTick;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_GetTick+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	200002ac 	.word	0x200002ac

080027b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff ffee 	bl	8002798 <HAL_GetTick>
 80027bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d005      	beq.n	80027d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_Delay+0x44>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027d6:	bf00      	nop
 80027d8:	f7ff ffde 	bl	8002798 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d8f7      	bhi.n	80027d8 <HAL_Delay+0x28>
  {
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	2000000c 	.word	0x2000000c

080027f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db0b      	blt.n	8002886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4907      	ldr	r1, [pc, #28]	; (8002894 <__NVIC_EnableIRQ+0x38>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2001      	movs	r0, #1
 800287e:	fa00 f202 	lsl.w	r2, r0, r2
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	; (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002964:	d301      	bcc.n	800296a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <SysTick_Config+0x40>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002972:	210f      	movs	r1, #15
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	f7ff ff8e 	bl	8002898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <SysTick_Config+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SysTick_Config+0x40>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000e010 	.word	0xe000e010

08002998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff29 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c0:	f7ff ff3e 	bl	8002840 <__NVIC_GetPriorityGrouping>
 80029c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff8e 	bl	80028ec <NVIC_EncodePriority>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff5d 	bl	8002898 <__NVIC_SetPriority>
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff31 	bl	800285c <__NVIC_EnableIRQ>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffa2 	bl	8002954 <SysTick_Config>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	e16b      	b.n	8002d10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	f040 815a 	bne.w	8002d0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d005      	beq.n	8002a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d130      	bne.n	8002ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 0201 	and.w	r2, r3, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d017      	beq.n	8002b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d123      	bne.n	8002b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	08da      	lsrs	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3208      	adds	r2, #8
 8002b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	220f      	movs	r2, #15
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	08da      	lsrs	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3208      	adds	r2, #8
 8002b5a:	69b9      	ldr	r1, [r7, #24]
 8002b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0203 	and.w	r2, r3, #3
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80b4 	beq.w	8002d0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b60      	ldr	r3, [pc, #384]	; (8002d28 <HAL_GPIO_Init+0x30c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a5f      	ldr	r2, [pc, #380]	; (8002d28 <HAL_GPIO_Init+0x30c>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b5d      	ldr	r3, [pc, #372]	; (8002d28 <HAL_GPIO_Init+0x30c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bbe:	4a5b      	ldr	r2, [pc, #364]	; (8002d2c <HAL_GPIO_Init+0x310>)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_GPIO_Init+0x314>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d02b      	beq.n	8002c42 <HAL_GPIO_Init+0x226>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a51      	ldr	r2, [pc, #324]	; (8002d34 <HAL_GPIO_Init+0x318>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d025      	beq.n	8002c3e <HAL_GPIO_Init+0x222>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a50      	ldr	r2, [pc, #320]	; (8002d38 <HAL_GPIO_Init+0x31c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01f      	beq.n	8002c3a <HAL_GPIO_Init+0x21e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4f      	ldr	r2, [pc, #316]	; (8002d3c <HAL_GPIO_Init+0x320>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d019      	beq.n	8002c36 <HAL_GPIO_Init+0x21a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4e      	ldr	r2, [pc, #312]	; (8002d40 <HAL_GPIO_Init+0x324>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_GPIO_Init+0x216>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a4d      	ldr	r2, [pc, #308]	; (8002d44 <HAL_GPIO_Init+0x328>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00d      	beq.n	8002c2e <HAL_GPIO_Init+0x212>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4c      	ldr	r2, [pc, #304]	; (8002d48 <HAL_GPIO_Init+0x32c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <HAL_GPIO_Init+0x20e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4b      	ldr	r2, [pc, #300]	; (8002d4c <HAL_GPIO_Init+0x330>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_GPIO_Init+0x20a>
 8002c22:	2307      	movs	r3, #7
 8002c24:	e00e      	b.n	8002c44 <HAL_GPIO_Init+0x228>
 8002c26:	2308      	movs	r3, #8
 8002c28:	e00c      	b.n	8002c44 <HAL_GPIO_Init+0x228>
 8002c2a:	2306      	movs	r3, #6
 8002c2c:	e00a      	b.n	8002c44 <HAL_GPIO_Init+0x228>
 8002c2e:	2305      	movs	r3, #5
 8002c30:	e008      	b.n	8002c44 <HAL_GPIO_Init+0x228>
 8002c32:	2304      	movs	r3, #4
 8002c34:	e006      	b.n	8002c44 <HAL_GPIO_Init+0x228>
 8002c36:	2303      	movs	r3, #3
 8002c38:	e004      	b.n	8002c44 <HAL_GPIO_Init+0x228>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e002      	b.n	8002c44 <HAL_GPIO_Init+0x228>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_GPIO_Init+0x228>
 8002c42:	2300      	movs	r3, #0
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	f002 0203 	and.w	r2, r2, #3
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	4093      	lsls	r3, r2
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c54:	4935      	ldr	r1, [pc, #212]	; (8002d2c <HAL_GPIO_Init+0x310>)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c62:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <HAL_GPIO_Init+0x334>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c86:	4a32      	ldr	r2, [pc, #200]	; (8002d50 <HAL_GPIO_Init+0x334>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c8c:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_GPIO_Init+0x334>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb0:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <HAL_GPIO_Init+0x334>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cb6:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <HAL_GPIO_Init+0x334>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cda:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_GPIO_Init+0x334>)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_GPIO_Init+0x334>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d04:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <HAL_GPIO_Init+0x334>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b0f      	cmp	r3, #15
 8002d14:	f67f ae90 	bls.w	8002a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40013800 	.word	0x40013800
 8002d30:	40020000 	.word	0x40020000
 8002d34:	40020400 	.word	0x40020400
 8002d38:	40020800 	.word	0x40020800
 8002d3c:	40020c00 	.word	0x40020c00
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40021400 	.word	0x40021400
 8002d48:	40021800 	.word	0x40021800
 8002d4c:	40021c00 	.word	0x40021c00
 8002d50:	40013c00 	.word	0x40013c00

08002d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e001      	b.n	8002d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
 8002d90:	4613      	mov	r3, r2
 8002d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d94:	787b      	ldrb	r3, [r7, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002da0:	e003      	b.n	8002daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	041a      	lsls	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	619a      	str	r2, [r3, #24]
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e267      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d075      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dd6:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d00c      	beq.n	8002dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de2:	4b85      	ldr	r3, [pc, #532]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d112      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dee:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	4b7e      	ldr	r3, [pc, #504]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x108>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d157      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e242      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x74>
 8002e1e:	4b76      	ldr	r3, [pc, #472]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a75      	ldr	r2, [pc, #468]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x98>
 8002e36:	4b70      	ldr	r3, [pc, #448]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6f      	ldr	r2, [pc, #444]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b6d      	ldr	r3, [pc, #436]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a6c      	ldr	r2, [pc, #432]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e50:	4b69      	ldr	r3, [pc, #420]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a68      	ldr	r2, [pc, #416]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b66      	ldr	r3, [pc, #408]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7ff fc92 	bl	8002798 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e78:	f7ff fc8e 	bl	8002798 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e207      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0xc0>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7ff fc7e 	bl	8002798 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7ff fc7a 	bl	8002798 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e1f3      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xe8>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d063      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ece:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d11c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ee6:	4b44      	ldr	r3, [pc, #272]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d116      	bne.n	8002f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_RCC_OscConfig+0x152>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e1c7      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4937      	ldr	r1, [pc, #220]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	e03a      	b.n	8002f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f28:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <HAL_RCC_OscConfig+0x244>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7ff fc33 	bl	8002798 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f36:	f7ff fc2f 	bl	8002798 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1a8      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f54:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4925      	ldr	r1, [pc, #148]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	600b      	str	r3, [r1, #0]
 8002f68:	e015      	b.n	8002f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_RCC_OscConfig+0x244>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7ff fc12 	bl	8002798 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f78:	f7ff fc0e 	bl	8002798 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e187      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d036      	beq.n	8003010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d016      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_RCC_OscConfig+0x248>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb0:	f7ff fbf2 	bl	8002798 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb8:	f7ff fbee 	bl	8002798 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e167      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x200>
 8002fd6:	e01b      	b.n	8003010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_OscConfig+0x248>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fde:	f7ff fbdb 	bl	8002798 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe4:	e00e      	b.n	8003004 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe6:	f7ff fbd7 	bl	8002798 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d907      	bls.n	8003004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e150      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	42470000 	.word	0x42470000
 8003000:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ea      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8097 	beq.w	800314c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003022:	4b81      	ldr	r3, [pc, #516]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10f      	bne.n	800304e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	4b7d      	ldr	r3, [pc, #500]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a7c      	ldr	r2, [pc, #496]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	4b7a      	ldr	r3, [pc, #488]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304a:	2301      	movs	r3, #1
 800304c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304e:	4b77      	ldr	r3, [pc, #476]	; (800322c <HAL_RCC_OscConfig+0x474>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d118      	bne.n	800308c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800305a:	4b74      	ldr	r3, [pc, #464]	; (800322c <HAL_RCC_OscConfig+0x474>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a73      	ldr	r2, [pc, #460]	; (800322c <HAL_RCC_OscConfig+0x474>)
 8003060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003066:	f7ff fb97 	bl	8002798 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306e:	f7ff fb93 	bl	8002798 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e10c      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	4b6a      	ldr	r3, [pc, #424]	; (800322c <HAL_RCC_OscConfig+0x474>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x2ea>
 8003094:	4b64      	ldr	r3, [pc, #400]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a63      	ldr	r2, [pc, #396]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	e01c      	b.n	80030dc <HAL_RCC_OscConfig+0x324>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x30c>
 80030aa:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	4a5e      	ldr	r2, [pc, #376]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	6713      	str	r3, [r2, #112]	; 0x70
 80030b6:	4b5c      	ldr	r3, [pc, #368]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	4a5b      	ldr	r2, [pc, #364]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70
 80030c2:	e00b      	b.n	80030dc <HAL_RCC_OscConfig+0x324>
 80030c4:	4b58      	ldr	r3, [pc, #352]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4a57      	ldr	r2, [pc, #348]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
 80030d0:	4b55      	ldr	r3, [pc, #340]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	4a54      	ldr	r2, [pc, #336]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030d6:	f023 0304 	bic.w	r3, r3, #4
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d015      	beq.n	8003110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7ff fb58 	bl	8002798 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7ff fb54 	bl	8002798 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0cb      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	4b49      	ldr	r3, [pc, #292]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0ee      	beq.n	80030ec <HAL_RCC_OscConfig+0x334>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003110:	f7ff fb42 	bl	8002798 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7ff fb3e 	bl	8002798 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e0b5      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312e:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ee      	bne.n	8003118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003140:	4b39      	ldr	r3, [pc, #228]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	4a38      	ldr	r2, [pc, #224]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80a1 	beq.w	8003298 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003156:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b08      	cmp	r3, #8
 8003160:	d05c      	beq.n	800321c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d141      	bne.n	80031ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7ff fb12 	bl	8002798 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003178:	f7ff fb0e 	bl	8002798 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e087      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	4b27      	ldr	r3, [pc, #156]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	019b      	lsls	r3, r3, #6
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	3b01      	subs	r3, #1
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	491b      	ldr	r1, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c0:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7ff fae7 	bl	8002798 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ce:	f7ff fae3 	bl	8002798 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e05c      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x416>
 80031ec:	e054      	b.n	8003298 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7ff fad0 	bl	8002798 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fc:	f7ff facc 	bl	8002798 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e045      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x444>
 800321a:	e03d      	b.n	8003298 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d107      	bne.n	8003234 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e038      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
 8003228:	40023800 	.word	0x40023800
 800322c:	40007000 	.word	0x40007000
 8003230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_RCC_OscConfig+0x4ec>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d028      	beq.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d121      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d11a      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003264:	4013      	ands	r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800326a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800326c:	4293      	cmp	r3, r2
 800326e:	d111      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	3b01      	subs	r3, #1
 800327e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d107      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800

080032a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0cc      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032bc:	4b68      	ldr	r3, [pc, #416]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d90c      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b65      	ldr	r3, [pc, #404]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b63      	ldr	r3, [pc, #396]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0b8      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032fc:	4b59      	ldr	r3, [pc, #356]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a58      	ldr	r2, [pc, #352]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003314:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a52      	ldr	r2, [pc, #328]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800331e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	494d      	ldr	r1, [pc, #308]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d044      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d119      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e07f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d003      	beq.n	8003366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003362:	2b03      	cmp	r3, #3
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e06f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e067      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b37      	ldr	r3, [pc, #220]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4934      	ldr	r1, [pc, #208]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003398:	f7ff f9fe 	bl	8002798 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7ff f9fa 	bl	8002798 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e04f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d20c      	bcs.n	80033f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b22      	ldr	r3, [pc, #136]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e032      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4916      	ldr	r1, [pc, #88]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	490e      	ldr	r1, [pc, #56]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800342e:	f000 f821 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8003432:	4602      	mov	r2, r0
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	490a      	ldr	r1, [pc, #40]	; (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	5ccb      	ldrb	r3, [r1, r3]
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	4a09      	ldr	r2, [pc, #36]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff f95e 	bl	8002710 <HAL_InitTick>

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40023c00 	.word	0x40023c00
 8003464:	40023800 	.word	0x40023800
 8003468:	08007580 	.word	0x08007580
 800346c:	20000004 	.word	0x20000004
 8003470:	20000008 	.word	0x20000008

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003478:	b094      	sub	sp, #80	; 0x50
 800347a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	647b      	str	r3, [r7, #68]	; 0x44
 8003480:	2300      	movs	r3, #0
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003484:	2300      	movs	r3, #0
 8003486:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800348c:	4b79      	ldr	r3, [pc, #484]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b08      	cmp	r3, #8
 8003496:	d00d      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003498:	2b08      	cmp	r3, #8
 800349a:	f200 80e1 	bhi.w	8003660 <HAL_RCC_GetSysClockFreq+0x1ec>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x34>
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d003      	beq.n	80034ae <HAL_RCC_GetSysClockFreq+0x3a>
 80034a6:	e0db      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b73      	ldr	r3, [pc, #460]	; (8003678 <HAL_RCC_GetSysClockFreq+0x204>)
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034ac:	e0db      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <HAL_RCC_GetSysClockFreq+0x208>)
 80034b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034b2:	e0d8      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b4:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034be:	4b6d      	ldr	r3, [pc, #436]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d063      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ca:	4b6a      	ldr	r3, [pc, #424]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	2200      	movs	r2, #0
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034dc:	633b      	str	r3, [r7, #48]	; 0x30
 80034de:	2300      	movs	r3, #0
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
 80034e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034e6:	4622      	mov	r2, r4
 80034e8:	462b      	mov	r3, r5
 80034ea:	f04f 0000 	mov.w	r0, #0
 80034ee:	f04f 0100 	mov.w	r1, #0
 80034f2:	0159      	lsls	r1, r3, #5
 80034f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f8:	0150      	lsls	r0, r2, #5
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4621      	mov	r1, r4
 8003500:	1a51      	subs	r1, r2, r1
 8003502:	6139      	str	r1, [r7, #16]
 8003504:	4629      	mov	r1, r5
 8003506:	eb63 0301 	sbc.w	r3, r3, r1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003518:	4659      	mov	r1, fp
 800351a:	018b      	lsls	r3, r1, #6
 800351c:	4651      	mov	r1, sl
 800351e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003522:	4651      	mov	r1, sl
 8003524:	018a      	lsls	r2, r1, #6
 8003526:	4651      	mov	r1, sl
 8003528:	ebb2 0801 	subs.w	r8, r2, r1
 800352c:	4659      	mov	r1, fp
 800352e:	eb63 0901 	sbc.w	r9, r3, r1
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800353e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003546:	4690      	mov	r8, r2
 8003548:	4699      	mov	r9, r3
 800354a:	4623      	mov	r3, r4
 800354c:	eb18 0303 	adds.w	r3, r8, r3
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	462b      	mov	r3, r5
 8003554:	eb49 0303 	adc.w	r3, r9, r3
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003566:	4629      	mov	r1, r5
 8003568:	024b      	lsls	r3, r1, #9
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003570:	4621      	mov	r1, r4
 8003572:	024a      	lsls	r2, r1, #9
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357a:	2200      	movs	r2, #0
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
 800357e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003580:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003584:	f7fd fb10 	bl	8000ba8 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003590:	e058      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	2200      	movs	r2, #0
 800359a:	4618      	mov	r0, r3
 800359c:	4611      	mov	r1, r2
 800359e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035a2:	623b      	str	r3, [r7, #32]
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
 80035a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035ac:	4642      	mov	r2, r8
 80035ae:	464b      	mov	r3, r9
 80035b0:	f04f 0000 	mov.w	r0, #0
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	0159      	lsls	r1, r3, #5
 80035ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035be:	0150      	lsls	r0, r2, #5
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4641      	mov	r1, r8
 80035c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80035ca:	4649      	mov	r1, r9
 80035cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035e4:	ebb2 040a 	subs.w	r4, r2, sl
 80035e8:	eb63 050b 	sbc.w	r5, r3, fp
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	00eb      	lsls	r3, r5, #3
 80035f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fa:	00e2      	lsls	r2, r4, #3
 80035fc:	4614      	mov	r4, r2
 80035fe:	461d      	mov	r5, r3
 8003600:	4643      	mov	r3, r8
 8003602:	18e3      	adds	r3, r4, r3
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	464b      	mov	r3, r9
 8003608:	eb45 0303 	adc.w	r3, r5, r3
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361a:	4629      	mov	r1, r5
 800361c:	028b      	lsls	r3, r1, #10
 800361e:	4621      	mov	r1, r4
 8003620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003624:	4621      	mov	r1, r4
 8003626:	028a      	lsls	r2, r1, #10
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362e:	2200      	movs	r2, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	61fa      	str	r2, [r7, #28]
 8003634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003638:	f7fd fab6 	bl	8000ba8 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	3301      	adds	r3, #1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003654:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetSysClockFreq+0x204>)
 8003662:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003668:	4618      	mov	r0, r3
 800366a:	3750      	adds	r7, #80	; 0x50
 800366c:	46bd      	mov	sp, r7
 800366e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	00f42400 	.word	0x00f42400
 800367c:	007a1200 	.word	0x007a1200

08003680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_RCC_GetHCLKFreq+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000004 	.word	0x20000004

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff0 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08007590 	.word	0x08007590

080036c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c4:	f7ff ffdc 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0b5b      	lsrs	r3, r3, #13
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	08007590 	.word	0x08007590

080036e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800370c:	2b00      	cmp	r3, #0
 800370e:	d035      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003710:	4b62      	ldr	r3, [pc, #392]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003716:	f7ff f83f 	bl	8002798 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800371e:	f7ff f83b 	bl	8002798 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0b0      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003730:	4b5b      	ldr	r3, [pc, #364]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	019a      	lsls	r2, r3, #6
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	071b      	lsls	r3, r3, #28
 8003748:	4955      	ldr	r1, [pc, #340]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003750:	4b52      	ldr	r3, [pc, #328]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003756:	f7ff f81f 	bl	8002798 <HAL_GetTick>
 800375a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800375e:	f7ff f81b 	bl	8002798 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e090      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003770:	4b4b      	ldr	r3, [pc, #300]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8083 	beq.w	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	4b44      	ldr	r3, [pc, #272]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a43      	ldr	r2, [pc, #268]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
 800379a:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037a6:	4b3f      	ldr	r3, [pc, #252]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a3e      	ldr	r2, [pc, #248]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037b2:	f7fe fff1 	bl	8002798 <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fe ffed 	bl	8002798 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e062      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037cc:	4b35      	ldr	r3, [pc, #212]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037d8:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d02f      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d028      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037f6:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003800:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003806:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800380c:	4a24      	ldr	r2, [pc, #144]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003812:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d114      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800381e:	f7fe ffbb 	bl	8002798 <HAL_GetTick>
 8003822:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003824:	e00a      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fe ffb7 	bl	8002798 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e02a      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383c:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ee      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003854:	d10d      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386a:	490d      	ldr	r1, [pc, #52]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]
 8003870:	e005      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003878:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800387c:	6093      	str	r3, [r2, #8]
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003880:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388a:	4905      	ldr	r1, [pc, #20]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800388c:	4313      	orrs	r3, r2
 800388e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	42470068 	.word	0x42470068
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
 80038a8:	42470e40 	.word	0x42470e40

080038ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e066      	b.n	8003990 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7f5b      	ldrb	r3, [r3, #29]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fe fd5c 	bl	8002390 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	22ca      	movs	r2, #202	; 0xca
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2253      	movs	r2, #83	; 0x53
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fa45 	bl	8003d7e <RTC_EnterInitMode>
 80038f4:	4603      	mov	r3, r0
 80038f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d12c      	bne.n	8003958 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800390c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003910:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6899      	ldr	r1, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68d2      	ldr	r2, [r2, #12]
 8003938:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6919      	ldr	r1, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	041a      	lsls	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fa4c 	bl	8003dec <RTC_ExitInitMode>
 8003954:	4603      	mov	r3, r0
 8003956:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d113      	bne.n	8003986 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800396c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	22ff      	movs	r2, #255	; 0xff
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	7f1b      	ldrb	r3, [r3, #28]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_RTC_SetTime+0x1c>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e087      	b.n	8003ac4 <HAL_RTC_SetTime+0x12c>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2202      	movs	r2, #2
 80039be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d126      	bne.n	8003a14 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2200      	movs	r2, #0
 80039d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fa29 	bl	8003e36 <RTC_ByteToBcd2>
 80039e4:	4603      	mov	r3, r0
 80039e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	785b      	ldrb	r3, [r3, #1]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fa22 	bl	8003e36 <RTC_ByteToBcd2>
 80039f2:	4603      	mov	r3, r0
 80039f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	789b      	ldrb	r3, [r3, #2]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fa1a 	bl	8003e36 <RTC_ByteToBcd2>
 8003a02:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a04:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	78db      	ldrb	r3, [r3, #3]
 8003a0c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e018      	b.n	8003a46 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2200      	movs	r2, #0
 8003a26:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a34:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a3a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	78db      	ldrb	r3, [r3, #3]
 8003a40:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	22ca      	movs	r2, #202	; 0xca
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2253      	movs	r2, #83	; 0x53
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f991 	bl	8003d7e <RTC_EnterInitMode>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d120      	bne.n	8003aa8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003a70:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a74:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a84:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f9a4 	bl	8003dec <RTC_ExitInitMode>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	22ff      	movs	r2, #255	; 0xff
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	771a      	strb	r2, [r3, #28]

  return status;
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}

08003acc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003afe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003b02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	0c1b      	lsrs	r3, r3, #16
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	0d9b      	lsrs	r3, r3, #22
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d11a      	bne.n	8003b7e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 f98f 	bl	8003e70 <RTC_Bcd2ToByte>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461a      	mov	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f986 	bl	8003e70 <RTC_Bcd2ToByte>
 8003b64:	4603      	mov	r3, r0
 8003b66:	461a      	mov	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	789b      	ldrb	r3, [r3, #2]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 f97d 	bl	8003e70 <RTC_Bcd2ToByte>
 8003b76:	4603      	mov	r3, r0
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	7f1b      	ldrb	r3, [r3, #28]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RTC_SetDate+0x1c>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e071      	b.n	8003c88 <HAL_RTC_SetDate+0x100>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2202      	movs	r2, #2
 8003bae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10e      	bne.n	8003bd4 <HAL_RTC_SetDate+0x4c>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	785b      	ldrb	r3, [r3, #1]
 8003bc6:	f023 0310 	bic.w	r3, r3, #16
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	330a      	adds	r3, #10
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d11c      	bne.n	8003c14 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	78db      	ldrb	r3, [r3, #3]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f929 	bl	8003e36 <RTC_ByteToBcd2>
 8003be4:	4603      	mov	r3, r0
 8003be6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	785b      	ldrb	r3, [r3, #1]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 f922 	bl	8003e36 <RTC_ByteToBcd2>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bf6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	789b      	ldrb	r3, [r3, #2]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 f91a 	bl	8003e36 <RTC_ByteToBcd2>
 8003c02:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003c04:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e00e      	b.n	8003c32 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	78db      	ldrb	r3, [r3, #3]
 8003c18:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c20:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c26:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	22ca      	movs	r2, #202	; 0xca
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2253      	movs	r2, #83	; 0x53
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f89b 	bl	8003d7e <RTC_EnterInitMode>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10c      	bne.n	8003c6c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c60:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f8c2 	bl	8003dec <RTC_ExitInitMode>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	22ff      	movs	r2, #255	; 0xff
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	771a      	strb	r2, [r3, #28]

  return status;
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd90      	pop	{r4, r7, pc}

08003c90 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003caa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	0a1b      	lsrs	r3, r3, #8
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	0b5b      	lsrs	r3, r3, #13
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11a      	bne.n	8003d24 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	78db      	ldrb	r3, [r3, #3]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f8bc 	bl	8003e70 <RTC_Bcd2ToByte>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	785b      	ldrb	r3, [r3, #1]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f8b3 	bl	8003e70 <RTC_Bcd2ToByte>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	789b      	ldrb	r3, [r3, #2]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f8aa 	bl	8003e70 <RTC_Bcd2ToByte>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d48:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d4a:	f7fe fd25 	bl	8002798 <HAL_GetTick>
 8003d4e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d50:	e009      	b.n	8003d66 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d52:	f7fe fd21 	bl	8002798 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d60:	d901      	bls.n	8003d66 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e007      	b.n	8003d76 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ee      	beq.n	8003d52 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d122      	bne.n	8003de2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003daa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dac:	f7fe fcf4 	bl	8002798 <HAL_GetTick>
 8003db0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003db2:	e00c      	b.n	8003dce <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003db4:	f7fe fcf0 	bl	8002798 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dc2:	d904      	bls.n	8003dce <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <RTC_EnterInitMode+0x64>
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d1e8      	bne.n	8003db4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e06:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10a      	bne.n	8003e2c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ff89 	bl	8003d2e <HAL_RTC_WaitForSynchro>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2204      	movs	r2, #4
 8003e26:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003e44:	e005      	b.n	8003e52 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	3b0a      	subs	r3, #10
 8003e50:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	2b09      	cmp	r3, #9
 8003e56:	d8f6      	bhi.n	8003e46 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	b2db      	uxtb	r3, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	4413      	add	r3, r2
 8003e9a:	b2db      	uxtb	r3, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e03f      	b.n	8003f3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fe fa88 	bl	80023e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2224      	movs	r2, #36	; 0x24
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f929 	bl	8004144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b08a      	sub	sp, #40	; 0x28
 8003f46:	af02      	add	r7, sp, #8
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d17c      	bne.n	800405c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_UART_Transmit+0x2c>
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e075      	b.n	800405e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_UART_Transmit+0x3e>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e06e      	b.n	800405e <HAL_UART_Transmit+0x11c>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2221      	movs	r2, #33	; 0x21
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f96:	f7fe fbff 	bl	8002798 <HAL_GetTick>
 8003f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	88fa      	ldrh	r2, [r7, #6]
 8003fa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	88fa      	ldrh	r2, [r7, #6]
 8003fa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb0:	d108      	bne.n	8003fc4 <HAL_UART_Transmit+0x82>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	e003      	b.n	8003fcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fd4:	e02a      	b.n	800402c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f840 	bl	8004066 <UART_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e036      	b.n	800405e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	3302      	adds	r3, #2
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	e007      	b.n	800401e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	3301      	adds	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1cf      	bne.n	8003fd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	2140      	movs	r1, #64	; 0x40
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f810 	bl	8004066 <UART_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e006      	b.n	800405e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e000      	b.n	800405e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b090      	sub	sp, #64	; 0x40
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	4613      	mov	r3, r2
 8004074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004076:	e050      	b.n	800411a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407e:	d04c      	beq.n	800411a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <UART_WaitOnFlagUntilTimeout+0x30>
 8004086:	f7fe fb87 	bl	8002798 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004092:	429a      	cmp	r2, r3
 8004094:	d241      	bcs.n	800411a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040b6:	637a      	str	r2, [r7, #52]	; 0x34
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3314      	adds	r3, #20
 80040d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	613b      	str	r3, [r7, #16]
   return(result);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3314      	adds	r3, #20
 80040e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ea:	623a      	str	r2, [r7, #32]
 80040ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	69f9      	ldr	r1, [r7, #28]
 80040f0:	6a3a      	ldr	r2, [r7, #32]
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e5      	bne.n	80040ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e00f      	b.n	800413a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4013      	ands	r3, r2
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	429a      	cmp	r2, r3
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	429a      	cmp	r2, r3
 8004136:	d09f      	beq.n	8004078 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3740      	adds	r7, #64	; 0x40
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004148:	b0c0      	sub	sp, #256	; 0x100
 800414a:	af00      	add	r7, sp, #0
 800414c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	68d9      	ldr	r1, [r3, #12]
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	ea40 0301 	orr.w	r3, r0, r1
 800416c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	431a      	orrs	r2, r3
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	431a      	orrs	r2, r3
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800419c:	f021 010c 	bic.w	r1, r1, #12
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041aa:	430b      	orrs	r3, r1
 80041ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041be:	6999      	ldr	r1, [r3, #24]
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	ea40 0301 	orr.w	r3, r0, r1
 80041ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b8f      	ldr	r3, [pc, #572]	; (8004410 <UART_SetConfig+0x2cc>)
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d005      	beq.n	80041e4 <UART_SetConfig+0xa0>
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b8d      	ldr	r3, [pc, #564]	; (8004414 <UART_SetConfig+0x2d0>)
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d104      	bne.n	80041ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041e4:	f7ff fa6c 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 80041e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041ec:	e003      	b.n	80041f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ee:	f7ff fa53 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 80041f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004200:	f040 810c 	bne.w	800441c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004208:	2200      	movs	r2, #0
 800420a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800420e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004212:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004216:	4622      	mov	r2, r4
 8004218:	462b      	mov	r3, r5
 800421a:	1891      	adds	r1, r2, r2
 800421c:	65b9      	str	r1, [r7, #88]	; 0x58
 800421e:	415b      	adcs	r3, r3
 8004220:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004222:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004226:	4621      	mov	r1, r4
 8004228:	eb12 0801 	adds.w	r8, r2, r1
 800422c:	4629      	mov	r1, r5
 800422e:	eb43 0901 	adc.w	r9, r3, r1
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004246:	4690      	mov	r8, r2
 8004248:	4699      	mov	r9, r3
 800424a:	4623      	mov	r3, r4
 800424c:	eb18 0303 	adds.w	r3, r8, r3
 8004250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004254:	462b      	mov	r3, r5
 8004256:	eb49 0303 	adc.w	r3, r9, r3
 800425a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800426a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800426e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004272:	460b      	mov	r3, r1
 8004274:	18db      	adds	r3, r3, r3
 8004276:	653b      	str	r3, [r7, #80]	; 0x50
 8004278:	4613      	mov	r3, r2
 800427a:	eb42 0303 	adc.w	r3, r2, r3
 800427e:	657b      	str	r3, [r7, #84]	; 0x54
 8004280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004284:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004288:	f7fc fc8e 	bl	8000ba8 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4b61      	ldr	r3, [pc, #388]	; (8004418 <UART_SetConfig+0x2d4>)
 8004292:	fba3 2302 	umull	r2, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	011c      	lsls	r4, r3, #4
 800429a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042ac:	4642      	mov	r2, r8
 80042ae:	464b      	mov	r3, r9
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80042b4:	415b      	adcs	r3, r3
 80042b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042bc:	4641      	mov	r1, r8
 80042be:	eb12 0a01 	adds.w	sl, r2, r1
 80042c2:	4649      	mov	r1, r9
 80042c4:	eb43 0b01 	adc.w	fp, r3, r1
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042dc:	4692      	mov	sl, r2
 80042de:	469b      	mov	fp, r3
 80042e0:	4643      	mov	r3, r8
 80042e2:	eb1a 0303 	adds.w	r3, sl, r3
 80042e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ea:	464b      	mov	r3, r9
 80042ec:	eb4b 0303 	adc.w	r3, fp, r3
 80042f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004300:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004304:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004308:	460b      	mov	r3, r1
 800430a:	18db      	adds	r3, r3, r3
 800430c:	643b      	str	r3, [r7, #64]	; 0x40
 800430e:	4613      	mov	r3, r2
 8004310:	eb42 0303 	adc.w	r3, r2, r3
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
 8004316:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800431a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800431e:	f7fc fc43 	bl	8000ba8 <__aeabi_uldivmod>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4611      	mov	r1, r2
 8004328:	4b3b      	ldr	r3, [pc, #236]	; (8004418 <UART_SetConfig+0x2d4>)
 800432a:	fba3 2301 	umull	r2, r3, r3, r1
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2264      	movs	r2, #100	; 0x64
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	1acb      	subs	r3, r1, r3
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800433e:	4b36      	ldr	r3, [pc, #216]	; (8004418 <UART_SetConfig+0x2d4>)
 8004340:	fba3 2302 	umull	r2, r3, r3, r2
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800434c:	441c      	add	r4, r3
 800434e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004358:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800435c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	1891      	adds	r1, r2, r2
 8004366:	63b9      	str	r1, [r7, #56]	; 0x38
 8004368:	415b      	adcs	r3, r3
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004370:	4641      	mov	r1, r8
 8004372:	1851      	adds	r1, r2, r1
 8004374:	6339      	str	r1, [r7, #48]	; 0x30
 8004376:	4649      	mov	r1, r9
 8004378:	414b      	adcs	r3, r1
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004388:	4659      	mov	r1, fp
 800438a:	00cb      	lsls	r3, r1, #3
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004392:	4651      	mov	r1, sl
 8004394:	00ca      	lsls	r2, r1, #3
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	4603      	mov	r3, r0
 800439c:	4642      	mov	r2, r8
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043a4:	464b      	mov	r3, r9
 80043a6:	460a      	mov	r2, r1
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043c4:	460b      	mov	r3, r1
 80043c6:	18db      	adds	r3, r3, r3
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ca:	4613      	mov	r3, r2
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043da:	f7fc fbe5 	bl	8000ba8 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <UART_SetConfig+0x2d4>)
 80043e4:	fba3 1302 	umull	r1, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2164      	movs	r1, #100	; 0x64
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	3332      	adds	r3, #50	; 0x32
 80043f6:	4a08      	ldr	r2, [pc, #32]	; (8004418 <UART_SetConfig+0x2d4>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 0207 	and.w	r2, r3, #7
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4422      	add	r2, r4
 800440a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800440c:	e105      	b.n	800461a <UART_SetConfig+0x4d6>
 800440e:	bf00      	nop
 8004410:	40011000 	.word	0x40011000
 8004414:	40011400 	.word	0x40011400
 8004418:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800441c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004420:	2200      	movs	r2, #0
 8004422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004426:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800442a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800442e:	4642      	mov	r2, r8
 8004430:	464b      	mov	r3, r9
 8004432:	1891      	adds	r1, r2, r2
 8004434:	6239      	str	r1, [r7, #32]
 8004436:	415b      	adcs	r3, r3
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
 800443a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800443e:	4641      	mov	r1, r8
 8004440:	1854      	adds	r4, r2, r1
 8004442:	4649      	mov	r1, r9
 8004444:	eb43 0501 	adc.w	r5, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	00eb      	lsls	r3, r5, #3
 8004452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004456:	00e2      	lsls	r2, r4, #3
 8004458:	4614      	mov	r4, r2
 800445a:	461d      	mov	r5, r3
 800445c:	4643      	mov	r3, r8
 800445e:	18e3      	adds	r3, r4, r3
 8004460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004464:	464b      	mov	r3, r9
 8004466:	eb45 0303 	adc.w	r3, r5, r3
 800446a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800447a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800448a:	4629      	mov	r1, r5
 800448c:	008b      	lsls	r3, r1, #2
 800448e:	4621      	mov	r1, r4
 8004490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004494:	4621      	mov	r1, r4
 8004496:	008a      	lsls	r2, r1, #2
 8004498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800449c:	f7fc fb84 	bl	8000ba8 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4b60      	ldr	r3, [pc, #384]	; (8004628 <UART_SetConfig+0x4e4>)
 80044a6:	fba3 2302 	umull	r2, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	011c      	lsls	r4, r3, #4
 80044ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	61b9      	str	r1, [r7, #24]
 80044c8:	415b      	adcs	r3, r3
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6139      	str	r1, [r7, #16]
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004504:	464b      	mov	r3, r9
 8004506:	460a      	mov	r2, r1
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	67bb      	str	r3, [r7, #120]	; 0x78
 800451a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004528:	4649      	mov	r1, r9
 800452a:	008b      	lsls	r3, r1, #2
 800452c:	4641      	mov	r1, r8
 800452e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004532:	4641      	mov	r1, r8
 8004534:	008a      	lsls	r2, r1, #2
 8004536:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800453a:	f7fc fb35 	bl	8000ba8 <__aeabi_uldivmod>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4b39      	ldr	r3, [pc, #228]	; (8004628 <UART_SetConfig+0x4e4>)
 8004544:	fba3 1302 	umull	r1, r3, r3, r2
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	2164      	movs	r1, #100	; 0x64
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	3332      	adds	r3, #50	; 0x32
 8004556:	4a34      	ldr	r2, [pc, #208]	; (8004628 <UART_SetConfig+0x4e4>)
 8004558:	fba2 2303 	umull	r2, r3, r2, r3
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004562:	441c      	add	r4, r3
 8004564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004568:	2200      	movs	r2, #0
 800456a:	673b      	str	r3, [r7, #112]	; 0x70
 800456c:	677a      	str	r2, [r7, #116]	; 0x74
 800456e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004572:	4642      	mov	r2, r8
 8004574:	464b      	mov	r3, r9
 8004576:	1891      	adds	r1, r2, r2
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	415b      	adcs	r3, r3
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004582:	4641      	mov	r1, r8
 8004584:	1851      	adds	r1, r2, r1
 8004586:	6039      	str	r1, [r7, #0]
 8004588:	4649      	mov	r1, r9
 800458a:	414b      	adcs	r3, r1
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800459a:	4659      	mov	r1, fp
 800459c:	00cb      	lsls	r3, r1, #3
 800459e:	4651      	mov	r1, sl
 80045a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a4:	4651      	mov	r1, sl
 80045a6:	00ca      	lsls	r2, r1, #3
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	4603      	mov	r3, r0
 80045ae:	4642      	mov	r2, r8
 80045b0:	189b      	adds	r3, r3, r2
 80045b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b4:	464b      	mov	r3, r9
 80045b6:	460a      	mov	r2, r1
 80045b8:	eb42 0303 	adc.w	r3, r2, r3
 80045bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	663b      	str	r3, [r7, #96]	; 0x60
 80045c8:	667a      	str	r2, [r7, #100]	; 0x64
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045d6:	4649      	mov	r1, r9
 80045d8:	008b      	lsls	r3, r1, #2
 80045da:	4641      	mov	r1, r8
 80045dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e0:	4641      	mov	r1, r8
 80045e2:	008a      	lsls	r2, r1, #2
 80045e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045e8:	f7fc fade 	bl	8000ba8 <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <UART_SetConfig+0x4e4>)
 80045f2:	fba3 1302 	umull	r1, r3, r3, r2
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	2164      	movs	r1, #100	; 0x64
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	3332      	adds	r3, #50	; 0x32
 8004604:	4a08      	ldr	r2, [pc, #32]	; (8004628 <UART_SetConfig+0x4e4>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	f003 020f 	and.w	r2, r3, #15
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4422      	add	r2, r4
 8004618:	609a      	str	r2, [r3, #8]
}
 800461a:	bf00      	nop
 800461c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004620:	46bd      	mov	sp, r7
 8004622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004626:	bf00      	nop
 8004628:	51eb851f 	.word	0x51eb851f

0800462c <__errno>:
 800462c:	4b01      	ldr	r3, [pc, #4]	; (8004634 <__errno+0x8>)
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000010 	.word	0x20000010

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	4d0d      	ldr	r5, [pc, #52]	; (8004670 <__libc_init_array+0x38>)
 800463c:	4c0d      	ldr	r4, [pc, #52]	; (8004674 <__libc_init_array+0x3c>)
 800463e:	1b64      	subs	r4, r4, r5
 8004640:	10a4      	asrs	r4, r4, #2
 8004642:	2600      	movs	r6, #0
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	4d0b      	ldr	r5, [pc, #44]	; (8004678 <__libc_init_array+0x40>)
 800464a:	4c0c      	ldr	r4, [pc, #48]	; (800467c <__libc_init_array+0x44>)
 800464c:	f002 ff24 	bl	8007498 <_init>
 8004650:	1b64      	subs	r4, r4, r5
 8004652:	10a4      	asrs	r4, r4, #2
 8004654:	2600      	movs	r6, #0
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	f855 3b04 	ldr.w	r3, [r5], #4
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	0800797c 	.word	0x0800797c
 8004674:	0800797c 	.word	0x0800797c
 8004678:	0800797c 	.word	0x0800797c
 800467c:	08007980 	.word	0x08007980

08004680 <memset>:
 8004680:	4402      	add	r2, r0
 8004682:	4603      	mov	r3, r0
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <memset+0xa>
 8004688:	4770      	bx	lr
 800468a:	f803 1b01 	strb.w	r1, [r3], #1
 800468e:	e7f9      	b.n	8004684 <memset+0x4>

08004690 <__cvt>:
 8004690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004694:	ec55 4b10 	vmov	r4, r5, d0
 8004698:	2d00      	cmp	r5, #0
 800469a:	460e      	mov	r6, r1
 800469c:	4619      	mov	r1, r3
 800469e:	462b      	mov	r3, r5
 80046a0:	bfbb      	ittet	lt
 80046a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046a6:	461d      	movlt	r5, r3
 80046a8:	2300      	movge	r3, #0
 80046aa:	232d      	movlt	r3, #45	; 0x2d
 80046ac:	700b      	strb	r3, [r1, #0]
 80046ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80046b4:	4691      	mov	r9, r2
 80046b6:	f023 0820 	bic.w	r8, r3, #32
 80046ba:	bfbc      	itt	lt
 80046bc:	4622      	movlt	r2, r4
 80046be:	4614      	movlt	r4, r2
 80046c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046c4:	d005      	beq.n	80046d2 <__cvt+0x42>
 80046c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046ca:	d100      	bne.n	80046ce <__cvt+0x3e>
 80046cc:	3601      	adds	r6, #1
 80046ce:	2102      	movs	r1, #2
 80046d0:	e000      	b.n	80046d4 <__cvt+0x44>
 80046d2:	2103      	movs	r1, #3
 80046d4:	ab03      	add	r3, sp, #12
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	ab02      	add	r3, sp, #8
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	ec45 4b10 	vmov	d0, r4, r5
 80046e0:	4653      	mov	r3, sl
 80046e2:	4632      	mov	r2, r6
 80046e4:	f000 fd0c 	bl	8005100 <_dtoa_r>
 80046e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046ec:	4607      	mov	r7, r0
 80046ee:	d102      	bne.n	80046f6 <__cvt+0x66>
 80046f0:	f019 0f01 	tst.w	r9, #1
 80046f4:	d022      	beq.n	800473c <__cvt+0xac>
 80046f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046fa:	eb07 0906 	add.w	r9, r7, r6
 80046fe:	d110      	bne.n	8004722 <__cvt+0x92>
 8004700:	783b      	ldrb	r3, [r7, #0]
 8004702:	2b30      	cmp	r3, #48	; 0x30
 8004704:	d10a      	bne.n	800471c <__cvt+0x8c>
 8004706:	2200      	movs	r2, #0
 8004708:	2300      	movs	r3, #0
 800470a:	4620      	mov	r0, r4
 800470c:	4629      	mov	r1, r5
 800470e:	f7fc f9db 	bl	8000ac8 <__aeabi_dcmpeq>
 8004712:	b918      	cbnz	r0, 800471c <__cvt+0x8c>
 8004714:	f1c6 0601 	rsb	r6, r6, #1
 8004718:	f8ca 6000 	str.w	r6, [sl]
 800471c:	f8da 3000 	ldr.w	r3, [sl]
 8004720:	4499      	add	r9, r3
 8004722:	2200      	movs	r2, #0
 8004724:	2300      	movs	r3, #0
 8004726:	4620      	mov	r0, r4
 8004728:	4629      	mov	r1, r5
 800472a:	f7fc f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800472e:	b108      	cbz	r0, 8004734 <__cvt+0xa4>
 8004730:	f8cd 900c 	str.w	r9, [sp, #12]
 8004734:	2230      	movs	r2, #48	; 0x30
 8004736:	9b03      	ldr	r3, [sp, #12]
 8004738:	454b      	cmp	r3, r9
 800473a:	d307      	bcc.n	800474c <__cvt+0xbc>
 800473c:	9b03      	ldr	r3, [sp, #12]
 800473e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004740:	1bdb      	subs	r3, r3, r7
 8004742:	4638      	mov	r0, r7
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	b004      	add	sp, #16
 8004748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800474c:	1c59      	adds	r1, r3, #1
 800474e:	9103      	str	r1, [sp, #12]
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	e7f0      	b.n	8004736 <__cvt+0xa6>

08004754 <__exponent>:
 8004754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004756:	4603      	mov	r3, r0
 8004758:	2900      	cmp	r1, #0
 800475a:	bfb8      	it	lt
 800475c:	4249      	neglt	r1, r1
 800475e:	f803 2b02 	strb.w	r2, [r3], #2
 8004762:	bfb4      	ite	lt
 8004764:	222d      	movlt	r2, #45	; 0x2d
 8004766:	222b      	movge	r2, #43	; 0x2b
 8004768:	2909      	cmp	r1, #9
 800476a:	7042      	strb	r2, [r0, #1]
 800476c:	dd2a      	ble.n	80047c4 <__exponent+0x70>
 800476e:	f10d 0407 	add.w	r4, sp, #7
 8004772:	46a4      	mov	ip, r4
 8004774:	270a      	movs	r7, #10
 8004776:	46a6      	mov	lr, r4
 8004778:	460a      	mov	r2, r1
 800477a:	fb91 f6f7 	sdiv	r6, r1, r7
 800477e:	fb07 1516 	mls	r5, r7, r6, r1
 8004782:	3530      	adds	r5, #48	; 0x30
 8004784:	2a63      	cmp	r2, #99	; 0x63
 8004786:	f104 34ff 	add.w	r4, r4, #4294967295
 800478a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800478e:	4631      	mov	r1, r6
 8004790:	dcf1      	bgt.n	8004776 <__exponent+0x22>
 8004792:	3130      	adds	r1, #48	; 0x30
 8004794:	f1ae 0502 	sub.w	r5, lr, #2
 8004798:	f804 1c01 	strb.w	r1, [r4, #-1]
 800479c:	1c44      	adds	r4, r0, #1
 800479e:	4629      	mov	r1, r5
 80047a0:	4561      	cmp	r1, ip
 80047a2:	d30a      	bcc.n	80047ba <__exponent+0x66>
 80047a4:	f10d 0209 	add.w	r2, sp, #9
 80047a8:	eba2 020e 	sub.w	r2, r2, lr
 80047ac:	4565      	cmp	r5, ip
 80047ae:	bf88      	it	hi
 80047b0:	2200      	movhi	r2, #0
 80047b2:	4413      	add	r3, r2
 80047b4:	1a18      	subs	r0, r3, r0
 80047b6:	b003      	add	sp, #12
 80047b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80047c2:	e7ed      	b.n	80047a0 <__exponent+0x4c>
 80047c4:	2330      	movs	r3, #48	; 0x30
 80047c6:	3130      	adds	r1, #48	; 0x30
 80047c8:	7083      	strb	r3, [r0, #2]
 80047ca:	70c1      	strb	r1, [r0, #3]
 80047cc:	1d03      	adds	r3, r0, #4
 80047ce:	e7f1      	b.n	80047b4 <__exponent+0x60>

080047d0 <_printf_float>:
 80047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d4:	ed2d 8b02 	vpush	{d8}
 80047d8:	b08d      	sub	sp, #52	; 0x34
 80047da:	460c      	mov	r4, r1
 80047dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80047e0:	4616      	mov	r6, r2
 80047e2:	461f      	mov	r7, r3
 80047e4:	4605      	mov	r5, r0
 80047e6:	f001 fa79 	bl	8005cdc <_localeconv_r>
 80047ea:	f8d0 a000 	ldr.w	sl, [r0]
 80047ee:	4650      	mov	r0, sl
 80047f0:	f7fb fcee 	bl	80001d0 <strlen>
 80047f4:	2300      	movs	r3, #0
 80047f6:	930a      	str	r3, [sp, #40]	; 0x28
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	9305      	str	r3, [sp, #20]
 80047fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004800:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004804:	3307      	adds	r3, #7
 8004806:	f023 0307 	bic.w	r3, r3, #7
 800480a:	f103 0208 	add.w	r2, r3, #8
 800480e:	f8c8 2000 	str.w	r2, [r8]
 8004812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004816:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800481a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800481e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004822:	9307      	str	r3, [sp, #28]
 8004824:	f8cd 8018 	str.w	r8, [sp, #24]
 8004828:	ee08 0a10 	vmov	s16, r0
 800482c:	4b9f      	ldr	r3, [pc, #636]	; (8004aac <_printf_float+0x2dc>)
 800482e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004832:	f04f 32ff 	mov.w	r2, #4294967295
 8004836:	f7fc f979 	bl	8000b2c <__aeabi_dcmpun>
 800483a:	bb88      	cbnz	r0, 80048a0 <_printf_float+0xd0>
 800483c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004840:	4b9a      	ldr	r3, [pc, #616]	; (8004aac <_printf_float+0x2dc>)
 8004842:	f04f 32ff 	mov.w	r2, #4294967295
 8004846:	f7fc f953 	bl	8000af0 <__aeabi_dcmple>
 800484a:	bb48      	cbnz	r0, 80048a0 <_printf_float+0xd0>
 800484c:	2200      	movs	r2, #0
 800484e:	2300      	movs	r3, #0
 8004850:	4640      	mov	r0, r8
 8004852:	4649      	mov	r1, r9
 8004854:	f7fc f942 	bl	8000adc <__aeabi_dcmplt>
 8004858:	b110      	cbz	r0, 8004860 <_printf_float+0x90>
 800485a:	232d      	movs	r3, #45	; 0x2d
 800485c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004860:	4b93      	ldr	r3, [pc, #588]	; (8004ab0 <_printf_float+0x2e0>)
 8004862:	4894      	ldr	r0, [pc, #592]	; (8004ab4 <_printf_float+0x2e4>)
 8004864:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004868:	bf94      	ite	ls
 800486a:	4698      	movls	r8, r3
 800486c:	4680      	movhi	r8, r0
 800486e:	2303      	movs	r3, #3
 8004870:	6123      	str	r3, [r4, #16]
 8004872:	9b05      	ldr	r3, [sp, #20]
 8004874:	f023 0204 	bic.w	r2, r3, #4
 8004878:	6022      	str	r2, [r4, #0]
 800487a:	f04f 0900 	mov.w	r9, #0
 800487e:	9700      	str	r7, [sp, #0]
 8004880:	4633      	mov	r3, r6
 8004882:	aa0b      	add	r2, sp, #44	; 0x2c
 8004884:	4621      	mov	r1, r4
 8004886:	4628      	mov	r0, r5
 8004888:	f000 f9d8 	bl	8004c3c <_printf_common>
 800488c:	3001      	adds	r0, #1
 800488e:	f040 8090 	bne.w	80049b2 <_printf_float+0x1e2>
 8004892:	f04f 30ff 	mov.w	r0, #4294967295
 8004896:	b00d      	add	sp, #52	; 0x34
 8004898:	ecbd 8b02 	vpop	{d8}
 800489c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a0:	4642      	mov	r2, r8
 80048a2:	464b      	mov	r3, r9
 80048a4:	4640      	mov	r0, r8
 80048a6:	4649      	mov	r1, r9
 80048a8:	f7fc f940 	bl	8000b2c <__aeabi_dcmpun>
 80048ac:	b140      	cbz	r0, 80048c0 <_printf_float+0xf0>
 80048ae:	464b      	mov	r3, r9
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bfbc      	itt	lt
 80048b4:	232d      	movlt	r3, #45	; 0x2d
 80048b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048ba:	487f      	ldr	r0, [pc, #508]	; (8004ab8 <_printf_float+0x2e8>)
 80048bc:	4b7f      	ldr	r3, [pc, #508]	; (8004abc <_printf_float+0x2ec>)
 80048be:	e7d1      	b.n	8004864 <_printf_float+0x94>
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80048c6:	9206      	str	r2, [sp, #24]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	d13f      	bne.n	800494c <_printf_float+0x17c>
 80048cc:	2306      	movs	r3, #6
 80048ce:	6063      	str	r3, [r4, #4]
 80048d0:	9b05      	ldr	r3, [sp, #20]
 80048d2:	6861      	ldr	r1, [r4, #4]
 80048d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048d8:	2300      	movs	r3, #0
 80048da:	9303      	str	r3, [sp, #12]
 80048dc:	ab0a      	add	r3, sp, #40	; 0x28
 80048de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80048e2:	ab09      	add	r3, sp, #36	; 0x24
 80048e4:	ec49 8b10 	vmov	d0, r8, r9
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	6022      	str	r2, [r4, #0]
 80048ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048f0:	4628      	mov	r0, r5
 80048f2:	f7ff fecd 	bl	8004690 <__cvt>
 80048f6:	9b06      	ldr	r3, [sp, #24]
 80048f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048fa:	2b47      	cmp	r3, #71	; 0x47
 80048fc:	4680      	mov	r8, r0
 80048fe:	d108      	bne.n	8004912 <_printf_float+0x142>
 8004900:	1cc8      	adds	r0, r1, #3
 8004902:	db02      	blt.n	800490a <_printf_float+0x13a>
 8004904:	6863      	ldr	r3, [r4, #4]
 8004906:	4299      	cmp	r1, r3
 8004908:	dd41      	ble.n	800498e <_printf_float+0x1be>
 800490a:	f1ab 0b02 	sub.w	fp, fp, #2
 800490e:	fa5f fb8b 	uxtb.w	fp, fp
 8004912:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004916:	d820      	bhi.n	800495a <_printf_float+0x18a>
 8004918:	3901      	subs	r1, #1
 800491a:	465a      	mov	r2, fp
 800491c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004920:	9109      	str	r1, [sp, #36]	; 0x24
 8004922:	f7ff ff17 	bl	8004754 <__exponent>
 8004926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004928:	1813      	adds	r3, r2, r0
 800492a:	2a01      	cmp	r2, #1
 800492c:	4681      	mov	r9, r0
 800492e:	6123      	str	r3, [r4, #16]
 8004930:	dc02      	bgt.n	8004938 <_printf_float+0x168>
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	07d2      	lsls	r2, r2, #31
 8004936:	d501      	bpl.n	800493c <_printf_float+0x16c>
 8004938:	3301      	adds	r3, #1
 800493a:	6123      	str	r3, [r4, #16]
 800493c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004940:	2b00      	cmp	r3, #0
 8004942:	d09c      	beq.n	800487e <_printf_float+0xae>
 8004944:	232d      	movs	r3, #45	; 0x2d
 8004946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800494a:	e798      	b.n	800487e <_printf_float+0xae>
 800494c:	9a06      	ldr	r2, [sp, #24]
 800494e:	2a47      	cmp	r2, #71	; 0x47
 8004950:	d1be      	bne.n	80048d0 <_printf_float+0x100>
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1bc      	bne.n	80048d0 <_printf_float+0x100>
 8004956:	2301      	movs	r3, #1
 8004958:	e7b9      	b.n	80048ce <_printf_float+0xfe>
 800495a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800495e:	d118      	bne.n	8004992 <_printf_float+0x1c2>
 8004960:	2900      	cmp	r1, #0
 8004962:	6863      	ldr	r3, [r4, #4]
 8004964:	dd0b      	ble.n	800497e <_printf_float+0x1ae>
 8004966:	6121      	str	r1, [r4, #16]
 8004968:	b913      	cbnz	r3, 8004970 <_printf_float+0x1a0>
 800496a:	6822      	ldr	r2, [r4, #0]
 800496c:	07d0      	lsls	r0, r2, #31
 800496e:	d502      	bpl.n	8004976 <_printf_float+0x1a6>
 8004970:	3301      	adds	r3, #1
 8004972:	440b      	add	r3, r1
 8004974:	6123      	str	r3, [r4, #16]
 8004976:	65a1      	str	r1, [r4, #88]	; 0x58
 8004978:	f04f 0900 	mov.w	r9, #0
 800497c:	e7de      	b.n	800493c <_printf_float+0x16c>
 800497e:	b913      	cbnz	r3, 8004986 <_printf_float+0x1b6>
 8004980:	6822      	ldr	r2, [r4, #0]
 8004982:	07d2      	lsls	r2, r2, #31
 8004984:	d501      	bpl.n	800498a <_printf_float+0x1ba>
 8004986:	3302      	adds	r3, #2
 8004988:	e7f4      	b.n	8004974 <_printf_float+0x1a4>
 800498a:	2301      	movs	r3, #1
 800498c:	e7f2      	b.n	8004974 <_printf_float+0x1a4>
 800498e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004994:	4299      	cmp	r1, r3
 8004996:	db05      	blt.n	80049a4 <_printf_float+0x1d4>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	6121      	str	r1, [r4, #16]
 800499c:	07d8      	lsls	r0, r3, #31
 800499e:	d5ea      	bpl.n	8004976 <_printf_float+0x1a6>
 80049a0:	1c4b      	adds	r3, r1, #1
 80049a2:	e7e7      	b.n	8004974 <_printf_float+0x1a4>
 80049a4:	2900      	cmp	r1, #0
 80049a6:	bfd4      	ite	le
 80049a8:	f1c1 0202 	rsble	r2, r1, #2
 80049ac:	2201      	movgt	r2, #1
 80049ae:	4413      	add	r3, r2
 80049b0:	e7e0      	b.n	8004974 <_printf_float+0x1a4>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	055a      	lsls	r2, r3, #21
 80049b6:	d407      	bmi.n	80049c8 <_printf_float+0x1f8>
 80049b8:	6923      	ldr	r3, [r4, #16]
 80049ba:	4642      	mov	r2, r8
 80049bc:	4631      	mov	r1, r6
 80049be:	4628      	mov	r0, r5
 80049c0:	47b8      	blx	r7
 80049c2:	3001      	adds	r0, #1
 80049c4:	d12c      	bne.n	8004a20 <_printf_float+0x250>
 80049c6:	e764      	b.n	8004892 <_printf_float+0xc2>
 80049c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049cc:	f240 80e0 	bls.w	8004b90 <_printf_float+0x3c0>
 80049d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049d4:	2200      	movs	r2, #0
 80049d6:	2300      	movs	r3, #0
 80049d8:	f7fc f876 	bl	8000ac8 <__aeabi_dcmpeq>
 80049dc:	2800      	cmp	r0, #0
 80049de:	d034      	beq.n	8004a4a <_printf_float+0x27a>
 80049e0:	4a37      	ldr	r2, [pc, #220]	; (8004ac0 <_printf_float+0x2f0>)
 80049e2:	2301      	movs	r3, #1
 80049e4:	4631      	mov	r1, r6
 80049e6:	4628      	mov	r0, r5
 80049e8:	47b8      	blx	r7
 80049ea:	3001      	adds	r0, #1
 80049ec:	f43f af51 	beq.w	8004892 <_printf_float+0xc2>
 80049f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049f4:	429a      	cmp	r2, r3
 80049f6:	db02      	blt.n	80049fe <_printf_float+0x22e>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	07d8      	lsls	r0, r3, #31
 80049fc:	d510      	bpl.n	8004a20 <_printf_float+0x250>
 80049fe:	ee18 3a10 	vmov	r3, s16
 8004a02:	4652      	mov	r2, sl
 8004a04:	4631      	mov	r1, r6
 8004a06:	4628      	mov	r0, r5
 8004a08:	47b8      	blx	r7
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	f43f af41 	beq.w	8004892 <_printf_float+0xc2>
 8004a10:	f04f 0800 	mov.w	r8, #0
 8004a14:	f104 091a 	add.w	r9, r4, #26
 8004a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	4543      	cmp	r3, r8
 8004a1e:	dc09      	bgt.n	8004a34 <_printf_float+0x264>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	079b      	lsls	r3, r3, #30
 8004a24:	f100 8105 	bmi.w	8004c32 <_printf_float+0x462>
 8004a28:	68e0      	ldr	r0, [r4, #12]
 8004a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a2c:	4298      	cmp	r0, r3
 8004a2e:	bfb8      	it	lt
 8004a30:	4618      	movlt	r0, r3
 8004a32:	e730      	b.n	8004896 <_printf_float+0xc6>
 8004a34:	2301      	movs	r3, #1
 8004a36:	464a      	mov	r2, r9
 8004a38:	4631      	mov	r1, r6
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b8      	blx	r7
 8004a3e:	3001      	adds	r0, #1
 8004a40:	f43f af27 	beq.w	8004892 <_printf_float+0xc2>
 8004a44:	f108 0801 	add.w	r8, r8, #1
 8004a48:	e7e6      	b.n	8004a18 <_printf_float+0x248>
 8004a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	dc39      	bgt.n	8004ac4 <_printf_float+0x2f4>
 8004a50:	4a1b      	ldr	r2, [pc, #108]	; (8004ac0 <_printf_float+0x2f0>)
 8004a52:	2301      	movs	r3, #1
 8004a54:	4631      	mov	r1, r6
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	f43f af19 	beq.w	8004892 <_printf_float+0xc2>
 8004a60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a64:	4313      	orrs	r3, r2
 8004a66:	d102      	bne.n	8004a6e <_printf_float+0x29e>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	07d9      	lsls	r1, r3, #31
 8004a6c:	d5d8      	bpl.n	8004a20 <_printf_float+0x250>
 8004a6e:	ee18 3a10 	vmov	r3, s16
 8004a72:	4652      	mov	r2, sl
 8004a74:	4631      	mov	r1, r6
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b8      	blx	r7
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	f43f af09 	beq.w	8004892 <_printf_float+0xc2>
 8004a80:	f04f 0900 	mov.w	r9, #0
 8004a84:	f104 0a1a 	add.w	sl, r4, #26
 8004a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a8a:	425b      	negs	r3, r3
 8004a8c:	454b      	cmp	r3, r9
 8004a8e:	dc01      	bgt.n	8004a94 <_printf_float+0x2c4>
 8004a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a92:	e792      	b.n	80049ba <_printf_float+0x1ea>
 8004a94:	2301      	movs	r3, #1
 8004a96:	4652      	mov	r2, sl
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	47b8      	blx	r7
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	f43f aef7 	beq.w	8004892 <_printf_float+0xc2>
 8004aa4:	f109 0901 	add.w	r9, r9, #1
 8004aa8:	e7ee      	b.n	8004a88 <_printf_float+0x2b8>
 8004aaa:	bf00      	nop
 8004aac:	7fefffff 	.word	0x7fefffff
 8004ab0:	0800759c 	.word	0x0800759c
 8004ab4:	080075a0 	.word	0x080075a0
 8004ab8:	080075a8 	.word	0x080075a8
 8004abc:	080075a4 	.word	0x080075a4
 8004ac0:	080075ac 	.word	0x080075ac
 8004ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ac6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	bfa8      	it	ge
 8004acc:	461a      	movge	r2, r3
 8004ace:	2a00      	cmp	r2, #0
 8004ad0:	4691      	mov	r9, r2
 8004ad2:	dc37      	bgt.n	8004b44 <_printf_float+0x374>
 8004ad4:	f04f 0b00 	mov.w	fp, #0
 8004ad8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004adc:	f104 021a 	add.w	r2, r4, #26
 8004ae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ae2:	9305      	str	r3, [sp, #20]
 8004ae4:	eba3 0309 	sub.w	r3, r3, r9
 8004ae8:	455b      	cmp	r3, fp
 8004aea:	dc33      	bgt.n	8004b54 <_printf_float+0x384>
 8004aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004af0:	429a      	cmp	r2, r3
 8004af2:	db3b      	blt.n	8004b6c <_printf_float+0x39c>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	07da      	lsls	r2, r3, #31
 8004af8:	d438      	bmi.n	8004b6c <_printf_float+0x39c>
 8004afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004afc:	9a05      	ldr	r2, [sp, #20]
 8004afe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b00:	1a9a      	subs	r2, r3, r2
 8004b02:	eba3 0901 	sub.w	r9, r3, r1
 8004b06:	4591      	cmp	r9, r2
 8004b08:	bfa8      	it	ge
 8004b0a:	4691      	movge	r9, r2
 8004b0c:	f1b9 0f00 	cmp.w	r9, #0
 8004b10:	dc35      	bgt.n	8004b7e <_printf_float+0x3ae>
 8004b12:	f04f 0800 	mov.w	r8, #0
 8004b16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b1a:	f104 0a1a 	add.w	sl, r4, #26
 8004b1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	eba3 0309 	sub.w	r3, r3, r9
 8004b28:	4543      	cmp	r3, r8
 8004b2a:	f77f af79 	ble.w	8004a20 <_printf_float+0x250>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	4652      	mov	r2, sl
 8004b32:	4631      	mov	r1, r6
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b8      	blx	r7
 8004b38:	3001      	adds	r0, #1
 8004b3a:	f43f aeaa 	beq.w	8004892 <_printf_float+0xc2>
 8004b3e:	f108 0801 	add.w	r8, r8, #1
 8004b42:	e7ec      	b.n	8004b1e <_printf_float+0x34e>
 8004b44:	4613      	mov	r3, r2
 8004b46:	4631      	mov	r1, r6
 8004b48:	4642      	mov	r2, r8
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	47b8      	blx	r7
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d1c0      	bne.n	8004ad4 <_printf_float+0x304>
 8004b52:	e69e      	b.n	8004892 <_printf_float+0xc2>
 8004b54:	2301      	movs	r3, #1
 8004b56:	4631      	mov	r1, r6
 8004b58:	4628      	mov	r0, r5
 8004b5a:	9205      	str	r2, [sp, #20]
 8004b5c:	47b8      	blx	r7
 8004b5e:	3001      	adds	r0, #1
 8004b60:	f43f ae97 	beq.w	8004892 <_printf_float+0xc2>
 8004b64:	9a05      	ldr	r2, [sp, #20]
 8004b66:	f10b 0b01 	add.w	fp, fp, #1
 8004b6a:	e7b9      	b.n	8004ae0 <_printf_float+0x310>
 8004b6c:	ee18 3a10 	vmov	r3, s16
 8004b70:	4652      	mov	r2, sl
 8004b72:	4631      	mov	r1, r6
 8004b74:	4628      	mov	r0, r5
 8004b76:	47b8      	blx	r7
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d1be      	bne.n	8004afa <_printf_float+0x32a>
 8004b7c:	e689      	b.n	8004892 <_printf_float+0xc2>
 8004b7e:	9a05      	ldr	r2, [sp, #20]
 8004b80:	464b      	mov	r3, r9
 8004b82:	4442      	add	r2, r8
 8004b84:	4631      	mov	r1, r6
 8004b86:	4628      	mov	r0, r5
 8004b88:	47b8      	blx	r7
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d1c1      	bne.n	8004b12 <_printf_float+0x342>
 8004b8e:	e680      	b.n	8004892 <_printf_float+0xc2>
 8004b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b92:	2a01      	cmp	r2, #1
 8004b94:	dc01      	bgt.n	8004b9a <_printf_float+0x3ca>
 8004b96:	07db      	lsls	r3, r3, #31
 8004b98:	d538      	bpl.n	8004c0c <_printf_float+0x43c>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	4631      	mov	r1, r6
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	47b8      	blx	r7
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	f43f ae74 	beq.w	8004892 <_printf_float+0xc2>
 8004baa:	ee18 3a10 	vmov	r3, s16
 8004bae:	4652      	mov	r2, sl
 8004bb0:	4631      	mov	r1, r6
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	47b8      	blx	r7
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	f43f ae6b 	beq.w	8004892 <_printf_float+0xc2>
 8004bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f7fb ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bc8:	b9d8      	cbnz	r0, 8004c02 <_printf_float+0x432>
 8004bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bcc:	f108 0201 	add.w	r2, r8, #1
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b8      	blx	r7
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d10e      	bne.n	8004bfa <_printf_float+0x42a>
 8004bdc:	e659      	b.n	8004892 <_printf_float+0xc2>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4652      	mov	r2, sl
 8004be2:	4631      	mov	r1, r6
 8004be4:	4628      	mov	r0, r5
 8004be6:	47b8      	blx	r7
 8004be8:	3001      	adds	r0, #1
 8004bea:	f43f ae52 	beq.w	8004892 <_printf_float+0xc2>
 8004bee:	f108 0801 	add.w	r8, r8, #1
 8004bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	4543      	cmp	r3, r8
 8004bf8:	dcf1      	bgt.n	8004bde <_printf_float+0x40e>
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c00:	e6dc      	b.n	80049bc <_printf_float+0x1ec>
 8004c02:	f04f 0800 	mov.w	r8, #0
 8004c06:	f104 0a1a 	add.w	sl, r4, #26
 8004c0a:	e7f2      	b.n	8004bf2 <_printf_float+0x422>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4642      	mov	r2, r8
 8004c10:	e7df      	b.n	8004bd2 <_printf_float+0x402>
 8004c12:	2301      	movs	r3, #1
 8004c14:	464a      	mov	r2, r9
 8004c16:	4631      	mov	r1, r6
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	f43f ae38 	beq.w	8004892 <_printf_float+0xc2>
 8004c22:	f108 0801 	add.w	r8, r8, #1
 8004c26:	68e3      	ldr	r3, [r4, #12]
 8004c28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c2a:	1a5b      	subs	r3, r3, r1
 8004c2c:	4543      	cmp	r3, r8
 8004c2e:	dcf0      	bgt.n	8004c12 <_printf_float+0x442>
 8004c30:	e6fa      	b.n	8004a28 <_printf_float+0x258>
 8004c32:	f04f 0800 	mov.w	r8, #0
 8004c36:	f104 0919 	add.w	r9, r4, #25
 8004c3a:	e7f4      	b.n	8004c26 <_printf_float+0x456>

08004c3c <_printf_common>:
 8004c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c40:	4616      	mov	r6, r2
 8004c42:	4699      	mov	r9, r3
 8004c44:	688a      	ldr	r2, [r1, #8]
 8004c46:	690b      	ldr	r3, [r1, #16]
 8004c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	bfb8      	it	lt
 8004c50:	4613      	movlt	r3, r2
 8004c52:	6033      	str	r3, [r6, #0]
 8004c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c58:	4607      	mov	r7, r0
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	b10a      	cbz	r2, 8004c62 <_printf_common+0x26>
 8004c5e:	3301      	adds	r3, #1
 8004c60:	6033      	str	r3, [r6, #0]
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	0699      	lsls	r1, r3, #26
 8004c66:	bf42      	ittt	mi
 8004c68:	6833      	ldrmi	r3, [r6, #0]
 8004c6a:	3302      	addmi	r3, #2
 8004c6c:	6033      	strmi	r3, [r6, #0]
 8004c6e:	6825      	ldr	r5, [r4, #0]
 8004c70:	f015 0506 	ands.w	r5, r5, #6
 8004c74:	d106      	bne.n	8004c84 <_printf_common+0x48>
 8004c76:	f104 0a19 	add.w	sl, r4, #25
 8004c7a:	68e3      	ldr	r3, [r4, #12]
 8004c7c:	6832      	ldr	r2, [r6, #0]
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	42ab      	cmp	r3, r5
 8004c82:	dc26      	bgt.n	8004cd2 <_printf_common+0x96>
 8004c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c88:	1e13      	subs	r3, r2, #0
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	bf18      	it	ne
 8004c8e:	2301      	movne	r3, #1
 8004c90:	0692      	lsls	r2, r2, #26
 8004c92:	d42b      	bmi.n	8004cec <_printf_common+0xb0>
 8004c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c98:	4649      	mov	r1, r9
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	47c0      	blx	r8
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d01e      	beq.n	8004ce0 <_printf_common+0xa4>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	68e5      	ldr	r5, [r4, #12]
 8004ca6:	6832      	ldr	r2, [r6, #0]
 8004ca8:	f003 0306 	and.w	r3, r3, #6
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	bf08      	it	eq
 8004cb0:	1aad      	subeq	r5, r5, r2
 8004cb2:	68a3      	ldr	r3, [r4, #8]
 8004cb4:	6922      	ldr	r2, [r4, #16]
 8004cb6:	bf0c      	ite	eq
 8004cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cbc:	2500      	movne	r5, #0
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	bfc4      	itt	gt
 8004cc2:	1a9b      	subgt	r3, r3, r2
 8004cc4:	18ed      	addgt	r5, r5, r3
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	341a      	adds	r4, #26
 8004cca:	42b5      	cmp	r5, r6
 8004ccc:	d11a      	bne.n	8004d04 <_printf_common+0xc8>
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e008      	b.n	8004ce4 <_printf_common+0xa8>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4652      	mov	r2, sl
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	4638      	mov	r0, r7
 8004cda:	47c0      	blx	r8
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d103      	bne.n	8004ce8 <_printf_common+0xac>
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce8:	3501      	adds	r5, #1
 8004cea:	e7c6      	b.n	8004c7a <_printf_common+0x3e>
 8004cec:	18e1      	adds	r1, r4, r3
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	2030      	movs	r0, #48	; 0x30
 8004cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cf6:	4422      	add	r2, r4
 8004cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d00:	3302      	adds	r3, #2
 8004d02:	e7c7      	b.n	8004c94 <_printf_common+0x58>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4622      	mov	r2, r4
 8004d08:	4649      	mov	r1, r9
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	47c0      	blx	r8
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d0e6      	beq.n	8004ce0 <_printf_common+0xa4>
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7d9      	b.n	8004cca <_printf_common+0x8e>
	...

08004d18 <_printf_i>:
 8004d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d1c:	7e0f      	ldrb	r7, [r1, #24]
 8004d1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d20:	2f78      	cmp	r7, #120	; 0x78
 8004d22:	4691      	mov	r9, r2
 8004d24:	4680      	mov	r8, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	469a      	mov	sl, r3
 8004d2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d2e:	d807      	bhi.n	8004d40 <_printf_i+0x28>
 8004d30:	2f62      	cmp	r7, #98	; 0x62
 8004d32:	d80a      	bhi.n	8004d4a <_printf_i+0x32>
 8004d34:	2f00      	cmp	r7, #0
 8004d36:	f000 80d8 	beq.w	8004eea <_printf_i+0x1d2>
 8004d3a:	2f58      	cmp	r7, #88	; 0x58
 8004d3c:	f000 80a3 	beq.w	8004e86 <_printf_i+0x16e>
 8004d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d48:	e03a      	b.n	8004dc0 <_printf_i+0xa8>
 8004d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d4e:	2b15      	cmp	r3, #21
 8004d50:	d8f6      	bhi.n	8004d40 <_printf_i+0x28>
 8004d52:	a101      	add	r1, pc, #4	; (adr r1, 8004d58 <_printf_i+0x40>)
 8004d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d58:	08004db1 	.word	0x08004db1
 8004d5c:	08004dc5 	.word	0x08004dc5
 8004d60:	08004d41 	.word	0x08004d41
 8004d64:	08004d41 	.word	0x08004d41
 8004d68:	08004d41 	.word	0x08004d41
 8004d6c:	08004d41 	.word	0x08004d41
 8004d70:	08004dc5 	.word	0x08004dc5
 8004d74:	08004d41 	.word	0x08004d41
 8004d78:	08004d41 	.word	0x08004d41
 8004d7c:	08004d41 	.word	0x08004d41
 8004d80:	08004d41 	.word	0x08004d41
 8004d84:	08004ed1 	.word	0x08004ed1
 8004d88:	08004df5 	.word	0x08004df5
 8004d8c:	08004eb3 	.word	0x08004eb3
 8004d90:	08004d41 	.word	0x08004d41
 8004d94:	08004d41 	.word	0x08004d41
 8004d98:	08004ef3 	.word	0x08004ef3
 8004d9c:	08004d41 	.word	0x08004d41
 8004da0:	08004df5 	.word	0x08004df5
 8004da4:	08004d41 	.word	0x08004d41
 8004da8:	08004d41 	.word	0x08004d41
 8004dac:	08004ebb 	.word	0x08004ebb
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	1d1a      	adds	r2, r3, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	602a      	str	r2, [r5, #0]
 8004db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0a3      	b.n	8004f0c <_printf_i+0x1f4>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	6829      	ldr	r1, [r5, #0]
 8004dc8:	0606      	lsls	r6, r0, #24
 8004dca:	f101 0304 	add.w	r3, r1, #4
 8004dce:	d50a      	bpl.n	8004de6 <_printf_i+0xce>
 8004dd0:	680e      	ldr	r6, [r1, #0]
 8004dd2:	602b      	str	r3, [r5, #0]
 8004dd4:	2e00      	cmp	r6, #0
 8004dd6:	da03      	bge.n	8004de0 <_printf_i+0xc8>
 8004dd8:	232d      	movs	r3, #45	; 0x2d
 8004dda:	4276      	negs	r6, r6
 8004ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de0:	485e      	ldr	r0, [pc, #376]	; (8004f5c <_printf_i+0x244>)
 8004de2:	230a      	movs	r3, #10
 8004de4:	e019      	b.n	8004e1a <_printf_i+0x102>
 8004de6:	680e      	ldr	r6, [r1, #0]
 8004de8:	602b      	str	r3, [r5, #0]
 8004dea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dee:	bf18      	it	ne
 8004df0:	b236      	sxthne	r6, r6
 8004df2:	e7ef      	b.n	8004dd4 <_printf_i+0xbc>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	6820      	ldr	r0, [r4, #0]
 8004df8:	1d19      	adds	r1, r3, #4
 8004dfa:	6029      	str	r1, [r5, #0]
 8004dfc:	0601      	lsls	r1, r0, #24
 8004dfe:	d501      	bpl.n	8004e04 <_printf_i+0xec>
 8004e00:	681e      	ldr	r6, [r3, #0]
 8004e02:	e002      	b.n	8004e0a <_printf_i+0xf2>
 8004e04:	0646      	lsls	r6, r0, #25
 8004e06:	d5fb      	bpl.n	8004e00 <_printf_i+0xe8>
 8004e08:	881e      	ldrh	r6, [r3, #0]
 8004e0a:	4854      	ldr	r0, [pc, #336]	; (8004f5c <_printf_i+0x244>)
 8004e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8004e0e:	bf0c      	ite	eq
 8004e10:	2308      	moveq	r3, #8
 8004e12:	230a      	movne	r3, #10
 8004e14:	2100      	movs	r1, #0
 8004e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e1a:	6865      	ldr	r5, [r4, #4]
 8004e1c:	60a5      	str	r5, [r4, #8]
 8004e1e:	2d00      	cmp	r5, #0
 8004e20:	bfa2      	ittt	ge
 8004e22:	6821      	ldrge	r1, [r4, #0]
 8004e24:	f021 0104 	bicge.w	r1, r1, #4
 8004e28:	6021      	strge	r1, [r4, #0]
 8004e2a:	b90e      	cbnz	r6, 8004e30 <_printf_i+0x118>
 8004e2c:	2d00      	cmp	r5, #0
 8004e2e:	d04d      	beq.n	8004ecc <_printf_i+0x1b4>
 8004e30:	4615      	mov	r5, r2
 8004e32:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e36:	fb03 6711 	mls	r7, r3, r1, r6
 8004e3a:	5dc7      	ldrb	r7, [r0, r7]
 8004e3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e40:	4637      	mov	r7, r6
 8004e42:	42bb      	cmp	r3, r7
 8004e44:	460e      	mov	r6, r1
 8004e46:	d9f4      	bls.n	8004e32 <_printf_i+0x11a>
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d10b      	bne.n	8004e64 <_printf_i+0x14c>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	07de      	lsls	r6, r3, #31
 8004e50:	d508      	bpl.n	8004e64 <_printf_i+0x14c>
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	6861      	ldr	r1, [r4, #4]
 8004e56:	4299      	cmp	r1, r3
 8004e58:	bfde      	ittt	le
 8004e5a:	2330      	movle	r3, #48	; 0x30
 8004e5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e64:	1b52      	subs	r2, r2, r5
 8004e66:	6122      	str	r2, [r4, #16]
 8004e68:	f8cd a000 	str.w	sl, [sp]
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	aa03      	add	r2, sp, #12
 8004e70:	4621      	mov	r1, r4
 8004e72:	4640      	mov	r0, r8
 8004e74:	f7ff fee2 	bl	8004c3c <_printf_common>
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d14c      	bne.n	8004f16 <_printf_i+0x1fe>
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	b004      	add	sp, #16
 8004e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e86:	4835      	ldr	r0, [pc, #212]	; (8004f5c <_printf_i+0x244>)
 8004e88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e8c:	6829      	ldr	r1, [r5, #0]
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e94:	6029      	str	r1, [r5, #0]
 8004e96:	061d      	lsls	r5, r3, #24
 8004e98:	d514      	bpl.n	8004ec4 <_printf_i+0x1ac>
 8004e9a:	07df      	lsls	r7, r3, #31
 8004e9c:	bf44      	itt	mi
 8004e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8004ea2:	6023      	strmi	r3, [r4, #0]
 8004ea4:	b91e      	cbnz	r6, 8004eae <_printf_i+0x196>
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	f023 0320 	bic.w	r3, r3, #32
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	2310      	movs	r3, #16
 8004eb0:	e7b0      	b.n	8004e14 <_printf_i+0xfc>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	f043 0320 	orr.w	r3, r3, #32
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	2378      	movs	r3, #120	; 0x78
 8004ebc:	4828      	ldr	r0, [pc, #160]	; (8004f60 <_printf_i+0x248>)
 8004ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ec2:	e7e3      	b.n	8004e8c <_printf_i+0x174>
 8004ec4:	0659      	lsls	r1, r3, #25
 8004ec6:	bf48      	it	mi
 8004ec8:	b2b6      	uxthmi	r6, r6
 8004eca:	e7e6      	b.n	8004e9a <_printf_i+0x182>
 8004ecc:	4615      	mov	r5, r2
 8004ece:	e7bb      	b.n	8004e48 <_printf_i+0x130>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	6826      	ldr	r6, [r4, #0]
 8004ed4:	6961      	ldr	r1, [r4, #20]
 8004ed6:	1d18      	adds	r0, r3, #4
 8004ed8:	6028      	str	r0, [r5, #0]
 8004eda:	0635      	lsls	r5, r6, #24
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	d501      	bpl.n	8004ee4 <_printf_i+0x1cc>
 8004ee0:	6019      	str	r1, [r3, #0]
 8004ee2:	e002      	b.n	8004eea <_printf_i+0x1d2>
 8004ee4:	0670      	lsls	r0, r6, #25
 8004ee6:	d5fb      	bpl.n	8004ee0 <_printf_i+0x1c8>
 8004ee8:	8019      	strh	r1, [r3, #0]
 8004eea:	2300      	movs	r3, #0
 8004eec:	6123      	str	r3, [r4, #16]
 8004eee:	4615      	mov	r5, r2
 8004ef0:	e7ba      	b.n	8004e68 <_printf_i+0x150>
 8004ef2:	682b      	ldr	r3, [r5, #0]
 8004ef4:	1d1a      	adds	r2, r3, #4
 8004ef6:	602a      	str	r2, [r5, #0]
 8004ef8:	681d      	ldr	r5, [r3, #0]
 8004efa:	6862      	ldr	r2, [r4, #4]
 8004efc:	2100      	movs	r1, #0
 8004efe:	4628      	mov	r0, r5
 8004f00:	f7fb f96e 	bl	80001e0 <memchr>
 8004f04:	b108      	cbz	r0, 8004f0a <_printf_i+0x1f2>
 8004f06:	1b40      	subs	r0, r0, r5
 8004f08:	6060      	str	r0, [r4, #4]
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f14:	e7a8      	b.n	8004e68 <_printf_i+0x150>
 8004f16:	6923      	ldr	r3, [r4, #16]
 8004f18:	462a      	mov	r2, r5
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	4640      	mov	r0, r8
 8004f1e:	47d0      	blx	sl
 8004f20:	3001      	adds	r0, #1
 8004f22:	d0ab      	beq.n	8004e7c <_printf_i+0x164>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	079b      	lsls	r3, r3, #30
 8004f28:	d413      	bmi.n	8004f52 <_printf_i+0x23a>
 8004f2a:	68e0      	ldr	r0, [r4, #12]
 8004f2c:	9b03      	ldr	r3, [sp, #12]
 8004f2e:	4298      	cmp	r0, r3
 8004f30:	bfb8      	it	lt
 8004f32:	4618      	movlt	r0, r3
 8004f34:	e7a4      	b.n	8004e80 <_printf_i+0x168>
 8004f36:	2301      	movs	r3, #1
 8004f38:	4632      	mov	r2, r6
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	47d0      	blx	sl
 8004f40:	3001      	adds	r0, #1
 8004f42:	d09b      	beq.n	8004e7c <_printf_i+0x164>
 8004f44:	3501      	adds	r5, #1
 8004f46:	68e3      	ldr	r3, [r4, #12]
 8004f48:	9903      	ldr	r1, [sp, #12]
 8004f4a:	1a5b      	subs	r3, r3, r1
 8004f4c:	42ab      	cmp	r3, r5
 8004f4e:	dcf2      	bgt.n	8004f36 <_printf_i+0x21e>
 8004f50:	e7eb      	b.n	8004f2a <_printf_i+0x212>
 8004f52:	2500      	movs	r5, #0
 8004f54:	f104 0619 	add.w	r6, r4, #25
 8004f58:	e7f5      	b.n	8004f46 <_printf_i+0x22e>
 8004f5a:	bf00      	nop
 8004f5c:	080075ae 	.word	0x080075ae
 8004f60:	080075bf 	.word	0x080075bf

08004f64 <siprintf>:
 8004f64:	b40e      	push	{r1, r2, r3}
 8004f66:	b500      	push	{lr}
 8004f68:	b09c      	sub	sp, #112	; 0x70
 8004f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f6c:	9002      	str	r0, [sp, #8]
 8004f6e:	9006      	str	r0, [sp, #24]
 8004f70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f74:	4809      	ldr	r0, [pc, #36]	; (8004f9c <siprintf+0x38>)
 8004f76:	9107      	str	r1, [sp, #28]
 8004f78:	9104      	str	r1, [sp, #16]
 8004f7a:	4909      	ldr	r1, [pc, #36]	; (8004fa0 <siprintf+0x3c>)
 8004f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f80:	9105      	str	r1, [sp, #20]
 8004f82:	6800      	ldr	r0, [r0, #0]
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	a902      	add	r1, sp, #8
 8004f88:	f001 fb98 	bl	80066bc <_svfiprintf_r>
 8004f8c:	9b02      	ldr	r3, [sp, #8]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	b01c      	add	sp, #112	; 0x70
 8004f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f98:	b003      	add	sp, #12
 8004f9a:	4770      	bx	lr
 8004f9c:	20000010 	.word	0x20000010
 8004fa0:	ffff0208 	.word	0xffff0208

08004fa4 <_vsiprintf_r>:
 8004fa4:	b500      	push	{lr}
 8004fa6:	b09b      	sub	sp, #108	; 0x6c
 8004fa8:	9100      	str	r1, [sp, #0]
 8004faa:	9104      	str	r1, [sp, #16]
 8004fac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fb0:	9105      	str	r1, [sp, #20]
 8004fb2:	9102      	str	r1, [sp, #8]
 8004fb4:	4905      	ldr	r1, [pc, #20]	; (8004fcc <_vsiprintf_r+0x28>)
 8004fb6:	9103      	str	r1, [sp, #12]
 8004fb8:	4669      	mov	r1, sp
 8004fba:	f001 fb7f 	bl	80066bc <_svfiprintf_r>
 8004fbe:	9b00      	ldr	r3, [sp, #0]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	b01b      	add	sp, #108	; 0x6c
 8004fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fca:	bf00      	nop
 8004fcc:	ffff0208 	.word	0xffff0208

08004fd0 <vsiprintf>:
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	460a      	mov	r2, r1
 8004fd4:	4601      	mov	r1, r0
 8004fd6:	4802      	ldr	r0, [pc, #8]	; (8004fe0 <vsiprintf+0x10>)
 8004fd8:	6800      	ldr	r0, [r0, #0]
 8004fda:	f7ff bfe3 	b.w	8004fa4 <_vsiprintf_r>
 8004fde:	bf00      	nop
 8004fe0:	20000010 	.word	0x20000010

08004fe4 <quorem>:
 8004fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe8:	6903      	ldr	r3, [r0, #16]
 8004fea:	690c      	ldr	r4, [r1, #16]
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	4607      	mov	r7, r0
 8004ff0:	f2c0 8081 	blt.w	80050f6 <quorem+0x112>
 8004ff4:	3c01      	subs	r4, #1
 8004ff6:	f101 0814 	add.w	r8, r1, #20
 8004ffa:	f100 0514 	add.w	r5, r0, #20
 8004ffe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005002:	9301      	str	r3, [sp, #4]
 8005004:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005008:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800500c:	3301      	adds	r3, #1
 800500e:	429a      	cmp	r2, r3
 8005010:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005014:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005018:	fbb2 f6f3 	udiv	r6, r2, r3
 800501c:	d331      	bcc.n	8005082 <quorem+0x9e>
 800501e:	f04f 0e00 	mov.w	lr, #0
 8005022:	4640      	mov	r0, r8
 8005024:	46ac      	mov	ip, r5
 8005026:	46f2      	mov	sl, lr
 8005028:	f850 2b04 	ldr.w	r2, [r0], #4
 800502c:	b293      	uxth	r3, r2
 800502e:	fb06 e303 	mla	r3, r6, r3, lr
 8005032:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005036:	b29b      	uxth	r3, r3
 8005038:	ebaa 0303 	sub.w	r3, sl, r3
 800503c:	f8dc a000 	ldr.w	sl, [ip]
 8005040:	0c12      	lsrs	r2, r2, #16
 8005042:	fa13 f38a 	uxtah	r3, r3, sl
 8005046:	fb06 e202 	mla	r2, r6, r2, lr
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	9b00      	ldr	r3, [sp, #0]
 800504e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005052:	b292      	uxth	r2, r2
 8005054:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005058:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800505c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005060:	4581      	cmp	r9, r0
 8005062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005066:	f84c 3b04 	str.w	r3, [ip], #4
 800506a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800506e:	d2db      	bcs.n	8005028 <quorem+0x44>
 8005070:	f855 300b 	ldr.w	r3, [r5, fp]
 8005074:	b92b      	cbnz	r3, 8005082 <quorem+0x9e>
 8005076:	9b01      	ldr	r3, [sp, #4]
 8005078:	3b04      	subs	r3, #4
 800507a:	429d      	cmp	r5, r3
 800507c:	461a      	mov	r2, r3
 800507e:	d32e      	bcc.n	80050de <quorem+0xfa>
 8005080:	613c      	str	r4, [r7, #16]
 8005082:	4638      	mov	r0, r7
 8005084:	f001 f8c6 	bl	8006214 <__mcmp>
 8005088:	2800      	cmp	r0, #0
 800508a:	db24      	blt.n	80050d6 <quorem+0xf2>
 800508c:	3601      	adds	r6, #1
 800508e:	4628      	mov	r0, r5
 8005090:	f04f 0c00 	mov.w	ip, #0
 8005094:	f858 2b04 	ldr.w	r2, [r8], #4
 8005098:	f8d0 e000 	ldr.w	lr, [r0]
 800509c:	b293      	uxth	r3, r2
 800509e:	ebac 0303 	sub.w	r3, ip, r3
 80050a2:	0c12      	lsrs	r2, r2, #16
 80050a4:	fa13 f38e 	uxtah	r3, r3, lr
 80050a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80050ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050b6:	45c1      	cmp	r9, r8
 80050b8:	f840 3b04 	str.w	r3, [r0], #4
 80050bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80050c0:	d2e8      	bcs.n	8005094 <quorem+0xb0>
 80050c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050ca:	b922      	cbnz	r2, 80050d6 <quorem+0xf2>
 80050cc:	3b04      	subs	r3, #4
 80050ce:	429d      	cmp	r5, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	d30a      	bcc.n	80050ea <quorem+0x106>
 80050d4:	613c      	str	r4, [r7, #16]
 80050d6:	4630      	mov	r0, r6
 80050d8:	b003      	add	sp, #12
 80050da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	3b04      	subs	r3, #4
 80050e2:	2a00      	cmp	r2, #0
 80050e4:	d1cc      	bne.n	8005080 <quorem+0x9c>
 80050e6:	3c01      	subs	r4, #1
 80050e8:	e7c7      	b.n	800507a <quorem+0x96>
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	3b04      	subs	r3, #4
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	d1f0      	bne.n	80050d4 <quorem+0xf0>
 80050f2:	3c01      	subs	r4, #1
 80050f4:	e7eb      	b.n	80050ce <quorem+0xea>
 80050f6:	2000      	movs	r0, #0
 80050f8:	e7ee      	b.n	80050d8 <quorem+0xf4>
 80050fa:	0000      	movs	r0, r0
 80050fc:	0000      	movs	r0, r0
	...

08005100 <_dtoa_r>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	ed2d 8b04 	vpush	{d8-d9}
 8005108:	ec57 6b10 	vmov	r6, r7, d0
 800510c:	b093      	sub	sp, #76	; 0x4c
 800510e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005110:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005114:	9106      	str	r1, [sp, #24]
 8005116:	ee10 aa10 	vmov	sl, s0
 800511a:	4604      	mov	r4, r0
 800511c:	9209      	str	r2, [sp, #36]	; 0x24
 800511e:	930c      	str	r3, [sp, #48]	; 0x30
 8005120:	46bb      	mov	fp, r7
 8005122:	b975      	cbnz	r5, 8005142 <_dtoa_r+0x42>
 8005124:	2010      	movs	r0, #16
 8005126:	f000 fddd 	bl	8005ce4 <malloc>
 800512a:	4602      	mov	r2, r0
 800512c:	6260      	str	r0, [r4, #36]	; 0x24
 800512e:	b920      	cbnz	r0, 800513a <_dtoa_r+0x3a>
 8005130:	4ba7      	ldr	r3, [pc, #668]	; (80053d0 <_dtoa_r+0x2d0>)
 8005132:	21ea      	movs	r1, #234	; 0xea
 8005134:	48a7      	ldr	r0, [pc, #668]	; (80053d4 <_dtoa_r+0x2d4>)
 8005136:	f001 fbd1 	bl	80068dc <__assert_func>
 800513a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800513e:	6005      	str	r5, [r0, #0]
 8005140:	60c5      	str	r5, [r0, #12]
 8005142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005144:	6819      	ldr	r1, [r3, #0]
 8005146:	b151      	cbz	r1, 800515e <_dtoa_r+0x5e>
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	604a      	str	r2, [r1, #4]
 800514c:	2301      	movs	r3, #1
 800514e:	4093      	lsls	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
 8005152:	4620      	mov	r0, r4
 8005154:	f000 fe1c 	bl	8005d90 <_Bfree>
 8005158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	1e3b      	subs	r3, r7, #0
 8005160:	bfaa      	itet	ge
 8005162:	2300      	movge	r3, #0
 8005164:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005168:	f8c8 3000 	strge.w	r3, [r8]
 800516c:	4b9a      	ldr	r3, [pc, #616]	; (80053d8 <_dtoa_r+0x2d8>)
 800516e:	bfbc      	itt	lt
 8005170:	2201      	movlt	r2, #1
 8005172:	f8c8 2000 	strlt.w	r2, [r8]
 8005176:	ea33 030b 	bics.w	r3, r3, fp
 800517a:	d11b      	bne.n	80051b4 <_dtoa_r+0xb4>
 800517c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800517e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005188:	4333      	orrs	r3, r6
 800518a:	f000 8592 	beq.w	8005cb2 <_dtoa_r+0xbb2>
 800518e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005190:	b963      	cbnz	r3, 80051ac <_dtoa_r+0xac>
 8005192:	4b92      	ldr	r3, [pc, #584]	; (80053dc <_dtoa_r+0x2dc>)
 8005194:	e022      	b.n	80051dc <_dtoa_r+0xdc>
 8005196:	4b92      	ldr	r3, [pc, #584]	; (80053e0 <_dtoa_r+0x2e0>)
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	3308      	adds	r3, #8
 800519c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	9801      	ldr	r0, [sp, #4]
 80051a2:	b013      	add	sp, #76	; 0x4c
 80051a4:	ecbd 8b04 	vpop	{d8-d9}
 80051a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ac:	4b8b      	ldr	r3, [pc, #556]	; (80053dc <_dtoa_r+0x2dc>)
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	3303      	adds	r3, #3
 80051b2:	e7f3      	b.n	800519c <_dtoa_r+0x9c>
 80051b4:	2200      	movs	r2, #0
 80051b6:	2300      	movs	r3, #0
 80051b8:	4650      	mov	r0, sl
 80051ba:	4659      	mov	r1, fp
 80051bc:	f7fb fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 80051c0:	ec4b ab19 	vmov	d9, sl, fp
 80051c4:	4680      	mov	r8, r0
 80051c6:	b158      	cbz	r0, 80051e0 <_dtoa_r+0xe0>
 80051c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051ca:	2301      	movs	r3, #1
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 856b 	beq.w	8005cac <_dtoa_r+0xbac>
 80051d6:	4883      	ldr	r0, [pc, #524]	; (80053e4 <_dtoa_r+0x2e4>)
 80051d8:	6018      	str	r0, [r3, #0]
 80051da:	1e43      	subs	r3, r0, #1
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	e7df      	b.n	80051a0 <_dtoa_r+0xa0>
 80051e0:	ec4b ab10 	vmov	d0, sl, fp
 80051e4:	aa10      	add	r2, sp, #64	; 0x40
 80051e6:	a911      	add	r1, sp, #68	; 0x44
 80051e8:	4620      	mov	r0, r4
 80051ea:	f001 f8b9 	bl	8006360 <__d2b>
 80051ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80051f2:	ee08 0a10 	vmov	s16, r0
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	f000 8084 	beq.w	8005304 <_dtoa_r+0x204>
 80051fc:	ee19 3a90 	vmov	r3, s19
 8005200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005204:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005208:	4656      	mov	r6, sl
 800520a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800520e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005212:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005216:	4b74      	ldr	r3, [pc, #464]	; (80053e8 <_dtoa_r+0x2e8>)
 8005218:	2200      	movs	r2, #0
 800521a:	4630      	mov	r0, r6
 800521c:	4639      	mov	r1, r7
 800521e:	f7fb f833 	bl	8000288 <__aeabi_dsub>
 8005222:	a365      	add	r3, pc, #404	; (adr r3, 80053b8 <_dtoa_r+0x2b8>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb f9e6 	bl	80005f8 <__aeabi_dmul>
 800522c:	a364      	add	r3, pc, #400	; (adr r3, 80053c0 <_dtoa_r+0x2c0>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fb f82b 	bl	800028c <__adddf3>
 8005236:	4606      	mov	r6, r0
 8005238:	4628      	mov	r0, r5
 800523a:	460f      	mov	r7, r1
 800523c:	f7fb f972 	bl	8000524 <__aeabi_i2d>
 8005240:	a361      	add	r3, pc, #388	; (adr r3, 80053c8 <_dtoa_r+0x2c8>)
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	f7fb f9d7 	bl	80005f8 <__aeabi_dmul>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4630      	mov	r0, r6
 8005250:	4639      	mov	r1, r7
 8005252:	f7fb f81b 	bl	800028c <__adddf3>
 8005256:	4606      	mov	r6, r0
 8005258:	460f      	mov	r7, r1
 800525a:	f7fb fc7d 	bl	8000b58 <__aeabi_d2iz>
 800525e:	2200      	movs	r2, #0
 8005260:	9000      	str	r0, [sp, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	4630      	mov	r0, r6
 8005266:	4639      	mov	r1, r7
 8005268:	f7fb fc38 	bl	8000adc <__aeabi_dcmplt>
 800526c:	b150      	cbz	r0, 8005284 <_dtoa_r+0x184>
 800526e:	9800      	ldr	r0, [sp, #0]
 8005270:	f7fb f958 	bl	8000524 <__aeabi_i2d>
 8005274:	4632      	mov	r2, r6
 8005276:	463b      	mov	r3, r7
 8005278:	f7fb fc26 	bl	8000ac8 <__aeabi_dcmpeq>
 800527c:	b910      	cbnz	r0, 8005284 <_dtoa_r+0x184>
 800527e:	9b00      	ldr	r3, [sp, #0]
 8005280:	3b01      	subs	r3, #1
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	9b00      	ldr	r3, [sp, #0]
 8005286:	2b16      	cmp	r3, #22
 8005288:	d85a      	bhi.n	8005340 <_dtoa_r+0x240>
 800528a:	9a00      	ldr	r2, [sp, #0]
 800528c:	4b57      	ldr	r3, [pc, #348]	; (80053ec <_dtoa_r+0x2ec>)
 800528e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	ec51 0b19 	vmov	r0, r1, d9
 800529a:	f7fb fc1f 	bl	8000adc <__aeabi_dcmplt>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d050      	beq.n	8005344 <_dtoa_r+0x244>
 80052a2:	9b00      	ldr	r3, [sp, #0]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80052ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052ae:	1b5d      	subs	r5, r3, r5
 80052b0:	1e6b      	subs	r3, r5, #1
 80052b2:	9305      	str	r3, [sp, #20]
 80052b4:	bf45      	ittet	mi
 80052b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80052ba:	9304      	strmi	r3, [sp, #16]
 80052bc:	2300      	movpl	r3, #0
 80052be:	2300      	movmi	r3, #0
 80052c0:	bf4c      	ite	mi
 80052c2:	9305      	strmi	r3, [sp, #20]
 80052c4:	9304      	strpl	r3, [sp, #16]
 80052c6:	9b00      	ldr	r3, [sp, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	db3d      	blt.n	8005348 <_dtoa_r+0x248>
 80052cc:	9b05      	ldr	r3, [sp, #20]
 80052ce:	9a00      	ldr	r2, [sp, #0]
 80052d0:	920a      	str	r2, [sp, #40]	; 0x28
 80052d2:	4413      	add	r3, r2
 80052d4:	9305      	str	r3, [sp, #20]
 80052d6:	2300      	movs	r3, #0
 80052d8:	9307      	str	r3, [sp, #28]
 80052da:	9b06      	ldr	r3, [sp, #24]
 80052dc:	2b09      	cmp	r3, #9
 80052de:	f200 8089 	bhi.w	80053f4 <_dtoa_r+0x2f4>
 80052e2:	2b05      	cmp	r3, #5
 80052e4:	bfc4      	itt	gt
 80052e6:	3b04      	subgt	r3, #4
 80052e8:	9306      	strgt	r3, [sp, #24]
 80052ea:	9b06      	ldr	r3, [sp, #24]
 80052ec:	f1a3 0302 	sub.w	r3, r3, #2
 80052f0:	bfcc      	ite	gt
 80052f2:	2500      	movgt	r5, #0
 80052f4:	2501      	movle	r5, #1
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	f200 8087 	bhi.w	800540a <_dtoa_r+0x30a>
 80052fc:	e8df f003 	tbb	[pc, r3]
 8005300:	59383a2d 	.word	0x59383a2d
 8005304:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005308:	441d      	add	r5, r3
 800530a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800530e:	2b20      	cmp	r3, #32
 8005310:	bfc1      	itttt	gt
 8005312:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005316:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800531a:	fa0b f303 	lslgt.w	r3, fp, r3
 800531e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005322:	bfda      	itte	le
 8005324:	f1c3 0320 	rsble	r3, r3, #32
 8005328:	fa06 f003 	lslle.w	r0, r6, r3
 800532c:	4318      	orrgt	r0, r3
 800532e:	f7fb f8e9 	bl	8000504 <__aeabi_ui2d>
 8005332:	2301      	movs	r3, #1
 8005334:	4606      	mov	r6, r0
 8005336:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800533a:	3d01      	subs	r5, #1
 800533c:	930e      	str	r3, [sp, #56]	; 0x38
 800533e:	e76a      	b.n	8005216 <_dtoa_r+0x116>
 8005340:	2301      	movs	r3, #1
 8005342:	e7b2      	b.n	80052aa <_dtoa_r+0x1aa>
 8005344:	900b      	str	r0, [sp, #44]	; 0x2c
 8005346:	e7b1      	b.n	80052ac <_dtoa_r+0x1ac>
 8005348:	9b04      	ldr	r3, [sp, #16]
 800534a:	9a00      	ldr	r2, [sp, #0]
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	9304      	str	r3, [sp, #16]
 8005350:	4253      	negs	r3, r2
 8005352:	9307      	str	r3, [sp, #28]
 8005354:	2300      	movs	r3, #0
 8005356:	930a      	str	r3, [sp, #40]	; 0x28
 8005358:	e7bf      	b.n	80052da <_dtoa_r+0x1da>
 800535a:	2300      	movs	r3, #0
 800535c:	9308      	str	r3, [sp, #32]
 800535e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	dc55      	bgt.n	8005410 <_dtoa_r+0x310>
 8005364:	2301      	movs	r3, #1
 8005366:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800536a:	461a      	mov	r2, r3
 800536c:	9209      	str	r2, [sp, #36]	; 0x24
 800536e:	e00c      	b.n	800538a <_dtoa_r+0x28a>
 8005370:	2301      	movs	r3, #1
 8005372:	e7f3      	b.n	800535c <_dtoa_r+0x25c>
 8005374:	2300      	movs	r3, #0
 8005376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005378:	9308      	str	r3, [sp, #32]
 800537a:	9b00      	ldr	r3, [sp, #0]
 800537c:	4413      	add	r3, r2
 800537e:	9302      	str	r3, [sp, #8]
 8005380:	3301      	adds	r3, #1
 8005382:	2b01      	cmp	r3, #1
 8005384:	9303      	str	r3, [sp, #12]
 8005386:	bfb8      	it	lt
 8005388:	2301      	movlt	r3, #1
 800538a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800538c:	2200      	movs	r2, #0
 800538e:	6042      	str	r2, [r0, #4]
 8005390:	2204      	movs	r2, #4
 8005392:	f102 0614 	add.w	r6, r2, #20
 8005396:	429e      	cmp	r6, r3
 8005398:	6841      	ldr	r1, [r0, #4]
 800539a:	d93d      	bls.n	8005418 <_dtoa_r+0x318>
 800539c:	4620      	mov	r0, r4
 800539e:	f000 fcb7 	bl	8005d10 <_Balloc>
 80053a2:	9001      	str	r0, [sp, #4]
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d13b      	bne.n	8005420 <_dtoa_r+0x320>
 80053a8:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <_dtoa_r+0x2f0>)
 80053aa:	4602      	mov	r2, r0
 80053ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053b0:	e6c0      	b.n	8005134 <_dtoa_r+0x34>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e7df      	b.n	8005376 <_dtoa_r+0x276>
 80053b6:	bf00      	nop
 80053b8:	636f4361 	.word	0x636f4361
 80053bc:	3fd287a7 	.word	0x3fd287a7
 80053c0:	8b60c8b3 	.word	0x8b60c8b3
 80053c4:	3fc68a28 	.word	0x3fc68a28
 80053c8:	509f79fb 	.word	0x509f79fb
 80053cc:	3fd34413 	.word	0x3fd34413
 80053d0:	080075dd 	.word	0x080075dd
 80053d4:	080075f4 	.word	0x080075f4
 80053d8:	7ff00000 	.word	0x7ff00000
 80053dc:	080075d9 	.word	0x080075d9
 80053e0:	080075d0 	.word	0x080075d0
 80053e4:	080075ad 	.word	0x080075ad
 80053e8:	3ff80000 	.word	0x3ff80000
 80053ec:	080076e8 	.word	0x080076e8
 80053f0:	0800764f 	.word	0x0800764f
 80053f4:	2501      	movs	r5, #1
 80053f6:	2300      	movs	r3, #0
 80053f8:	9306      	str	r3, [sp, #24]
 80053fa:	9508      	str	r5, [sp, #32]
 80053fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005400:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005404:	2200      	movs	r2, #0
 8005406:	2312      	movs	r3, #18
 8005408:	e7b0      	b.n	800536c <_dtoa_r+0x26c>
 800540a:	2301      	movs	r3, #1
 800540c:	9308      	str	r3, [sp, #32]
 800540e:	e7f5      	b.n	80053fc <_dtoa_r+0x2fc>
 8005410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005412:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005416:	e7b8      	b.n	800538a <_dtoa_r+0x28a>
 8005418:	3101      	adds	r1, #1
 800541a:	6041      	str	r1, [r0, #4]
 800541c:	0052      	lsls	r2, r2, #1
 800541e:	e7b8      	b.n	8005392 <_dtoa_r+0x292>
 8005420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005422:	9a01      	ldr	r2, [sp, #4]
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	9b03      	ldr	r3, [sp, #12]
 8005428:	2b0e      	cmp	r3, #14
 800542a:	f200 809d 	bhi.w	8005568 <_dtoa_r+0x468>
 800542e:	2d00      	cmp	r5, #0
 8005430:	f000 809a 	beq.w	8005568 <_dtoa_r+0x468>
 8005434:	9b00      	ldr	r3, [sp, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	dd32      	ble.n	80054a0 <_dtoa_r+0x3a0>
 800543a:	4ab7      	ldr	r2, [pc, #732]	; (8005718 <_dtoa_r+0x618>)
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005444:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005448:	9b00      	ldr	r3, [sp, #0]
 800544a:	05d8      	lsls	r0, r3, #23
 800544c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005450:	d516      	bpl.n	8005480 <_dtoa_r+0x380>
 8005452:	4bb2      	ldr	r3, [pc, #712]	; (800571c <_dtoa_r+0x61c>)
 8005454:	ec51 0b19 	vmov	r0, r1, d9
 8005458:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800545c:	f7fb f9f6 	bl	800084c <__aeabi_ddiv>
 8005460:	f007 070f 	and.w	r7, r7, #15
 8005464:	4682      	mov	sl, r0
 8005466:	468b      	mov	fp, r1
 8005468:	2503      	movs	r5, #3
 800546a:	4eac      	ldr	r6, [pc, #688]	; (800571c <_dtoa_r+0x61c>)
 800546c:	b957      	cbnz	r7, 8005484 <_dtoa_r+0x384>
 800546e:	4642      	mov	r2, r8
 8005470:	464b      	mov	r3, r9
 8005472:	4650      	mov	r0, sl
 8005474:	4659      	mov	r1, fp
 8005476:	f7fb f9e9 	bl	800084c <__aeabi_ddiv>
 800547a:	4682      	mov	sl, r0
 800547c:	468b      	mov	fp, r1
 800547e:	e028      	b.n	80054d2 <_dtoa_r+0x3d2>
 8005480:	2502      	movs	r5, #2
 8005482:	e7f2      	b.n	800546a <_dtoa_r+0x36a>
 8005484:	07f9      	lsls	r1, r7, #31
 8005486:	d508      	bpl.n	800549a <_dtoa_r+0x39a>
 8005488:	4640      	mov	r0, r8
 800548a:	4649      	mov	r1, r9
 800548c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005490:	f7fb f8b2 	bl	80005f8 <__aeabi_dmul>
 8005494:	3501      	adds	r5, #1
 8005496:	4680      	mov	r8, r0
 8005498:	4689      	mov	r9, r1
 800549a:	107f      	asrs	r7, r7, #1
 800549c:	3608      	adds	r6, #8
 800549e:	e7e5      	b.n	800546c <_dtoa_r+0x36c>
 80054a0:	f000 809b 	beq.w	80055da <_dtoa_r+0x4da>
 80054a4:	9b00      	ldr	r3, [sp, #0]
 80054a6:	4f9d      	ldr	r7, [pc, #628]	; (800571c <_dtoa_r+0x61c>)
 80054a8:	425e      	negs	r6, r3
 80054aa:	4b9b      	ldr	r3, [pc, #620]	; (8005718 <_dtoa_r+0x618>)
 80054ac:	f006 020f 	and.w	r2, r6, #15
 80054b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	ec51 0b19 	vmov	r0, r1, d9
 80054bc:	f7fb f89c 	bl	80005f8 <__aeabi_dmul>
 80054c0:	1136      	asrs	r6, r6, #4
 80054c2:	4682      	mov	sl, r0
 80054c4:	468b      	mov	fp, r1
 80054c6:	2300      	movs	r3, #0
 80054c8:	2502      	movs	r5, #2
 80054ca:	2e00      	cmp	r6, #0
 80054cc:	d17a      	bne.n	80055c4 <_dtoa_r+0x4c4>
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1d3      	bne.n	800547a <_dtoa_r+0x37a>
 80054d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8082 	beq.w	80055de <_dtoa_r+0x4de>
 80054da:	4b91      	ldr	r3, [pc, #580]	; (8005720 <_dtoa_r+0x620>)
 80054dc:	2200      	movs	r2, #0
 80054de:	4650      	mov	r0, sl
 80054e0:	4659      	mov	r1, fp
 80054e2:	f7fb fafb 	bl	8000adc <__aeabi_dcmplt>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d079      	beq.n	80055de <_dtoa_r+0x4de>
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d076      	beq.n	80055de <_dtoa_r+0x4de>
 80054f0:	9b02      	ldr	r3, [sp, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	dd36      	ble.n	8005564 <_dtoa_r+0x464>
 80054f6:	9b00      	ldr	r3, [sp, #0]
 80054f8:	4650      	mov	r0, sl
 80054fa:	4659      	mov	r1, fp
 80054fc:	1e5f      	subs	r7, r3, #1
 80054fe:	2200      	movs	r2, #0
 8005500:	4b88      	ldr	r3, [pc, #544]	; (8005724 <_dtoa_r+0x624>)
 8005502:	f7fb f879 	bl	80005f8 <__aeabi_dmul>
 8005506:	9e02      	ldr	r6, [sp, #8]
 8005508:	4682      	mov	sl, r0
 800550a:	468b      	mov	fp, r1
 800550c:	3501      	adds	r5, #1
 800550e:	4628      	mov	r0, r5
 8005510:	f7fb f808 	bl	8000524 <__aeabi_i2d>
 8005514:	4652      	mov	r2, sl
 8005516:	465b      	mov	r3, fp
 8005518:	f7fb f86e 	bl	80005f8 <__aeabi_dmul>
 800551c:	4b82      	ldr	r3, [pc, #520]	; (8005728 <_dtoa_r+0x628>)
 800551e:	2200      	movs	r2, #0
 8005520:	f7fa feb4 	bl	800028c <__adddf3>
 8005524:	46d0      	mov	r8, sl
 8005526:	46d9      	mov	r9, fp
 8005528:	4682      	mov	sl, r0
 800552a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800552e:	2e00      	cmp	r6, #0
 8005530:	d158      	bne.n	80055e4 <_dtoa_r+0x4e4>
 8005532:	4b7e      	ldr	r3, [pc, #504]	; (800572c <_dtoa_r+0x62c>)
 8005534:	2200      	movs	r2, #0
 8005536:	4640      	mov	r0, r8
 8005538:	4649      	mov	r1, r9
 800553a:	f7fa fea5 	bl	8000288 <__aeabi_dsub>
 800553e:	4652      	mov	r2, sl
 8005540:	465b      	mov	r3, fp
 8005542:	4680      	mov	r8, r0
 8005544:	4689      	mov	r9, r1
 8005546:	f7fb fae7 	bl	8000b18 <__aeabi_dcmpgt>
 800554a:	2800      	cmp	r0, #0
 800554c:	f040 8295 	bne.w	8005a7a <_dtoa_r+0x97a>
 8005550:	4652      	mov	r2, sl
 8005552:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005556:	4640      	mov	r0, r8
 8005558:	4649      	mov	r1, r9
 800555a:	f7fb fabf 	bl	8000adc <__aeabi_dcmplt>
 800555e:	2800      	cmp	r0, #0
 8005560:	f040 8289 	bne.w	8005a76 <_dtoa_r+0x976>
 8005564:	ec5b ab19 	vmov	sl, fp, d9
 8005568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800556a:	2b00      	cmp	r3, #0
 800556c:	f2c0 8148 	blt.w	8005800 <_dtoa_r+0x700>
 8005570:	9a00      	ldr	r2, [sp, #0]
 8005572:	2a0e      	cmp	r2, #14
 8005574:	f300 8144 	bgt.w	8005800 <_dtoa_r+0x700>
 8005578:	4b67      	ldr	r3, [pc, #412]	; (8005718 <_dtoa_r+0x618>)
 800557a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800557e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	f280 80d5 	bge.w	8005734 <_dtoa_r+0x634>
 800558a:	9b03      	ldr	r3, [sp, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f300 80d1 	bgt.w	8005734 <_dtoa_r+0x634>
 8005592:	f040 826f 	bne.w	8005a74 <_dtoa_r+0x974>
 8005596:	4b65      	ldr	r3, [pc, #404]	; (800572c <_dtoa_r+0x62c>)
 8005598:	2200      	movs	r2, #0
 800559a:	4640      	mov	r0, r8
 800559c:	4649      	mov	r1, r9
 800559e:	f7fb f82b 	bl	80005f8 <__aeabi_dmul>
 80055a2:	4652      	mov	r2, sl
 80055a4:	465b      	mov	r3, fp
 80055a6:	f7fb faad 	bl	8000b04 <__aeabi_dcmpge>
 80055aa:	9e03      	ldr	r6, [sp, #12]
 80055ac:	4637      	mov	r7, r6
 80055ae:	2800      	cmp	r0, #0
 80055b0:	f040 8245 	bne.w	8005a3e <_dtoa_r+0x93e>
 80055b4:	9d01      	ldr	r5, [sp, #4]
 80055b6:	2331      	movs	r3, #49	; 0x31
 80055b8:	f805 3b01 	strb.w	r3, [r5], #1
 80055bc:	9b00      	ldr	r3, [sp, #0]
 80055be:	3301      	adds	r3, #1
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	e240      	b.n	8005a46 <_dtoa_r+0x946>
 80055c4:	07f2      	lsls	r2, r6, #31
 80055c6:	d505      	bpl.n	80055d4 <_dtoa_r+0x4d4>
 80055c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055cc:	f7fb f814 	bl	80005f8 <__aeabi_dmul>
 80055d0:	3501      	adds	r5, #1
 80055d2:	2301      	movs	r3, #1
 80055d4:	1076      	asrs	r6, r6, #1
 80055d6:	3708      	adds	r7, #8
 80055d8:	e777      	b.n	80054ca <_dtoa_r+0x3ca>
 80055da:	2502      	movs	r5, #2
 80055dc:	e779      	b.n	80054d2 <_dtoa_r+0x3d2>
 80055de:	9f00      	ldr	r7, [sp, #0]
 80055e0:	9e03      	ldr	r6, [sp, #12]
 80055e2:	e794      	b.n	800550e <_dtoa_r+0x40e>
 80055e4:	9901      	ldr	r1, [sp, #4]
 80055e6:	4b4c      	ldr	r3, [pc, #304]	; (8005718 <_dtoa_r+0x618>)
 80055e8:	4431      	add	r1, r6
 80055ea:	910d      	str	r1, [sp, #52]	; 0x34
 80055ec:	9908      	ldr	r1, [sp, #32]
 80055ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80055f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055f6:	2900      	cmp	r1, #0
 80055f8:	d043      	beq.n	8005682 <_dtoa_r+0x582>
 80055fa:	494d      	ldr	r1, [pc, #308]	; (8005730 <_dtoa_r+0x630>)
 80055fc:	2000      	movs	r0, #0
 80055fe:	f7fb f925 	bl	800084c <__aeabi_ddiv>
 8005602:	4652      	mov	r2, sl
 8005604:	465b      	mov	r3, fp
 8005606:	f7fa fe3f 	bl	8000288 <__aeabi_dsub>
 800560a:	9d01      	ldr	r5, [sp, #4]
 800560c:	4682      	mov	sl, r0
 800560e:	468b      	mov	fp, r1
 8005610:	4649      	mov	r1, r9
 8005612:	4640      	mov	r0, r8
 8005614:	f7fb faa0 	bl	8000b58 <__aeabi_d2iz>
 8005618:	4606      	mov	r6, r0
 800561a:	f7fa ff83 	bl	8000524 <__aeabi_i2d>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4640      	mov	r0, r8
 8005624:	4649      	mov	r1, r9
 8005626:	f7fa fe2f 	bl	8000288 <__aeabi_dsub>
 800562a:	3630      	adds	r6, #48	; 0x30
 800562c:	f805 6b01 	strb.w	r6, [r5], #1
 8005630:	4652      	mov	r2, sl
 8005632:	465b      	mov	r3, fp
 8005634:	4680      	mov	r8, r0
 8005636:	4689      	mov	r9, r1
 8005638:	f7fb fa50 	bl	8000adc <__aeabi_dcmplt>
 800563c:	2800      	cmp	r0, #0
 800563e:	d163      	bne.n	8005708 <_dtoa_r+0x608>
 8005640:	4642      	mov	r2, r8
 8005642:	464b      	mov	r3, r9
 8005644:	4936      	ldr	r1, [pc, #216]	; (8005720 <_dtoa_r+0x620>)
 8005646:	2000      	movs	r0, #0
 8005648:	f7fa fe1e 	bl	8000288 <__aeabi_dsub>
 800564c:	4652      	mov	r2, sl
 800564e:	465b      	mov	r3, fp
 8005650:	f7fb fa44 	bl	8000adc <__aeabi_dcmplt>
 8005654:	2800      	cmp	r0, #0
 8005656:	f040 80b5 	bne.w	80057c4 <_dtoa_r+0x6c4>
 800565a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800565c:	429d      	cmp	r5, r3
 800565e:	d081      	beq.n	8005564 <_dtoa_r+0x464>
 8005660:	4b30      	ldr	r3, [pc, #192]	; (8005724 <_dtoa_r+0x624>)
 8005662:	2200      	movs	r2, #0
 8005664:	4650      	mov	r0, sl
 8005666:	4659      	mov	r1, fp
 8005668:	f7fa ffc6 	bl	80005f8 <__aeabi_dmul>
 800566c:	4b2d      	ldr	r3, [pc, #180]	; (8005724 <_dtoa_r+0x624>)
 800566e:	4682      	mov	sl, r0
 8005670:	468b      	mov	fp, r1
 8005672:	4640      	mov	r0, r8
 8005674:	4649      	mov	r1, r9
 8005676:	2200      	movs	r2, #0
 8005678:	f7fa ffbe 	bl	80005f8 <__aeabi_dmul>
 800567c:	4680      	mov	r8, r0
 800567e:	4689      	mov	r9, r1
 8005680:	e7c6      	b.n	8005610 <_dtoa_r+0x510>
 8005682:	4650      	mov	r0, sl
 8005684:	4659      	mov	r1, fp
 8005686:	f7fa ffb7 	bl	80005f8 <__aeabi_dmul>
 800568a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800568c:	9d01      	ldr	r5, [sp, #4]
 800568e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005690:	4682      	mov	sl, r0
 8005692:	468b      	mov	fp, r1
 8005694:	4649      	mov	r1, r9
 8005696:	4640      	mov	r0, r8
 8005698:	f7fb fa5e 	bl	8000b58 <__aeabi_d2iz>
 800569c:	4606      	mov	r6, r0
 800569e:	f7fa ff41 	bl	8000524 <__aeabi_i2d>
 80056a2:	3630      	adds	r6, #48	; 0x30
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4640      	mov	r0, r8
 80056aa:	4649      	mov	r1, r9
 80056ac:	f7fa fdec 	bl	8000288 <__aeabi_dsub>
 80056b0:	f805 6b01 	strb.w	r6, [r5], #1
 80056b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056b6:	429d      	cmp	r5, r3
 80056b8:	4680      	mov	r8, r0
 80056ba:	4689      	mov	r9, r1
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	d124      	bne.n	800570c <_dtoa_r+0x60c>
 80056c2:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <_dtoa_r+0x630>)
 80056c4:	4650      	mov	r0, sl
 80056c6:	4659      	mov	r1, fp
 80056c8:	f7fa fde0 	bl	800028c <__adddf3>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4640      	mov	r0, r8
 80056d2:	4649      	mov	r1, r9
 80056d4:	f7fb fa20 	bl	8000b18 <__aeabi_dcmpgt>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d173      	bne.n	80057c4 <_dtoa_r+0x6c4>
 80056dc:	4652      	mov	r2, sl
 80056de:	465b      	mov	r3, fp
 80056e0:	4913      	ldr	r1, [pc, #76]	; (8005730 <_dtoa_r+0x630>)
 80056e2:	2000      	movs	r0, #0
 80056e4:	f7fa fdd0 	bl	8000288 <__aeabi_dsub>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4640      	mov	r0, r8
 80056ee:	4649      	mov	r1, r9
 80056f0:	f7fb f9f4 	bl	8000adc <__aeabi_dcmplt>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	f43f af35 	beq.w	8005564 <_dtoa_r+0x464>
 80056fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80056fc:	1e6b      	subs	r3, r5, #1
 80056fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005700:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005704:	2b30      	cmp	r3, #48	; 0x30
 8005706:	d0f8      	beq.n	80056fa <_dtoa_r+0x5fa>
 8005708:	9700      	str	r7, [sp, #0]
 800570a:	e049      	b.n	80057a0 <_dtoa_r+0x6a0>
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <_dtoa_r+0x624>)
 800570e:	f7fa ff73 	bl	80005f8 <__aeabi_dmul>
 8005712:	4680      	mov	r8, r0
 8005714:	4689      	mov	r9, r1
 8005716:	e7bd      	b.n	8005694 <_dtoa_r+0x594>
 8005718:	080076e8 	.word	0x080076e8
 800571c:	080076c0 	.word	0x080076c0
 8005720:	3ff00000 	.word	0x3ff00000
 8005724:	40240000 	.word	0x40240000
 8005728:	401c0000 	.word	0x401c0000
 800572c:	40140000 	.word	0x40140000
 8005730:	3fe00000 	.word	0x3fe00000
 8005734:	9d01      	ldr	r5, [sp, #4]
 8005736:	4656      	mov	r6, sl
 8005738:	465f      	mov	r7, fp
 800573a:	4642      	mov	r2, r8
 800573c:	464b      	mov	r3, r9
 800573e:	4630      	mov	r0, r6
 8005740:	4639      	mov	r1, r7
 8005742:	f7fb f883 	bl	800084c <__aeabi_ddiv>
 8005746:	f7fb fa07 	bl	8000b58 <__aeabi_d2iz>
 800574a:	4682      	mov	sl, r0
 800574c:	f7fa feea 	bl	8000524 <__aeabi_i2d>
 8005750:	4642      	mov	r2, r8
 8005752:	464b      	mov	r3, r9
 8005754:	f7fa ff50 	bl	80005f8 <__aeabi_dmul>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005764:	f7fa fd90 	bl	8000288 <__aeabi_dsub>
 8005768:	f805 6b01 	strb.w	r6, [r5], #1
 800576c:	9e01      	ldr	r6, [sp, #4]
 800576e:	9f03      	ldr	r7, [sp, #12]
 8005770:	1bae      	subs	r6, r5, r6
 8005772:	42b7      	cmp	r7, r6
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	d135      	bne.n	80057e6 <_dtoa_r+0x6e6>
 800577a:	f7fa fd87 	bl	800028c <__adddf3>
 800577e:	4642      	mov	r2, r8
 8005780:	464b      	mov	r3, r9
 8005782:	4606      	mov	r6, r0
 8005784:	460f      	mov	r7, r1
 8005786:	f7fb f9c7 	bl	8000b18 <__aeabi_dcmpgt>
 800578a:	b9d0      	cbnz	r0, 80057c2 <_dtoa_r+0x6c2>
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fb f998 	bl	8000ac8 <__aeabi_dcmpeq>
 8005798:	b110      	cbz	r0, 80057a0 <_dtoa_r+0x6a0>
 800579a:	f01a 0f01 	tst.w	sl, #1
 800579e:	d110      	bne.n	80057c2 <_dtoa_r+0x6c2>
 80057a0:	4620      	mov	r0, r4
 80057a2:	ee18 1a10 	vmov	r1, s16
 80057a6:	f000 faf3 	bl	8005d90 <_Bfree>
 80057aa:	2300      	movs	r3, #0
 80057ac:	9800      	ldr	r0, [sp, #0]
 80057ae:	702b      	strb	r3, [r5, #0]
 80057b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057b2:	3001      	adds	r0, #1
 80057b4:	6018      	str	r0, [r3, #0]
 80057b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f43f acf1 	beq.w	80051a0 <_dtoa_r+0xa0>
 80057be:	601d      	str	r5, [r3, #0]
 80057c0:	e4ee      	b.n	80051a0 <_dtoa_r+0xa0>
 80057c2:	9f00      	ldr	r7, [sp, #0]
 80057c4:	462b      	mov	r3, r5
 80057c6:	461d      	mov	r5, r3
 80057c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057cc:	2a39      	cmp	r2, #57	; 0x39
 80057ce:	d106      	bne.n	80057de <_dtoa_r+0x6de>
 80057d0:	9a01      	ldr	r2, [sp, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d1f7      	bne.n	80057c6 <_dtoa_r+0x6c6>
 80057d6:	9901      	ldr	r1, [sp, #4]
 80057d8:	2230      	movs	r2, #48	; 0x30
 80057da:	3701      	adds	r7, #1
 80057dc:	700a      	strb	r2, [r1, #0]
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	3201      	adds	r2, #1
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	e790      	b.n	8005708 <_dtoa_r+0x608>
 80057e6:	4ba6      	ldr	r3, [pc, #664]	; (8005a80 <_dtoa_r+0x980>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	f7fa ff05 	bl	80005f8 <__aeabi_dmul>
 80057ee:	2200      	movs	r2, #0
 80057f0:	2300      	movs	r3, #0
 80057f2:	4606      	mov	r6, r0
 80057f4:	460f      	mov	r7, r1
 80057f6:	f7fb f967 	bl	8000ac8 <__aeabi_dcmpeq>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d09d      	beq.n	800573a <_dtoa_r+0x63a>
 80057fe:	e7cf      	b.n	80057a0 <_dtoa_r+0x6a0>
 8005800:	9a08      	ldr	r2, [sp, #32]
 8005802:	2a00      	cmp	r2, #0
 8005804:	f000 80d7 	beq.w	80059b6 <_dtoa_r+0x8b6>
 8005808:	9a06      	ldr	r2, [sp, #24]
 800580a:	2a01      	cmp	r2, #1
 800580c:	f300 80ba 	bgt.w	8005984 <_dtoa_r+0x884>
 8005810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005812:	2a00      	cmp	r2, #0
 8005814:	f000 80b2 	beq.w	800597c <_dtoa_r+0x87c>
 8005818:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800581c:	9e07      	ldr	r6, [sp, #28]
 800581e:	9d04      	ldr	r5, [sp, #16]
 8005820:	9a04      	ldr	r2, [sp, #16]
 8005822:	441a      	add	r2, r3
 8005824:	9204      	str	r2, [sp, #16]
 8005826:	9a05      	ldr	r2, [sp, #20]
 8005828:	2101      	movs	r1, #1
 800582a:	441a      	add	r2, r3
 800582c:	4620      	mov	r0, r4
 800582e:	9205      	str	r2, [sp, #20]
 8005830:	f000 fb66 	bl	8005f00 <__i2b>
 8005834:	4607      	mov	r7, r0
 8005836:	2d00      	cmp	r5, #0
 8005838:	dd0c      	ble.n	8005854 <_dtoa_r+0x754>
 800583a:	9b05      	ldr	r3, [sp, #20]
 800583c:	2b00      	cmp	r3, #0
 800583e:	dd09      	ble.n	8005854 <_dtoa_r+0x754>
 8005840:	42ab      	cmp	r3, r5
 8005842:	9a04      	ldr	r2, [sp, #16]
 8005844:	bfa8      	it	ge
 8005846:	462b      	movge	r3, r5
 8005848:	1ad2      	subs	r2, r2, r3
 800584a:	9204      	str	r2, [sp, #16]
 800584c:	9a05      	ldr	r2, [sp, #20]
 800584e:	1aed      	subs	r5, r5, r3
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	9305      	str	r3, [sp, #20]
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	b31b      	cbz	r3, 80058a0 <_dtoa_r+0x7a0>
 8005858:	9b08      	ldr	r3, [sp, #32]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80af 	beq.w	80059be <_dtoa_r+0x8be>
 8005860:	2e00      	cmp	r6, #0
 8005862:	dd13      	ble.n	800588c <_dtoa_r+0x78c>
 8005864:	4639      	mov	r1, r7
 8005866:	4632      	mov	r2, r6
 8005868:	4620      	mov	r0, r4
 800586a:	f000 fc09 	bl	8006080 <__pow5mult>
 800586e:	ee18 2a10 	vmov	r2, s16
 8005872:	4601      	mov	r1, r0
 8005874:	4607      	mov	r7, r0
 8005876:	4620      	mov	r0, r4
 8005878:	f000 fb58 	bl	8005f2c <__multiply>
 800587c:	ee18 1a10 	vmov	r1, s16
 8005880:	4680      	mov	r8, r0
 8005882:	4620      	mov	r0, r4
 8005884:	f000 fa84 	bl	8005d90 <_Bfree>
 8005888:	ee08 8a10 	vmov	s16, r8
 800588c:	9b07      	ldr	r3, [sp, #28]
 800588e:	1b9a      	subs	r2, r3, r6
 8005890:	d006      	beq.n	80058a0 <_dtoa_r+0x7a0>
 8005892:	ee18 1a10 	vmov	r1, s16
 8005896:	4620      	mov	r0, r4
 8005898:	f000 fbf2 	bl	8006080 <__pow5mult>
 800589c:	ee08 0a10 	vmov	s16, r0
 80058a0:	2101      	movs	r1, #1
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 fb2c 	bl	8005f00 <__i2b>
 80058a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	4606      	mov	r6, r0
 80058ae:	f340 8088 	ble.w	80059c2 <_dtoa_r+0x8c2>
 80058b2:	461a      	mov	r2, r3
 80058b4:	4601      	mov	r1, r0
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 fbe2 	bl	8006080 <__pow5mult>
 80058bc:	9b06      	ldr	r3, [sp, #24]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	4606      	mov	r6, r0
 80058c2:	f340 8081 	ble.w	80059c8 <_dtoa_r+0x8c8>
 80058c6:	f04f 0800 	mov.w	r8, #0
 80058ca:	6933      	ldr	r3, [r6, #16]
 80058cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80058d0:	6918      	ldr	r0, [r3, #16]
 80058d2:	f000 fac5 	bl	8005e60 <__hi0bits>
 80058d6:	f1c0 0020 	rsb	r0, r0, #32
 80058da:	9b05      	ldr	r3, [sp, #20]
 80058dc:	4418      	add	r0, r3
 80058de:	f010 001f 	ands.w	r0, r0, #31
 80058e2:	f000 8092 	beq.w	8005a0a <_dtoa_r+0x90a>
 80058e6:	f1c0 0320 	rsb	r3, r0, #32
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	f340 808a 	ble.w	8005a04 <_dtoa_r+0x904>
 80058f0:	f1c0 001c 	rsb	r0, r0, #28
 80058f4:	9b04      	ldr	r3, [sp, #16]
 80058f6:	4403      	add	r3, r0
 80058f8:	9304      	str	r3, [sp, #16]
 80058fa:	9b05      	ldr	r3, [sp, #20]
 80058fc:	4403      	add	r3, r0
 80058fe:	4405      	add	r5, r0
 8005900:	9305      	str	r3, [sp, #20]
 8005902:	9b04      	ldr	r3, [sp, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	dd07      	ble.n	8005918 <_dtoa_r+0x818>
 8005908:	ee18 1a10 	vmov	r1, s16
 800590c:	461a      	mov	r2, r3
 800590e:	4620      	mov	r0, r4
 8005910:	f000 fc10 	bl	8006134 <__lshift>
 8005914:	ee08 0a10 	vmov	s16, r0
 8005918:	9b05      	ldr	r3, [sp, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	dd05      	ble.n	800592a <_dtoa_r+0x82a>
 800591e:	4631      	mov	r1, r6
 8005920:	461a      	mov	r2, r3
 8005922:	4620      	mov	r0, r4
 8005924:	f000 fc06 	bl	8006134 <__lshift>
 8005928:	4606      	mov	r6, r0
 800592a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d06e      	beq.n	8005a0e <_dtoa_r+0x90e>
 8005930:	ee18 0a10 	vmov	r0, s16
 8005934:	4631      	mov	r1, r6
 8005936:	f000 fc6d 	bl	8006214 <__mcmp>
 800593a:	2800      	cmp	r0, #0
 800593c:	da67      	bge.n	8005a0e <_dtoa_r+0x90e>
 800593e:	9b00      	ldr	r3, [sp, #0]
 8005940:	3b01      	subs	r3, #1
 8005942:	ee18 1a10 	vmov	r1, s16
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	220a      	movs	r2, #10
 800594a:	2300      	movs	r3, #0
 800594c:	4620      	mov	r0, r4
 800594e:	f000 fa41 	bl	8005dd4 <__multadd>
 8005952:	9b08      	ldr	r3, [sp, #32]
 8005954:	ee08 0a10 	vmov	s16, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 81b1 	beq.w	8005cc0 <_dtoa_r+0xbc0>
 800595e:	2300      	movs	r3, #0
 8005960:	4639      	mov	r1, r7
 8005962:	220a      	movs	r2, #10
 8005964:	4620      	mov	r0, r4
 8005966:	f000 fa35 	bl	8005dd4 <__multadd>
 800596a:	9b02      	ldr	r3, [sp, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	4607      	mov	r7, r0
 8005970:	f300 808e 	bgt.w	8005a90 <_dtoa_r+0x990>
 8005974:	9b06      	ldr	r3, [sp, #24]
 8005976:	2b02      	cmp	r3, #2
 8005978:	dc51      	bgt.n	8005a1e <_dtoa_r+0x91e>
 800597a:	e089      	b.n	8005a90 <_dtoa_r+0x990>
 800597c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800597e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005982:	e74b      	b.n	800581c <_dtoa_r+0x71c>
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	1e5e      	subs	r6, r3, #1
 8005988:	9b07      	ldr	r3, [sp, #28]
 800598a:	42b3      	cmp	r3, r6
 800598c:	bfbf      	itttt	lt
 800598e:	9b07      	ldrlt	r3, [sp, #28]
 8005990:	9607      	strlt	r6, [sp, #28]
 8005992:	1af2      	sublt	r2, r6, r3
 8005994:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005996:	bfb6      	itet	lt
 8005998:	189b      	addlt	r3, r3, r2
 800599a:	1b9e      	subge	r6, r3, r6
 800599c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	bfb8      	it	lt
 80059a2:	2600      	movlt	r6, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bfb7      	itett	lt
 80059a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80059ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80059b0:	1a9d      	sublt	r5, r3, r2
 80059b2:	2300      	movlt	r3, #0
 80059b4:	e734      	b.n	8005820 <_dtoa_r+0x720>
 80059b6:	9e07      	ldr	r6, [sp, #28]
 80059b8:	9d04      	ldr	r5, [sp, #16]
 80059ba:	9f08      	ldr	r7, [sp, #32]
 80059bc:	e73b      	b.n	8005836 <_dtoa_r+0x736>
 80059be:	9a07      	ldr	r2, [sp, #28]
 80059c0:	e767      	b.n	8005892 <_dtoa_r+0x792>
 80059c2:	9b06      	ldr	r3, [sp, #24]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	dc18      	bgt.n	80059fa <_dtoa_r+0x8fa>
 80059c8:	f1ba 0f00 	cmp.w	sl, #0
 80059cc:	d115      	bne.n	80059fa <_dtoa_r+0x8fa>
 80059ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059d2:	b993      	cbnz	r3, 80059fa <_dtoa_r+0x8fa>
 80059d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80059d8:	0d1b      	lsrs	r3, r3, #20
 80059da:	051b      	lsls	r3, r3, #20
 80059dc:	b183      	cbz	r3, 8005a00 <_dtoa_r+0x900>
 80059de:	9b04      	ldr	r3, [sp, #16]
 80059e0:	3301      	adds	r3, #1
 80059e2:	9304      	str	r3, [sp, #16]
 80059e4:	9b05      	ldr	r3, [sp, #20]
 80059e6:	3301      	adds	r3, #1
 80059e8:	9305      	str	r3, [sp, #20]
 80059ea:	f04f 0801 	mov.w	r8, #1
 80059ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f47f af6a 	bne.w	80058ca <_dtoa_r+0x7ca>
 80059f6:	2001      	movs	r0, #1
 80059f8:	e76f      	b.n	80058da <_dtoa_r+0x7da>
 80059fa:	f04f 0800 	mov.w	r8, #0
 80059fe:	e7f6      	b.n	80059ee <_dtoa_r+0x8ee>
 8005a00:	4698      	mov	r8, r3
 8005a02:	e7f4      	b.n	80059ee <_dtoa_r+0x8ee>
 8005a04:	f43f af7d 	beq.w	8005902 <_dtoa_r+0x802>
 8005a08:	4618      	mov	r0, r3
 8005a0a:	301c      	adds	r0, #28
 8005a0c:	e772      	b.n	80058f4 <_dtoa_r+0x7f4>
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dc37      	bgt.n	8005a84 <_dtoa_r+0x984>
 8005a14:	9b06      	ldr	r3, [sp, #24]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	dd34      	ble.n	8005a84 <_dtoa_r+0x984>
 8005a1a:	9b03      	ldr	r3, [sp, #12]
 8005a1c:	9302      	str	r3, [sp, #8]
 8005a1e:	9b02      	ldr	r3, [sp, #8]
 8005a20:	b96b      	cbnz	r3, 8005a3e <_dtoa_r+0x93e>
 8005a22:	4631      	mov	r1, r6
 8005a24:	2205      	movs	r2, #5
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 f9d4 	bl	8005dd4 <__multadd>
 8005a2c:	4601      	mov	r1, r0
 8005a2e:	4606      	mov	r6, r0
 8005a30:	ee18 0a10 	vmov	r0, s16
 8005a34:	f000 fbee 	bl	8006214 <__mcmp>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f73f adbb 	bgt.w	80055b4 <_dtoa_r+0x4b4>
 8005a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a40:	9d01      	ldr	r5, [sp, #4]
 8005a42:	43db      	mvns	r3, r3
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	f04f 0800 	mov.w	r8, #0
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f000 f99f 	bl	8005d90 <_Bfree>
 8005a52:	2f00      	cmp	r7, #0
 8005a54:	f43f aea4 	beq.w	80057a0 <_dtoa_r+0x6a0>
 8005a58:	f1b8 0f00 	cmp.w	r8, #0
 8005a5c:	d005      	beq.n	8005a6a <_dtoa_r+0x96a>
 8005a5e:	45b8      	cmp	r8, r7
 8005a60:	d003      	beq.n	8005a6a <_dtoa_r+0x96a>
 8005a62:	4641      	mov	r1, r8
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 f993 	bl	8005d90 <_Bfree>
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 f98f 	bl	8005d90 <_Bfree>
 8005a72:	e695      	b.n	80057a0 <_dtoa_r+0x6a0>
 8005a74:	2600      	movs	r6, #0
 8005a76:	4637      	mov	r7, r6
 8005a78:	e7e1      	b.n	8005a3e <_dtoa_r+0x93e>
 8005a7a:	9700      	str	r7, [sp, #0]
 8005a7c:	4637      	mov	r7, r6
 8005a7e:	e599      	b.n	80055b4 <_dtoa_r+0x4b4>
 8005a80:	40240000 	.word	0x40240000
 8005a84:	9b08      	ldr	r3, [sp, #32]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80ca 	beq.w	8005c20 <_dtoa_r+0xb20>
 8005a8c:	9b03      	ldr	r3, [sp, #12]
 8005a8e:	9302      	str	r3, [sp, #8]
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	dd05      	ble.n	8005aa0 <_dtoa_r+0x9a0>
 8005a94:	4639      	mov	r1, r7
 8005a96:	462a      	mov	r2, r5
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 fb4b 	bl	8006134 <__lshift>
 8005a9e:	4607      	mov	r7, r0
 8005aa0:	f1b8 0f00 	cmp.w	r8, #0
 8005aa4:	d05b      	beq.n	8005b5e <_dtoa_r+0xa5e>
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 f931 	bl	8005d10 <_Balloc>
 8005aae:	4605      	mov	r5, r0
 8005ab0:	b928      	cbnz	r0, 8005abe <_dtoa_r+0x9be>
 8005ab2:	4b87      	ldr	r3, [pc, #540]	; (8005cd0 <_dtoa_r+0xbd0>)
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005aba:	f7ff bb3b 	b.w	8005134 <_dtoa_r+0x34>
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	3202      	adds	r2, #2
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	f107 010c 	add.w	r1, r7, #12
 8005ac8:	300c      	adds	r0, #12
 8005aca:	f000 f913 	bl	8005cf4 <memcpy>
 8005ace:	2201      	movs	r2, #1
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 fb2e 	bl	8006134 <__lshift>
 8005ad8:	9b01      	ldr	r3, [sp, #4]
 8005ada:	f103 0901 	add.w	r9, r3, #1
 8005ade:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	9305      	str	r3, [sp, #20]
 8005ae6:	f00a 0301 	and.w	r3, sl, #1
 8005aea:	46b8      	mov	r8, r7
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	4607      	mov	r7, r0
 8005af0:	4631      	mov	r1, r6
 8005af2:	ee18 0a10 	vmov	r0, s16
 8005af6:	f7ff fa75 	bl	8004fe4 <quorem>
 8005afa:	4641      	mov	r1, r8
 8005afc:	9002      	str	r0, [sp, #8]
 8005afe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005b02:	ee18 0a10 	vmov	r0, s16
 8005b06:	f000 fb85 	bl	8006214 <__mcmp>
 8005b0a:	463a      	mov	r2, r7
 8005b0c:	9003      	str	r0, [sp, #12]
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 fb9b 	bl	800624c <__mdiff>
 8005b16:	68c2      	ldr	r2, [r0, #12]
 8005b18:	f109 3bff 	add.w	fp, r9, #4294967295
 8005b1c:	4605      	mov	r5, r0
 8005b1e:	bb02      	cbnz	r2, 8005b62 <_dtoa_r+0xa62>
 8005b20:	4601      	mov	r1, r0
 8005b22:	ee18 0a10 	vmov	r0, s16
 8005b26:	f000 fb75 	bl	8006214 <__mcmp>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	4620      	mov	r0, r4
 8005b30:	9207      	str	r2, [sp, #28]
 8005b32:	f000 f92d 	bl	8005d90 <_Bfree>
 8005b36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005b3a:	ea43 0102 	orr.w	r1, r3, r2
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	430b      	orrs	r3, r1
 8005b42:	464d      	mov	r5, r9
 8005b44:	d10f      	bne.n	8005b66 <_dtoa_r+0xa66>
 8005b46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005b4a:	d02a      	beq.n	8005ba2 <_dtoa_r+0xaa2>
 8005b4c:	9b03      	ldr	r3, [sp, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dd02      	ble.n	8005b58 <_dtoa_r+0xa58>
 8005b52:	9b02      	ldr	r3, [sp, #8]
 8005b54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005b58:	f88b a000 	strb.w	sl, [fp]
 8005b5c:	e775      	b.n	8005a4a <_dtoa_r+0x94a>
 8005b5e:	4638      	mov	r0, r7
 8005b60:	e7ba      	b.n	8005ad8 <_dtoa_r+0x9d8>
 8005b62:	2201      	movs	r2, #1
 8005b64:	e7e2      	b.n	8005b2c <_dtoa_r+0xa2c>
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	db04      	blt.n	8005b76 <_dtoa_r+0xa76>
 8005b6c:	9906      	ldr	r1, [sp, #24]
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	9904      	ldr	r1, [sp, #16]
 8005b72:	430b      	orrs	r3, r1
 8005b74:	d122      	bne.n	8005bbc <_dtoa_r+0xabc>
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	ddee      	ble.n	8005b58 <_dtoa_r+0xa58>
 8005b7a:	ee18 1a10 	vmov	r1, s16
 8005b7e:	2201      	movs	r2, #1
 8005b80:	4620      	mov	r0, r4
 8005b82:	f000 fad7 	bl	8006134 <__lshift>
 8005b86:	4631      	mov	r1, r6
 8005b88:	ee08 0a10 	vmov	s16, r0
 8005b8c:	f000 fb42 	bl	8006214 <__mcmp>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	dc03      	bgt.n	8005b9c <_dtoa_r+0xa9c>
 8005b94:	d1e0      	bne.n	8005b58 <_dtoa_r+0xa58>
 8005b96:	f01a 0f01 	tst.w	sl, #1
 8005b9a:	d0dd      	beq.n	8005b58 <_dtoa_r+0xa58>
 8005b9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ba0:	d1d7      	bne.n	8005b52 <_dtoa_r+0xa52>
 8005ba2:	2339      	movs	r3, #57	; 0x39
 8005ba4:	f88b 3000 	strb.w	r3, [fp]
 8005ba8:	462b      	mov	r3, r5
 8005baa:	461d      	mov	r5, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005bb2:	2a39      	cmp	r2, #57	; 0x39
 8005bb4:	d071      	beq.n	8005c9a <_dtoa_r+0xb9a>
 8005bb6:	3201      	adds	r2, #1
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	e746      	b.n	8005a4a <_dtoa_r+0x94a>
 8005bbc:	2a00      	cmp	r2, #0
 8005bbe:	dd07      	ble.n	8005bd0 <_dtoa_r+0xad0>
 8005bc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005bc4:	d0ed      	beq.n	8005ba2 <_dtoa_r+0xaa2>
 8005bc6:	f10a 0301 	add.w	r3, sl, #1
 8005bca:	f88b 3000 	strb.w	r3, [fp]
 8005bce:	e73c      	b.n	8005a4a <_dtoa_r+0x94a>
 8005bd0:	9b05      	ldr	r3, [sp, #20]
 8005bd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005bd6:	4599      	cmp	r9, r3
 8005bd8:	d047      	beq.n	8005c6a <_dtoa_r+0xb6a>
 8005bda:	ee18 1a10 	vmov	r1, s16
 8005bde:	2300      	movs	r3, #0
 8005be0:	220a      	movs	r2, #10
 8005be2:	4620      	mov	r0, r4
 8005be4:	f000 f8f6 	bl	8005dd4 <__multadd>
 8005be8:	45b8      	cmp	r8, r7
 8005bea:	ee08 0a10 	vmov	s16, r0
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	f04f 020a 	mov.w	r2, #10
 8005bf6:	4641      	mov	r1, r8
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	d106      	bne.n	8005c0a <_dtoa_r+0xb0a>
 8005bfc:	f000 f8ea 	bl	8005dd4 <__multadd>
 8005c00:	4680      	mov	r8, r0
 8005c02:	4607      	mov	r7, r0
 8005c04:	f109 0901 	add.w	r9, r9, #1
 8005c08:	e772      	b.n	8005af0 <_dtoa_r+0x9f0>
 8005c0a:	f000 f8e3 	bl	8005dd4 <__multadd>
 8005c0e:	4639      	mov	r1, r7
 8005c10:	4680      	mov	r8, r0
 8005c12:	2300      	movs	r3, #0
 8005c14:	220a      	movs	r2, #10
 8005c16:	4620      	mov	r0, r4
 8005c18:	f000 f8dc 	bl	8005dd4 <__multadd>
 8005c1c:	4607      	mov	r7, r0
 8005c1e:	e7f1      	b.n	8005c04 <_dtoa_r+0xb04>
 8005c20:	9b03      	ldr	r3, [sp, #12]
 8005c22:	9302      	str	r3, [sp, #8]
 8005c24:	9d01      	ldr	r5, [sp, #4]
 8005c26:	ee18 0a10 	vmov	r0, s16
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	f7ff f9da 	bl	8004fe4 <quorem>
 8005c30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c34:	9b01      	ldr	r3, [sp, #4]
 8005c36:	f805 ab01 	strb.w	sl, [r5], #1
 8005c3a:	1aea      	subs	r2, r5, r3
 8005c3c:	9b02      	ldr	r3, [sp, #8]
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	dd09      	ble.n	8005c56 <_dtoa_r+0xb56>
 8005c42:	ee18 1a10 	vmov	r1, s16
 8005c46:	2300      	movs	r3, #0
 8005c48:	220a      	movs	r2, #10
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 f8c2 	bl	8005dd4 <__multadd>
 8005c50:	ee08 0a10 	vmov	s16, r0
 8005c54:	e7e7      	b.n	8005c26 <_dtoa_r+0xb26>
 8005c56:	9b02      	ldr	r3, [sp, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bfc8      	it	gt
 8005c5c:	461d      	movgt	r5, r3
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	bfd8      	it	le
 8005c62:	2501      	movle	r5, #1
 8005c64:	441d      	add	r5, r3
 8005c66:	f04f 0800 	mov.w	r8, #0
 8005c6a:	ee18 1a10 	vmov	r1, s16
 8005c6e:	2201      	movs	r2, #1
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 fa5f 	bl	8006134 <__lshift>
 8005c76:	4631      	mov	r1, r6
 8005c78:	ee08 0a10 	vmov	s16, r0
 8005c7c:	f000 faca 	bl	8006214 <__mcmp>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	dc91      	bgt.n	8005ba8 <_dtoa_r+0xaa8>
 8005c84:	d102      	bne.n	8005c8c <_dtoa_r+0xb8c>
 8005c86:	f01a 0f01 	tst.w	sl, #1
 8005c8a:	d18d      	bne.n	8005ba8 <_dtoa_r+0xaa8>
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	461d      	mov	r5, r3
 8005c90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c94:	2a30      	cmp	r2, #48	; 0x30
 8005c96:	d0fa      	beq.n	8005c8e <_dtoa_r+0xb8e>
 8005c98:	e6d7      	b.n	8005a4a <_dtoa_r+0x94a>
 8005c9a:	9a01      	ldr	r2, [sp, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d184      	bne.n	8005baa <_dtoa_r+0xaaa>
 8005ca0:	9b00      	ldr	r3, [sp, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	2331      	movs	r3, #49	; 0x31
 8005ca8:	7013      	strb	r3, [r2, #0]
 8005caa:	e6ce      	b.n	8005a4a <_dtoa_r+0x94a>
 8005cac:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <_dtoa_r+0xbd4>)
 8005cae:	f7ff ba95 	b.w	80051dc <_dtoa_r+0xdc>
 8005cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f aa6e 	bne.w	8005196 <_dtoa_r+0x96>
 8005cba:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <_dtoa_r+0xbd8>)
 8005cbc:	f7ff ba8e 	b.w	80051dc <_dtoa_r+0xdc>
 8005cc0:	9b02      	ldr	r3, [sp, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dcae      	bgt.n	8005c24 <_dtoa_r+0xb24>
 8005cc6:	9b06      	ldr	r3, [sp, #24]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	f73f aea8 	bgt.w	8005a1e <_dtoa_r+0x91e>
 8005cce:	e7a9      	b.n	8005c24 <_dtoa_r+0xb24>
 8005cd0:	0800764f 	.word	0x0800764f
 8005cd4:	080075ac 	.word	0x080075ac
 8005cd8:	080075d0 	.word	0x080075d0

08005cdc <_localeconv_r>:
 8005cdc:	4800      	ldr	r0, [pc, #0]	; (8005ce0 <_localeconv_r+0x4>)
 8005cde:	4770      	bx	lr
 8005ce0:	20000164 	.word	0x20000164

08005ce4 <malloc>:
 8005ce4:	4b02      	ldr	r3, [pc, #8]	; (8005cf0 <malloc+0xc>)
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	f000 bc17 	b.w	800651c <_malloc_r>
 8005cee:	bf00      	nop
 8005cf0:	20000010 	.word	0x20000010

08005cf4 <memcpy>:
 8005cf4:	440a      	add	r2, r1
 8005cf6:	4291      	cmp	r1, r2
 8005cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cfc:	d100      	bne.n	8005d00 <memcpy+0xc>
 8005cfe:	4770      	bx	lr
 8005d00:	b510      	push	{r4, lr}
 8005d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d0a:	4291      	cmp	r1, r2
 8005d0c:	d1f9      	bne.n	8005d02 <memcpy+0xe>
 8005d0e:	bd10      	pop	{r4, pc}

08005d10 <_Balloc>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d14:	4604      	mov	r4, r0
 8005d16:	460d      	mov	r5, r1
 8005d18:	b976      	cbnz	r6, 8005d38 <_Balloc+0x28>
 8005d1a:	2010      	movs	r0, #16
 8005d1c:	f7ff ffe2 	bl	8005ce4 <malloc>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6260      	str	r0, [r4, #36]	; 0x24
 8005d24:	b920      	cbnz	r0, 8005d30 <_Balloc+0x20>
 8005d26:	4b18      	ldr	r3, [pc, #96]	; (8005d88 <_Balloc+0x78>)
 8005d28:	4818      	ldr	r0, [pc, #96]	; (8005d8c <_Balloc+0x7c>)
 8005d2a:	2166      	movs	r1, #102	; 0x66
 8005d2c:	f000 fdd6 	bl	80068dc <__assert_func>
 8005d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d34:	6006      	str	r6, [r0, #0]
 8005d36:	60c6      	str	r6, [r0, #12]
 8005d38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d3a:	68f3      	ldr	r3, [r6, #12]
 8005d3c:	b183      	cbz	r3, 8005d60 <_Balloc+0x50>
 8005d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d46:	b9b8      	cbnz	r0, 8005d78 <_Balloc+0x68>
 8005d48:	2101      	movs	r1, #1
 8005d4a:	fa01 f605 	lsl.w	r6, r1, r5
 8005d4e:	1d72      	adds	r2, r6, #5
 8005d50:	0092      	lsls	r2, r2, #2
 8005d52:	4620      	mov	r0, r4
 8005d54:	f000 fb60 	bl	8006418 <_calloc_r>
 8005d58:	b160      	cbz	r0, 8005d74 <_Balloc+0x64>
 8005d5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d5e:	e00e      	b.n	8005d7e <_Balloc+0x6e>
 8005d60:	2221      	movs	r2, #33	; 0x21
 8005d62:	2104      	movs	r1, #4
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 fb57 	bl	8006418 <_calloc_r>
 8005d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d6c:	60f0      	str	r0, [r6, #12]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e4      	bne.n	8005d3e <_Balloc+0x2e>
 8005d74:	2000      	movs	r0, #0
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	6802      	ldr	r2, [r0, #0]
 8005d7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d84:	e7f7      	b.n	8005d76 <_Balloc+0x66>
 8005d86:	bf00      	nop
 8005d88:	080075dd 	.word	0x080075dd
 8005d8c:	08007660 	.word	0x08007660

08005d90 <_Bfree>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d94:	4605      	mov	r5, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	b976      	cbnz	r6, 8005db8 <_Bfree+0x28>
 8005d9a:	2010      	movs	r0, #16
 8005d9c:	f7ff ffa2 	bl	8005ce4 <malloc>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6268      	str	r0, [r5, #36]	; 0x24
 8005da4:	b920      	cbnz	r0, 8005db0 <_Bfree+0x20>
 8005da6:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <_Bfree+0x3c>)
 8005da8:	4809      	ldr	r0, [pc, #36]	; (8005dd0 <_Bfree+0x40>)
 8005daa:	218a      	movs	r1, #138	; 0x8a
 8005dac:	f000 fd96 	bl	80068dc <__assert_func>
 8005db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005db4:	6006      	str	r6, [r0, #0]
 8005db6:	60c6      	str	r6, [r0, #12]
 8005db8:	b13c      	cbz	r4, 8005dca <_Bfree+0x3a>
 8005dba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005dbc:	6862      	ldr	r2, [r4, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dc4:	6021      	str	r1, [r4, #0]
 8005dc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005dca:	bd70      	pop	{r4, r5, r6, pc}
 8005dcc:	080075dd 	.word	0x080075dd
 8005dd0:	08007660 	.word	0x08007660

08005dd4 <__multadd>:
 8005dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd8:	690d      	ldr	r5, [r1, #16]
 8005dda:	4607      	mov	r7, r0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	461e      	mov	r6, r3
 8005de0:	f101 0c14 	add.w	ip, r1, #20
 8005de4:	2000      	movs	r0, #0
 8005de6:	f8dc 3000 	ldr.w	r3, [ip]
 8005dea:	b299      	uxth	r1, r3
 8005dec:	fb02 6101 	mla	r1, r2, r1, r6
 8005df0:	0c1e      	lsrs	r6, r3, #16
 8005df2:	0c0b      	lsrs	r3, r1, #16
 8005df4:	fb02 3306 	mla	r3, r2, r6, r3
 8005df8:	b289      	uxth	r1, r1
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e00:	4285      	cmp	r5, r0
 8005e02:	f84c 1b04 	str.w	r1, [ip], #4
 8005e06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e0a:	dcec      	bgt.n	8005de6 <__multadd+0x12>
 8005e0c:	b30e      	cbz	r6, 8005e52 <__multadd+0x7e>
 8005e0e:	68a3      	ldr	r3, [r4, #8]
 8005e10:	42ab      	cmp	r3, r5
 8005e12:	dc19      	bgt.n	8005e48 <__multadd+0x74>
 8005e14:	6861      	ldr	r1, [r4, #4]
 8005e16:	4638      	mov	r0, r7
 8005e18:	3101      	adds	r1, #1
 8005e1a:	f7ff ff79 	bl	8005d10 <_Balloc>
 8005e1e:	4680      	mov	r8, r0
 8005e20:	b928      	cbnz	r0, 8005e2e <__multadd+0x5a>
 8005e22:	4602      	mov	r2, r0
 8005e24:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <__multadd+0x84>)
 8005e26:	480d      	ldr	r0, [pc, #52]	; (8005e5c <__multadd+0x88>)
 8005e28:	21b5      	movs	r1, #181	; 0xb5
 8005e2a:	f000 fd57 	bl	80068dc <__assert_func>
 8005e2e:	6922      	ldr	r2, [r4, #16]
 8005e30:	3202      	adds	r2, #2
 8005e32:	f104 010c 	add.w	r1, r4, #12
 8005e36:	0092      	lsls	r2, r2, #2
 8005e38:	300c      	adds	r0, #12
 8005e3a:	f7ff ff5b 	bl	8005cf4 <memcpy>
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4638      	mov	r0, r7
 8005e42:	f7ff ffa5 	bl	8005d90 <_Bfree>
 8005e46:	4644      	mov	r4, r8
 8005e48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	615e      	str	r6, [r3, #20]
 8005e50:	6125      	str	r5, [r4, #16]
 8005e52:	4620      	mov	r0, r4
 8005e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e58:	0800764f 	.word	0x0800764f
 8005e5c:	08007660 	.word	0x08007660

08005e60 <__hi0bits>:
 8005e60:	0c03      	lsrs	r3, r0, #16
 8005e62:	041b      	lsls	r3, r3, #16
 8005e64:	b9d3      	cbnz	r3, 8005e9c <__hi0bits+0x3c>
 8005e66:	0400      	lsls	r0, r0, #16
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e6e:	bf04      	itt	eq
 8005e70:	0200      	lsleq	r0, r0, #8
 8005e72:	3308      	addeq	r3, #8
 8005e74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e78:	bf04      	itt	eq
 8005e7a:	0100      	lsleq	r0, r0, #4
 8005e7c:	3304      	addeq	r3, #4
 8005e7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e82:	bf04      	itt	eq
 8005e84:	0080      	lsleq	r0, r0, #2
 8005e86:	3302      	addeq	r3, #2
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	db05      	blt.n	8005e98 <__hi0bits+0x38>
 8005e8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e90:	f103 0301 	add.w	r3, r3, #1
 8005e94:	bf08      	it	eq
 8005e96:	2320      	moveq	r3, #32
 8005e98:	4618      	mov	r0, r3
 8005e9a:	4770      	bx	lr
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e7e4      	b.n	8005e6a <__hi0bits+0xa>

08005ea0 <__lo0bits>:
 8005ea0:	6803      	ldr	r3, [r0, #0]
 8005ea2:	f013 0207 	ands.w	r2, r3, #7
 8005ea6:	4601      	mov	r1, r0
 8005ea8:	d00b      	beq.n	8005ec2 <__lo0bits+0x22>
 8005eaa:	07da      	lsls	r2, r3, #31
 8005eac:	d423      	bmi.n	8005ef6 <__lo0bits+0x56>
 8005eae:	0798      	lsls	r0, r3, #30
 8005eb0:	bf49      	itett	mi
 8005eb2:	085b      	lsrmi	r3, r3, #1
 8005eb4:	089b      	lsrpl	r3, r3, #2
 8005eb6:	2001      	movmi	r0, #1
 8005eb8:	600b      	strmi	r3, [r1, #0]
 8005eba:	bf5c      	itt	pl
 8005ebc:	600b      	strpl	r3, [r1, #0]
 8005ebe:	2002      	movpl	r0, #2
 8005ec0:	4770      	bx	lr
 8005ec2:	b298      	uxth	r0, r3
 8005ec4:	b9a8      	cbnz	r0, 8005ef2 <__lo0bits+0x52>
 8005ec6:	0c1b      	lsrs	r3, r3, #16
 8005ec8:	2010      	movs	r0, #16
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	b90a      	cbnz	r2, 8005ed2 <__lo0bits+0x32>
 8005ece:	3008      	adds	r0, #8
 8005ed0:	0a1b      	lsrs	r3, r3, #8
 8005ed2:	071a      	lsls	r2, r3, #28
 8005ed4:	bf04      	itt	eq
 8005ed6:	091b      	lsreq	r3, r3, #4
 8005ed8:	3004      	addeq	r0, #4
 8005eda:	079a      	lsls	r2, r3, #30
 8005edc:	bf04      	itt	eq
 8005ede:	089b      	lsreq	r3, r3, #2
 8005ee0:	3002      	addeq	r0, #2
 8005ee2:	07da      	lsls	r2, r3, #31
 8005ee4:	d403      	bmi.n	8005eee <__lo0bits+0x4e>
 8005ee6:	085b      	lsrs	r3, r3, #1
 8005ee8:	f100 0001 	add.w	r0, r0, #1
 8005eec:	d005      	beq.n	8005efa <__lo0bits+0x5a>
 8005eee:	600b      	str	r3, [r1, #0]
 8005ef0:	4770      	bx	lr
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	e7e9      	b.n	8005eca <__lo0bits+0x2a>
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	4770      	bx	lr
 8005efa:	2020      	movs	r0, #32
 8005efc:	4770      	bx	lr
	...

08005f00 <__i2b>:
 8005f00:	b510      	push	{r4, lr}
 8005f02:	460c      	mov	r4, r1
 8005f04:	2101      	movs	r1, #1
 8005f06:	f7ff ff03 	bl	8005d10 <_Balloc>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	b928      	cbnz	r0, 8005f1a <__i2b+0x1a>
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <__i2b+0x24>)
 8005f10:	4805      	ldr	r0, [pc, #20]	; (8005f28 <__i2b+0x28>)
 8005f12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f16:	f000 fce1 	bl	80068dc <__assert_func>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	6144      	str	r4, [r0, #20]
 8005f1e:	6103      	str	r3, [r0, #16]
 8005f20:	bd10      	pop	{r4, pc}
 8005f22:	bf00      	nop
 8005f24:	0800764f 	.word	0x0800764f
 8005f28:	08007660 	.word	0x08007660

08005f2c <__multiply>:
 8005f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f30:	4691      	mov	r9, r2
 8005f32:	690a      	ldr	r2, [r1, #16]
 8005f34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	bfb8      	it	lt
 8005f3c:	460b      	movlt	r3, r1
 8005f3e:	460c      	mov	r4, r1
 8005f40:	bfbc      	itt	lt
 8005f42:	464c      	movlt	r4, r9
 8005f44:	4699      	movlt	r9, r3
 8005f46:	6927      	ldr	r7, [r4, #16]
 8005f48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f4c:	68a3      	ldr	r3, [r4, #8]
 8005f4e:	6861      	ldr	r1, [r4, #4]
 8005f50:	eb07 060a 	add.w	r6, r7, sl
 8005f54:	42b3      	cmp	r3, r6
 8005f56:	b085      	sub	sp, #20
 8005f58:	bfb8      	it	lt
 8005f5a:	3101      	addlt	r1, #1
 8005f5c:	f7ff fed8 	bl	8005d10 <_Balloc>
 8005f60:	b930      	cbnz	r0, 8005f70 <__multiply+0x44>
 8005f62:	4602      	mov	r2, r0
 8005f64:	4b44      	ldr	r3, [pc, #272]	; (8006078 <__multiply+0x14c>)
 8005f66:	4845      	ldr	r0, [pc, #276]	; (800607c <__multiply+0x150>)
 8005f68:	f240 115d 	movw	r1, #349	; 0x15d
 8005f6c:	f000 fcb6 	bl	80068dc <__assert_func>
 8005f70:	f100 0514 	add.w	r5, r0, #20
 8005f74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f78:	462b      	mov	r3, r5
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	4543      	cmp	r3, r8
 8005f7e:	d321      	bcc.n	8005fc4 <__multiply+0x98>
 8005f80:	f104 0314 	add.w	r3, r4, #20
 8005f84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f88:	f109 0314 	add.w	r3, r9, #20
 8005f8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f90:	9202      	str	r2, [sp, #8]
 8005f92:	1b3a      	subs	r2, r7, r4
 8005f94:	3a15      	subs	r2, #21
 8005f96:	f022 0203 	bic.w	r2, r2, #3
 8005f9a:	3204      	adds	r2, #4
 8005f9c:	f104 0115 	add.w	r1, r4, #21
 8005fa0:	428f      	cmp	r7, r1
 8005fa2:	bf38      	it	cc
 8005fa4:	2204      	movcc	r2, #4
 8005fa6:	9201      	str	r2, [sp, #4]
 8005fa8:	9a02      	ldr	r2, [sp, #8]
 8005faa:	9303      	str	r3, [sp, #12]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d80c      	bhi.n	8005fca <__multiply+0x9e>
 8005fb0:	2e00      	cmp	r6, #0
 8005fb2:	dd03      	ble.n	8005fbc <__multiply+0x90>
 8005fb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d05a      	beq.n	8006072 <__multiply+0x146>
 8005fbc:	6106      	str	r6, [r0, #16]
 8005fbe:	b005      	add	sp, #20
 8005fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc4:	f843 2b04 	str.w	r2, [r3], #4
 8005fc8:	e7d8      	b.n	8005f7c <__multiply+0x50>
 8005fca:	f8b3 a000 	ldrh.w	sl, [r3]
 8005fce:	f1ba 0f00 	cmp.w	sl, #0
 8005fd2:	d024      	beq.n	800601e <__multiply+0xf2>
 8005fd4:	f104 0e14 	add.w	lr, r4, #20
 8005fd8:	46a9      	mov	r9, r5
 8005fda:	f04f 0c00 	mov.w	ip, #0
 8005fde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005fe2:	f8d9 1000 	ldr.w	r1, [r9]
 8005fe6:	fa1f fb82 	uxth.w	fp, r2
 8005fea:	b289      	uxth	r1, r1
 8005fec:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ff0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005ff4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ff8:	4461      	add	r1, ip
 8005ffa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ffe:	fb0a c20b 	mla	r2, sl, fp, ip
 8006002:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006006:	b289      	uxth	r1, r1
 8006008:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800600c:	4577      	cmp	r7, lr
 800600e:	f849 1b04 	str.w	r1, [r9], #4
 8006012:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006016:	d8e2      	bhi.n	8005fde <__multiply+0xb2>
 8006018:	9a01      	ldr	r2, [sp, #4]
 800601a:	f845 c002 	str.w	ip, [r5, r2]
 800601e:	9a03      	ldr	r2, [sp, #12]
 8006020:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006024:	3304      	adds	r3, #4
 8006026:	f1b9 0f00 	cmp.w	r9, #0
 800602a:	d020      	beq.n	800606e <__multiply+0x142>
 800602c:	6829      	ldr	r1, [r5, #0]
 800602e:	f104 0c14 	add.w	ip, r4, #20
 8006032:	46ae      	mov	lr, r5
 8006034:	f04f 0a00 	mov.w	sl, #0
 8006038:	f8bc b000 	ldrh.w	fp, [ip]
 800603c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006040:	fb09 220b 	mla	r2, r9, fp, r2
 8006044:	4492      	add	sl, r2
 8006046:	b289      	uxth	r1, r1
 8006048:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800604c:	f84e 1b04 	str.w	r1, [lr], #4
 8006050:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006054:	f8be 1000 	ldrh.w	r1, [lr]
 8006058:	0c12      	lsrs	r2, r2, #16
 800605a:	fb09 1102 	mla	r1, r9, r2, r1
 800605e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006062:	4567      	cmp	r7, ip
 8006064:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006068:	d8e6      	bhi.n	8006038 <__multiply+0x10c>
 800606a:	9a01      	ldr	r2, [sp, #4]
 800606c:	50a9      	str	r1, [r5, r2]
 800606e:	3504      	adds	r5, #4
 8006070:	e79a      	b.n	8005fa8 <__multiply+0x7c>
 8006072:	3e01      	subs	r6, #1
 8006074:	e79c      	b.n	8005fb0 <__multiply+0x84>
 8006076:	bf00      	nop
 8006078:	0800764f 	.word	0x0800764f
 800607c:	08007660 	.word	0x08007660

08006080 <__pow5mult>:
 8006080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006084:	4615      	mov	r5, r2
 8006086:	f012 0203 	ands.w	r2, r2, #3
 800608a:	4606      	mov	r6, r0
 800608c:	460f      	mov	r7, r1
 800608e:	d007      	beq.n	80060a0 <__pow5mult+0x20>
 8006090:	4c25      	ldr	r4, [pc, #148]	; (8006128 <__pow5mult+0xa8>)
 8006092:	3a01      	subs	r2, #1
 8006094:	2300      	movs	r3, #0
 8006096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800609a:	f7ff fe9b 	bl	8005dd4 <__multadd>
 800609e:	4607      	mov	r7, r0
 80060a0:	10ad      	asrs	r5, r5, #2
 80060a2:	d03d      	beq.n	8006120 <__pow5mult+0xa0>
 80060a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060a6:	b97c      	cbnz	r4, 80060c8 <__pow5mult+0x48>
 80060a8:	2010      	movs	r0, #16
 80060aa:	f7ff fe1b 	bl	8005ce4 <malloc>
 80060ae:	4602      	mov	r2, r0
 80060b0:	6270      	str	r0, [r6, #36]	; 0x24
 80060b2:	b928      	cbnz	r0, 80060c0 <__pow5mult+0x40>
 80060b4:	4b1d      	ldr	r3, [pc, #116]	; (800612c <__pow5mult+0xac>)
 80060b6:	481e      	ldr	r0, [pc, #120]	; (8006130 <__pow5mult+0xb0>)
 80060b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80060bc:	f000 fc0e 	bl	80068dc <__assert_func>
 80060c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060c4:	6004      	str	r4, [r0, #0]
 80060c6:	60c4      	str	r4, [r0, #12]
 80060c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060d0:	b94c      	cbnz	r4, 80060e6 <__pow5mult+0x66>
 80060d2:	f240 2171 	movw	r1, #625	; 0x271
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7ff ff12 	bl	8005f00 <__i2b>
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c8 0008 	str.w	r0, [r8, #8]
 80060e2:	4604      	mov	r4, r0
 80060e4:	6003      	str	r3, [r0, #0]
 80060e6:	f04f 0900 	mov.w	r9, #0
 80060ea:	07eb      	lsls	r3, r5, #31
 80060ec:	d50a      	bpl.n	8006104 <__pow5mult+0x84>
 80060ee:	4639      	mov	r1, r7
 80060f0:	4622      	mov	r2, r4
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ff1a 	bl	8005f2c <__multiply>
 80060f8:	4639      	mov	r1, r7
 80060fa:	4680      	mov	r8, r0
 80060fc:	4630      	mov	r0, r6
 80060fe:	f7ff fe47 	bl	8005d90 <_Bfree>
 8006102:	4647      	mov	r7, r8
 8006104:	106d      	asrs	r5, r5, #1
 8006106:	d00b      	beq.n	8006120 <__pow5mult+0xa0>
 8006108:	6820      	ldr	r0, [r4, #0]
 800610a:	b938      	cbnz	r0, 800611c <__pow5mult+0x9c>
 800610c:	4622      	mov	r2, r4
 800610e:	4621      	mov	r1, r4
 8006110:	4630      	mov	r0, r6
 8006112:	f7ff ff0b 	bl	8005f2c <__multiply>
 8006116:	6020      	str	r0, [r4, #0]
 8006118:	f8c0 9000 	str.w	r9, [r0]
 800611c:	4604      	mov	r4, r0
 800611e:	e7e4      	b.n	80060ea <__pow5mult+0x6a>
 8006120:	4638      	mov	r0, r7
 8006122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006126:	bf00      	nop
 8006128:	080077b0 	.word	0x080077b0
 800612c:	080075dd 	.word	0x080075dd
 8006130:	08007660 	.word	0x08007660

08006134 <__lshift>:
 8006134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006138:	460c      	mov	r4, r1
 800613a:	6849      	ldr	r1, [r1, #4]
 800613c:	6923      	ldr	r3, [r4, #16]
 800613e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006142:	68a3      	ldr	r3, [r4, #8]
 8006144:	4607      	mov	r7, r0
 8006146:	4691      	mov	r9, r2
 8006148:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800614c:	f108 0601 	add.w	r6, r8, #1
 8006150:	42b3      	cmp	r3, r6
 8006152:	db0b      	blt.n	800616c <__lshift+0x38>
 8006154:	4638      	mov	r0, r7
 8006156:	f7ff fddb 	bl	8005d10 <_Balloc>
 800615a:	4605      	mov	r5, r0
 800615c:	b948      	cbnz	r0, 8006172 <__lshift+0x3e>
 800615e:	4602      	mov	r2, r0
 8006160:	4b2a      	ldr	r3, [pc, #168]	; (800620c <__lshift+0xd8>)
 8006162:	482b      	ldr	r0, [pc, #172]	; (8006210 <__lshift+0xdc>)
 8006164:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006168:	f000 fbb8 	bl	80068dc <__assert_func>
 800616c:	3101      	adds	r1, #1
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	e7ee      	b.n	8006150 <__lshift+0x1c>
 8006172:	2300      	movs	r3, #0
 8006174:	f100 0114 	add.w	r1, r0, #20
 8006178:	f100 0210 	add.w	r2, r0, #16
 800617c:	4618      	mov	r0, r3
 800617e:	4553      	cmp	r3, sl
 8006180:	db37      	blt.n	80061f2 <__lshift+0xbe>
 8006182:	6920      	ldr	r0, [r4, #16]
 8006184:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006188:	f104 0314 	add.w	r3, r4, #20
 800618c:	f019 091f 	ands.w	r9, r9, #31
 8006190:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006194:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006198:	d02f      	beq.n	80061fa <__lshift+0xc6>
 800619a:	f1c9 0e20 	rsb	lr, r9, #32
 800619e:	468a      	mov	sl, r1
 80061a0:	f04f 0c00 	mov.w	ip, #0
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	fa02 f209 	lsl.w	r2, r2, r9
 80061aa:	ea42 020c 	orr.w	r2, r2, ip
 80061ae:	f84a 2b04 	str.w	r2, [sl], #4
 80061b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061b6:	4298      	cmp	r0, r3
 80061b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80061bc:	d8f2      	bhi.n	80061a4 <__lshift+0x70>
 80061be:	1b03      	subs	r3, r0, r4
 80061c0:	3b15      	subs	r3, #21
 80061c2:	f023 0303 	bic.w	r3, r3, #3
 80061c6:	3304      	adds	r3, #4
 80061c8:	f104 0215 	add.w	r2, r4, #21
 80061cc:	4290      	cmp	r0, r2
 80061ce:	bf38      	it	cc
 80061d0:	2304      	movcc	r3, #4
 80061d2:	f841 c003 	str.w	ip, [r1, r3]
 80061d6:	f1bc 0f00 	cmp.w	ip, #0
 80061da:	d001      	beq.n	80061e0 <__lshift+0xac>
 80061dc:	f108 0602 	add.w	r6, r8, #2
 80061e0:	3e01      	subs	r6, #1
 80061e2:	4638      	mov	r0, r7
 80061e4:	612e      	str	r6, [r5, #16]
 80061e6:	4621      	mov	r1, r4
 80061e8:	f7ff fdd2 	bl	8005d90 <_Bfree>
 80061ec:	4628      	mov	r0, r5
 80061ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80061f6:	3301      	adds	r3, #1
 80061f8:	e7c1      	b.n	800617e <__lshift+0x4a>
 80061fa:	3904      	subs	r1, #4
 80061fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006200:	f841 2f04 	str.w	r2, [r1, #4]!
 8006204:	4298      	cmp	r0, r3
 8006206:	d8f9      	bhi.n	80061fc <__lshift+0xc8>
 8006208:	e7ea      	b.n	80061e0 <__lshift+0xac>
 800620a:	bf00      	nop
 800620c:	0800764f 	.word	0x0800764f
 8006210:	08007660 	.word	0x08007660

08006214 <__mcmp>:
 8006214:	b530      	push	{r4, r5, lr}
 8006216:	6902      	ldr	r2, [r0, #16]
 8006218:	690c      	ldr	r4, [r1, #16]
 800621a:	1b12      	subs	r2, r2, r4
 800621c:	d10e      	bne.n	800623c <__mcmp+0x28>
 800621e:	f100 0314 	add.w	r3, r0, #20
 8006222:	3114      	adds	r1, #20
 8006224:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006228:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800622c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006230:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006234:	42a5      	cmp	r5, r4
 8006236:	d003      	beq.n	8006240 <__mcmp+0x2c>
 8006238:	d305      	bcc.n	8006246 <__mcmp+0x32>
 800623a:	2201      	movs	r2, #1
 800623c:	4610      	mov	r0, r2
 800623e:	bd30      	pop	{r4, r5, pc}
 8006240:	4283      	cmp	r3, r0
 8006242:	d3f3      	bcc.n	800622c <__mcmp+0x18>
 8006244:	e7fa      	b.n	800623c <__mcmp+0x28>
 8006246:	f04f 32ff 	mov.w	r2, #4294967295
 800624a:	e7f7      	b.n	800623c <__mcmp+0x28>

0800624c <__mdiff>:
 800624c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	460c      	mov	r4, r1
 8006252:	4606      	mov	r6, r0
 8006254:	4611      	mov	r1, r2
 8006256:	4620      	mov	r0, r4
 8006258:	4690      	mov	r8, r2
 800625a:	f7ff ffdb 	bl	8006214 <__mcmp>
 800625e:	1e05      	subs	r5, r0, #0
 8006260:	d110      	bne.n	8006284 <__mdiff+0x38>
 8006262:	4629      	mov	r1, r5
 8006264:	4630      	mov	r0, r6
 8006266:	f7ff fd53 	bl	8005d10 <_Balloc>
 800626a:	b930      	cbnz	r0, 800627a <__mdiff+0x2e>
 800626c:	4b3a      	ldr	r3, [pc, #232]	; (8006358 <__mdiff+0x10c>)
 800626e:	4602      	mov	r2, r0
 8006270:	f240 2132 	movw	r1, #562	; 0x232
 8006274:	4839      	ldr	r0, [pc, #228]	; (800635c <__mdiff+0x110>)
 8006276:	f000 fb31 	bl	80068dc <__assert_func>
 800627a:	2301      	movs	r3, #1
 800627c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006284:	bfa4      	itt	ge
 8006286:	4643      	movge	r3, r8
 8006288:	46a0      	movge	r8, r4
 800628a:	4630      	mov	r0, r6
 800628c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006290:	bfa6      	itte	ge
 8006292:	461c      	movge	r4, r3
 8006294:	2500      	movge	r5, #0
 8006296:	2501      	movlt	r5, #1
 8006298:	f7ff fd3a 	bl	8005d10 <_Balloc>
 800629c:	b920      	cbnz	r0, 80062a8 <__mdiff+0x5c>
 800629e:	4b2e      	ldr	r3, [pc, #184]	; (8006358 <__mdiff+0x10c>)
 80062a0:	4602      	mov	r2, r0
 80062a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80062a6:	e7e5      	b.n	8006274 <__mdiff+0x28>
 80062a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80062ac:	6926      	ldr	r6, [r4, #16]
 80062ae:	60c5      	str	r5, [r0, #12]
 80062b0:	f104 0914 	add.w	r9, r4, #20
 80062b4:	f108 0514 	add.w	r5, r8, #20
 80062b8:	f100 0e14 	add.w	lr, r0, #20
 80062bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80062c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062c4:	f108 0210 	add.w	r2, r8, #16
 80062c8:	46f2      	mov	sl, lr
 80062ca:	2100      	movs	r1, #0
 80062cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80062d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80062d4:	fa1f f883 	uxth.w	r8, r3
 80062d8:	fa11 f18b 	uxtah	r1, r1, fp
 80062dc:	0c1b      	lsrs	r3, r3, #16
 80062de:	eba1 0808 	sub.w	r8, r1, r8
 80062e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80062ea:	fa1f f888 	uxth.w	r8, r8
 80062ee:	1419      	asrs	r1, r3, #16
 80062f0:	454e      	cmp	r6, r9
 80062f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80062f6:	f84a 3b04 	str.w	r3, [sl], #4
 80062fa:	d8e7      	bhi.n	80062cc <__mdiff+0x80>
 80062fc:	1b33      	subs	r3, r6, r4
 80062fe:	3b15      	subs	r3, #21
 8006300:	f023 0303 	bic.w	r3, r3, #3
 8006304:	3304      	adds	r3, #4
 8006306:	3415      	adds	r4, #21
 8006308:	42a6      	cmp	r6, r4
 800630a:	bf38      	it	cc
 800630c:	2304      	movcc	r3, #4
 800630e:	441d      	add	r5, r3
 8006310:	4473      	add	r3, lr
 8006312:	469e      	mov	lr, r3
 8006314:	462e      	mov	r6, r5
 8006316:	4566      	cmp	r6, ip
 8006318:	d30e      	bcc.n	8006338 <__mdiff+0xec>
 800631a:	f10c 0203 	add.w	r2, ip, #3
 800631e:	1b52      	subs	r2, r2, r5
 8006320:	f022 0203 	bic.w	r2, r2, #3
 8006324:	3d03      	subs	r5, #3
 8006326:	45ac      	cmp	ip, r5
 8006328:	bf38      	it	cc
 800632a:	2200      	movcc	r2, #0
 800632c:	441a      	add	r2, r3
 800632e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006332:	b17b      	cbz	r3, 8006354 <__mdiff+0x108>
 8006334:	6107      	str	r7, [r0, #16]
 8006336:	e7a3      	b.n	8006280 <__mdiff+0x34>
 8006338:	f856 8b04 	ldr.w	r8, [r6], #4
 800633c:	fa11 f288 	uxtah	r2, r1, r8
 8006340:	1414      	asrs	r4, r2, #16
 8006342:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006346:	b292      	uxth	r2, r2
 8006348:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800634c:	f84e 2b04 	str.w	r2, [lr], #4
 8006350:	1421      	asrs	r1, r4, #16
 8006352:	e7e0      	b.n	8006316 <__mdiff+0xca>
 8006354:	3f01      	subs	r7, #1
 8006356:	e7ea      	b.n	800632e <__mdiff+0xe2>
 8006358:	0800764f 	.word	0x0800764f
 800635c:	08007660 	.word	0x08007660

08006360 <__d2b>:
 8006360:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006364:	4689      	mov	r9, r1
 8006366:	2101      	movs	r1, #1
 8006368:	ec57 6b10 	vmov	r6, r7, d0
 800636c:	4690      	mov	r8, r2
 800636e:	f7ff fccf 	bl	8005d10 <_Balloc>
 8006372:	4604      	mov	r4, r0
 8006374:	b930      	cbnz	r0, 8006384 <__d2b+0x24>
 8006376:	4602      	mov	r2, r0
 8006378:	4b25      	ldr	r3, [pc, #148]	; (8006410 <__d2b+0xb0>)
 800637a:	4826      	ldr	r0, [pc, #152]	; (8006414 <__d2b+0xb4>)
 800637c:	f240 310a 	movw	r1, #778	; 0x30a
 8006380:	f000 faac 	bl	80068dc <__assert_func>
 8006384:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006388:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800638c:	bb35      	cbnz	r5, 80063dc <__d2b+0x7c>
 800638e:	2e00      	cmp	r6, #0
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	d028      	beq.n	80063e6 <__d2b+0x86>
 8006394:	4668      	mov	r0, sp
 8006396:	9600      	str	r6, [sp, #0]
 8006398:	f7ff fd82 	bl	8005ea0 <__lo0bits>
 800639c:	9900      	ldr	r1, [sp, #0]
 800639e:	b300      	cbz	r0, 80063e2 <__d2b+0x82>
 80063a0:	9a01      	ldr	r2, [sp, #4]
 80063a2:	f1c0 0320 	rsb	r3, r0, #32
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	430b      	orrs	r3, r1
 80063ac:	40c2      	lsrs	r2, r0
 80063ae:	6163      	str	r3, [r4, #20]
 80063b0:	9201      	str	r2, [sp, #4]
 80063b2:	9b01      	ldr	r3, [sp, #4]
 80063b4:	61a3      	str	r3, [r4, #24]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bf14      	ite	ne
 80063ba:	2202      	movne	r2, #2
 80063bc:	2201      	moveq	r2, #1
 80063be:	6122      	str	r2, [r4, #16]
 80063c0:	b1d5      	cbz	r5, 80063f8 <__d2b+0x98>
 80063c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80063c6:	4405      	add	r5, r0
 80063c8:	f8c9 5000 	str.w	r5, [r9]
 80063cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063d0:	f8c8 0000 	str.w	r0, [r8]
 80063d4:	4620      	mov	r0, r4
 80063d6:	b003      	add	sp, #12
 80063d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063e0:	e7d5      	b.n	800638e <__d2b+0x2e>
 80063e2:	6161      	str	r1, [r4, #20]
 80063e4:	e7e5      	b.n	80063b2 <__d2b+0x52>
 80063e6:	a801      	add	r0, sp, #4
 80063e8:	f7ff fd5a 	bl	8005ea0 <__lo0bits>
 80063ec:	9b01      	ldr	r3, [sp, #4]
 80063ee:	6163      	str	r3, [r4, #20]
 80063f0:	2201      	movs	r2, #1
 80063f2:	6122      	str	r2, [r4, #16]
 80063f4:	3020      	adds	r0, #32
 80063f6:	e7e3      	b.n	80063c0 <__d2b+0x60>
 80063f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006400:	f8c9 0000 	str.w	r0, [r9]
 8006404:	6918      	ldr	r0, [r3, #16]
 8006406:	f7ff fd2b 	bl	8005e60 <__hi0bits>
 800640a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800640e:	e7df      	b.n	80063d0 <__d2b+0x70>
 8006410:	0800764f 	.word	0x0800764f
 8006414:	08007660 	.word	0x08007660

08006418 <_calloc_r>:
 8006418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800641a:	fba1 2402 	umull	r2, r4, r1, r2
 800641e:	b94c      	cbnz	r4, 8006434 <_calloc_r+0x1c>
 8006420:	4611      	mov	r1, r2
 8006422:	9201      	str	r2, [sp, #4]
 8006424:	f000 f87a 	bl	800651c <_malloc_r>
 8006428:	9a01      	ldr	r2, [sp, #4]
 800642a:	4605      	mov	r5, r0
 800642c:	b930      	cbnz	r0, 800643c <_calloc_r+0x24>
 800642e:	4628      	mov	r0, r5
 8006430:	b003      	add	sp, #12
 8006432:	bd30      	pop	{r4, r5, pc}
 8006434:	220c      	movs	r2, #12
 8006436:	6002      	str	r2, [r0, #0]
 8006438:	2500      	movs	r5, #0
 800643a:	e7f8      	b.n	800642e <_calloc_r+0x16>
 800643c:	4621      	mov	r1, r4
 800643e:	f7fe f91f 	bl	8004680 <memset>
 8006442:	e7f4      	b.n	800642e <_calloc_r+0x16>

08006444 <_free_r>:
 8006444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006446:	2900      	cmp	r1, #0
 8006448:	d044      	beq.n	80064d4 <_free_r+0x90>
 800644a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800644e:	9001      	str	r0, [sp, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f1a1 0404 	sub.w	r4, r1, #4
 8006456:	bfb8      	it	lt
 8006458:	18e4      	addlt	r4, r4, r3
 800645a:	f000 fa9b 	bl	8006994 <__malloc_lock>
 800645e:	4a1e      	ldr	r2, [pc, #120]	; (80064d8 <_free_r+0x94>)
 8006460:	9801      	ldr	r0, [sp, #4]
 8006462:	6813      	ldr	r3, [r2, #0]
 8006464:	b933      	cbnz	r3, 8006474 <_free_r+0x30>
 8006466:	6063      	str	r3, [r4, #4]
 8006468:	6014      	str	r4, [r2, #0]
 800646a:	b003      	add	sp, #12
 800646c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006470:	f000 ba96 	b.w	80069a0 <__malloc_unlock>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d908      	bls.n	800648a <_free_r+0x46>
 8006478:	6825      	ldr	r5, [r4, #0]
 800647a:	1961      	adds	r1, r4, r5
 800647c:	428b      	cmp	r3, r1
 800647e:	bf01      	itttt	eq
 8006480:	6819      	ldreq	r1, [r3, #0]
 8006482:	685b      	ldreq	r3, [r3, #4]
 8006484:	1949      	addeq	r1, r1, r5
 8006486:	6021      	streq	r1, [r4, #0]
 8006488:	e7ed      	b.n	8006466 <_free_r+0x22>
 800648a:	461a      	mov	r2, r3
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	b10b      	cbz	r3, 8006494 <_free_r+0x50>
 8006490:	42a3      	cmp	r3, r4
 8006492:	d9fa      	bls.n	800648a <_free_r+0x46>
 8006494:	6811      	ldr	r1, [r2, #0]
 8006496:	1855      	adds	r5, r2, r1
 8006498:	42a5      	cmp	r5, r4
 800649a:	d10b      	bne.n	80064b4 <_free_r+0x70>
 800649c:	6824      	ldr	r4, [r4, #0]
 800649e:	4421      	add	r1, r4
 80064a0:	1854      	adds	r4, r2, r1
 80064a2:	42a3      	cmp	r3, r4
 80064a4:	6011      	str	r1, [r2, #0]
 80064a6:	d1e0      	bne.n	800646a <_free_r+0x26>
 80064a8:	681c      	ldr	r4, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	6053      	str	r3, [r2, #4]
 80064ae:	4421      	add	r1, r4
 80064b0:	6011      	str	r1, [r2, #0]
 80064b2:	e7da      	b.n	800646a <_free_r+0x26>
 80064b4:	d902      	bls.n	80064bc <_free_r+0x78>
 80064b6:	230c      	movs	r3, #12
 80064b8:	6003      	str	r3, [r0, #0]
 80064ba:	e7d6      	b.n	800646a <_free_r+0x26>
 80064bc:	6825      	ldr	r5, [r4, #0]
 80064be:	1961      	adds	r1, r4, r5
 80064c0:	428b      	cmp	r3, r1
 80064c2:	bf04      	itt	eq
 80064c4:	6819      	ldreq	r1, [r3, #0]
 80064c6:	685b      	ldreq	r3, [r3, #4]
 80064c8:	6063      	str	r3, [r4, #4]
 80064ca:	bf04      	itt	eq
 80064cc:	1949      	addeq	r1, r1, r5
 80064ce:	6021      	streq	r1, [r4, #0]
 80064d0:	6054      	str	r4, [r2, #4]
 80064d2:	e7ca      	b.n	800646a <_free_r+0x26>
 80064d4:	b003      	add	sp, #12
 80064d6:	bd30      	pop	{r4, r5, pc}
 80064d8:	200002b0 	.word	0x200002b0

080064dc <sbrk_aligned>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	4e0e      	ldr	r6, [pc, #56]	; (8006518 <sbrk_aligned+0x3c>)
 80064e0:	460c      	mov	r4, r1
 80064e2:	6831      	ldr	r1, [r6, #0]
 80064e4:	4605      	mov	r5, r0
 80064e6:	b911      	cbnz	r1, 80064ee <sbrk_aligned+0x12>
 80064e8:	f000 f9e8 	bl	80068bc <_sbrk_r>
 80064ec:	6030      	str	r0, [r6, #0]
 80064ee:	4621      	mov	r1, r4
 80064f0:	4628      	mov	r0, r5
 80064f2:	f000 f9e3 	bl	80068bc <_sbrk_r>
 80064f6:	1c43      	adds	r3, r0, #1
 80064f8:	d00a      	beq.n	8006510 <sbrk_aligned+0x34>
 80064fa:	1cc4      	adds	r4, r0, #3
 80064fc:	f024 0403 	bic.w	r4, r4, #3
 8006500:	42a0      	cmp	r0, r4
 8006502:	d007      	beq.n	8006514 <sbrk_aligned+0x38>
 8006504:	1a21      	subs	r1, r4, r0
 8006506:	4628      	mov	r0, r5
 8006508:	f000 f9d8 	bl	80068bc <_sbrk_r>
 800650c:	3001      	adds	r0, #1
 800650e:	d101      	bne.n	8006514 <sbrk_aligned+0x38>
 8006510:	f04f 34ff 	mov.w	r4, #4294967295
 8006514:	4620      	mov	r0, r4
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	200002b4 	.word	0x200002b4

0800651c <_malloc_r>:
 800651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006520:	1ccd      	adds	r5, r1, #3
 8006522:	f025 0503 	bic.w	r5, r5, #3
 8006526:	3508      	adds	r5, #8
 8006528:	2d0c      	cmp	r5, #12
 800652a:	bf38      	it	cc
 800652c:	250c      	movcc	r5, #12
 800652e:	2d00      	cmp	r5, #0
 8006530:	4607      	mov	r7, r0
 8006532:	db01      	blt.n	8006538 <_malloc_r+0x1c>
 8006534:	42a9      	cmp	r1, r5
 8006536:	d905      	bls.n	8006544 <_malloc_r+0x28>
 8006538:	230c      	movs	r3, #12
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	2600      	movs	r6, #0
 800653e:	4630      	mov	r0, r6
 8006540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006544:	4e2e      	ldr	r6, [pc, #184]	; (8006600 <_malloc_r+0xe4>)
 8006546:	f000 fa25 	bl	8006994 <__malloc_lock>
 800654a:	6833      	ldr	r3, [r6, #0]
 800654c:	461c      	mov	r4, r3
 800654e:	bb34      	cbnz	r4, 800659e <_malloc_r+0x82>
 8006550:	4629      	mov	r1, r5
 8006552:	4638      	mov	r0, r7
 8006554:	f7ff ffc2 	bl	80064dc <sbrk_aligned>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	4604      	mov	r4, r0
 800655c:	d14d      	bne.n	80065fa <_malloc_r+0xde>
 800655e:	6834      	ldr	r4, [r6, #0]
 8006560:	4626      	mov	r6, r4
 8006562:	2e00      	cmp	r6, #0
 8006564:	d140      	bne.n	80065e8 <_malloc_r+0xcc>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	4631      	mov	r1, r6
 800656a:	4638      	mov	r0, r7
 800656c:	eb04 0803 	add.w	r8, r4, r3
 8006570:	f000 f9a4 	bl	80068bc <_sbrk_r>
 8006574:	4580      	cmp	r8, r0
 8006576:	d13a      	bne.n	80065ee <_malloc_r+0xd2>
 8006578:	6821      	ldr	r1, [r4, #0]
 800657a:	3503      	adds	r5, #3
 800657c:	1a6d      	subs	r5, r5, r1
 800657e:	f025 0503 	bic.w	r5, r5, #3
 8006582:	3508      	adds	r5, #8
 8006584:	2d0c      	cmp	r5, #12
 8006586:	bf38      	it	cc
 8006588:	250c      	movcc	r5, #12
 800658a:	4629      	mov	r1, r5
 800658c:	4638      	mov	r0, r7
 800658e:	f7ff ffa5 	bl	80064dc <sbrk_aligned>
 8006592:	3001      	adds	r0, #1
 8006594:	d02b      	beq.n	80065ee <_malloc_r+0xd2>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	442b      	add	r3, r5
 800659a:	6023      	str	r3, [r4, #0]
 800659c:	e00e      	b.n	80065bc <_malloc_r+0xa0>
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	1b52      	subs	r2, r2, r5
 80065a2:	d41e      	bmi.n	80065e2 <_malloc_r+0xc6>
 80065a4:	2a0b      	cmp	r2, #11
 80065a6:	d916      	bls.n	80065d6 <_malloc_r+0xba>
 80065a8:	1961      	adds	r1, r4, r5
 80065aa:	42a3      	cmp	r3, r4
 80065ac:	6025      	str	r5, [r4, #0]
 80065ae:	bf18      	it	ne
 80065b0:	6059      	strne	r1, [r3, #4]
 80065b2:	6863      	ldr	r3, [r4, #4]
 80065b4:	bf08      	it	eq
 80065b6:	6031      	streq	r1, [r6, #0]
 80065b8:	5162      	str	r2, [r4, r5]
 80065ba:	604b      	str	r3, [r1, #4]
 80065bc:	4638      	mov	r0, r7
 80065be:	f104 060b 	add.w	r6, r4, #11
 80065c2:	f000 f9ed 	bl	80069a0 <__malloc_unlock>
 80065c6:	f026 0607 	bic.w	r6, r6, #7
 80065ca:	1d23      	adds	r3, r4, #4
 80065cc:	1af2      	subs	r2, r6, r3
 80065ce:	d0b6      	beq.n	800653e <_malloc_r+0x22>
 80065d0:	1b9b      	subs	r3, r3, r6
 80065d2:	50a3      	str	r3, [r4, r2]
 80065d4:	e7b3      	b.n	800653e <_malloc_r+0x22>
 80065d6:	6862      	ldr	r2, [r4, #4]
 80065d8:	42a3      	cmp	r3, r4
 80065da:	bf0c      	ite	eq
 80065dc:	6032      	streq	r2, [r6, #0]
 80065de:	605a      	strne	r2, [r3, #4]
 80065e0:	e7ec      	b.n	80065bc <_malloc_r+0xa0>
 80065e2:	4623      	mov	r3, r4
 80065e4:	6864      	ldr	r4, [r4, #4]
 80065e6:	e7b2      	b.n	800654e <_malloc_r+0x32>
 80065e8:	4634      	mov	r4, r6
 80065ea:	6876      	ldr	r6, [r6, #4]
 80065ec:	e7b9      	b.n	8006562 <_malloc_r+0x46>
 80065ee:	230c      	movs	r3, #12
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	4638      	mov	r0, r7
 80065f4:	f000 f9d4 	bl	80069a0 <__malloc_unlock>
 80065f8:	e7a1      	b.n	800653e <_malloc_r+0x22>
 80065fa:	6025      	str	r5, [r4, #0]
 80065fc:	e7de      	b.n	80065bc <_malloc_r+0xa0>
 80065fe:	bf00      	nop
 8006600:	200002b0 	.word	0x200002b0

08006604 <__ssputs_r>:
 8006604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	688e      	ldr	r6, [r1, #8]
 800660a:	429e      	cmp	r6, r3
 800660c:	4682      	mov	sl, r0
 800660e:	460c      	mov	r4, r1
 8006610:	4690      	mov	r8, r2
 8006612:	461f      	mov	r7, r3
 8006614:	d838      	bhi.n	8006688 <__ssputs_r+0x84>
 8006616:	898a      	ldrh	r2, [r1, #12]
 8006618:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800661c:	d032      	beq.n	8006684 <__ssputs_r+0x80>
 800661e:	6825      	ldr	r5, [r4, #0]
 8006620:	6909      	ldr	r1, [r1, #16]
 8006622:	eba5 0901 	sub.w	r9, r5, r1
 8006626:	6965      	ldr	r5, [r4, #20]
 8006628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800662c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006630:	3301      	adds	r3, #1
 8006632:	444b      	add	r3, r9
 8006634:	106d      	asrs	r5, r5, #1
 8006636:	429d      	cmp	r5, r3
 8006638:	bf38      	it	cc
 800663a:	461d      	movcc	r5, r3
 800663c:	0553      	lsls	r3, r2, #21
 800663e:	d531      	bpl.n	80066a4 <__ssputs_r+0xa0>
 8006640:	4629      	mov	r1, r5
 8006642:	f7ff ff6b 	bl	800651c <_malloc_r>
 8006646:	4606      	mov	r6, r0
 8006648:	b950      	cbnz	r0, 8006660 <__ssputs_r+0x5c>
 800664a:	230c      	movs	r3, #12
 800664c:	f8ca 3000 	str.w	r3, [sl]
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006656:	81a3      	strh	r3, [r4, #12]
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006660:	6921      	ldr	r1, [r4, #16]
 8006662:	464a      	mov	r2, r9
 8006664:	f7ff fb46 	bl	8005cf4 <memcpy>
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800666e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	6126      	str	r6, [r4, #16]
 8006676:	6165      	str	r5, [r4, #20]
 8006678:	444e      	add	r6, r9
 800667a:	eba5 0509 	sub.w	r5, r5, r9
 800667e:	6026      	str	r6, [r4, #0]
 8006680:	60a5      	str	r5, [r4, #8]
 8006682:	463e      	mov	r6, r7
 8006684:	42be      	cmp	r6, r7
 8006686:	d900      	bls.n	800668a <__ssputs_r+0x86>
 8006688:	463e      	mov	r6, r7
 800668a:	6820      	ldr	r0, [r4, #0]
 800668c:	4632      	mov	r2, r6
 800668e:	4641      	mov	r1, r8
 8006690:	f000 f966 	bl	8006960 <memmove>
 8006694:	68a3      	ldr	r3, [r4, #8]
 8006696:	1b9b      	subs	r3, r3, r6
 8006698:	60a3      	str	r3, [r4, #8]
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	4433      	add	r3, r6
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	2000      	movs	r0, #0
 80066a2:	e7db      	b.n	800665c <__ssputs_r+0x58>
 80066a4:	462a      	mov	r2, r5
 80066a6:	f000 f981 	bl	80069ac <_realloc_r>
 80066aa:	4606      	mov	r6, r0
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d1e1      	bne.n	8006674 <__ssputs_r+0x70>
 80066b0:	6921      	ldr	r1, [r4, #16]
 80066b2:	4650      	mov	r0, sl
 80066b4:	f7ff fec6 	bl	8006444 <_free_r>
 80066b8:	e7c7      	b.n	800664a <__ssputs_r+0x46>
	...

080066bc <_svfiprintf_r>:
 80066bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	4698      	mov	r8, r3
 80066c2:	898b      	ldrh	r3, [r1, #12]
 80066c4:	061b      	lsls	r3, r3, #24
 80066c6:	b09d      	sub	sp, #116	; 0x74
 80066c8:	4607      	mov	r7, r0
 80066ca:	460d      	mov	r5, r1
 80066cc:	4614      	mov	r4, r2
 80066ce:	d50e      	bpl.n	80066ee <_svfiprintf_r+0x32>
 80066d0:	690b      	ldr	r3, [r1, #16]
 80066d2:	b963      	cbnz	r3, 80066ee <_svfiprintf_r+0x32>
 80066d4:	2140      	movs	r1, #64	; 0x40
 80066d6:	f7ff ff21 	bl	800651c <_malloc_r>
 80066da:	6028      	str	r0, [r5, #0]
 80066dc:	6128      	str	r0, [r5, #16]
 80066de:	b920      	cbnz	r0, 80066ea <_svfiprintf_r+0x2e>
 80066e0:	230c      	movs	r3, #12
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295
 80066e8:	e0d1      	b.n	800688e <_svfiprintf_r+0x1d2>
 80066ea:	2340      	movs	r3, #64	; 0x40
 80066ec:	616b      	str	r3, [r5, #20]
 80066ee:	2300      	movs	r3, #0
 80066f0:	9309      	str	r3, [sp, #36]	; 0x24
 80066f2:	2320      	movs	r3, #32
 80066f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80066fc:	2330      	movs	r3, #48	; 0x30
 80066fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068a8 <_svfiprintf_r+0x1ec>
 8006702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006706:	f04f 0901 	mov.w	r9, #1
 800670a:	4623      	mov	r3, r4
 800670c:	469a      	mov	sl, r3
 800670e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006712:	b10a      	cbz	r2, 8006718 <_svfiprintf_r+0x5c>
 8006714:	2a25      	cmp	r2, #37	; 0x25
 8006716:	d1f9      	bne.n	800670c <_svfiprintf_r+0x50>
 8006718:	ebba 0b04 	subs.w	fp, sl, r4
 800671c:	d00b      	beq.n	8006736 <_svfiprintf_r+0x7a>
 800671e:	465b      	mov	r3, fp
 8006720:	4622      	mov	r2, r4
 8006722:	4629      	mov	r1, r5
 8006724:	4638      	mov	r0, r7
 8006726:	f7ff ff6d 	bl	8006604 <__ssputs_r>
 800672a:	3001      	adds	r0, #1
 800672c:	f000 80aa 	beq.w	8006884 <_svfiprintf_r+0x1c8>
 8006730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006732:	445a      	add	r2, fp
 8006734:	9209      	str	r2, [sp, #36]	; 0x24
 8006736:	f89a 3000 	ldrb.w	r3, [sl]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 80a2 	beq.w	8006884 <_svfiprintf_r+0x1c8>
 8006740:	2300      	movs	r3, #0
 8006742:	f04f 32ff 	mov.w	r2, #4294967295
 8006746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800674a:	f10a 0a01 	add.w	sl, sl, #1
 800674e:	9304      	str	r3, [sp, #16]
 8006750:	9307      	str	r3, [sp, #28]
 8006752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006756:	931a      	str	r3, [sp, #104]	; 0x68
 8006758:	4654      	mov	r4, sl
 800675a:	2205      	movs	r2, #5
 800675c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006760:	4851      	ldr	r0, [pc, #324]	; (80068a8 <_svfiprintf_r+0x1ec>)
 8006762:	f7f9 fd3d 	bl	80001e0 <memchr>
 8006766:	9a04      	ldr	r2, [sp, #16]
 8006768:	b9d8      	cbnz	r0, 80067a2 <_svfiprintf_r+0xe6>
 800676a:	06d0      	lsls	r0, r2, #27
 800676c:	bf44      	itt	mi
 800676e:	2320      	movmi	r3, #32
 8006770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006774:	0711      	lsls	r1, r2, #28
 8006776:	bf44      	itt	mi
 8006778:	232b      	movmi	r3, #43	; 0x2b
 800677a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800677e:	f89a 3000 	ldrb.w	r3, [sl]
 8006782:	2b2a      	cmp	r3, #42	; 0x2a
 8006784:	d015      	beq.n	80067b2 <_svfiprintf_r+0xf6>
 8006786:	9a07      	ldr	r2, [sp, #28]
 8006788:	4654      	mov	r4, sl
 800678a:	2000      	movs	r0, #0
 800678c:	f04f 0c0a 	mov.w	ip, #10
 8006790:	4621      	mov	r1, r4
 8006792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006796:	3b30      	subs	r3, #48	; 0x30
 8006798:	2b09      	cmp	r3, #9
 800679a:	d94e      	bls.n	800683a <_svfiprintf_r+0x17e>
 800679c:	b1b0      	cbz	r0, 80067cc <_svfiprintf_r+0x110>
 800679e:	9207      	str	r2, [sp, #28]
 80067a0:	e014      	b.n	80067cc <_svfiprintf_r+0x110>
 80067a2:	eba0 0308 	sub.w	r3, r0, r8
 80067a6:	fa09 f303 	lsl.w	r3, r9, r3
 80067aa:	4313      	orrs	r3, r2
 80067ac:	9304      	str	r3, [sp, #16]
 80067ae:	46a2      	mov	sl, r4
 80067b0:	e7d2      	b.n	8006758 <_svfiprintf_r+0x9c>
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	1d19      	adds	r1, r3, #4
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	9103      	str	r1, [sp, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bfbb      	ittet	lt
 80067be:	425b      	neglt	r3, r3
 80067c0:	f042 0202 	orrlt.w	r2, r2, #2
 80067c4:	9307      	strge	r3, [sp, #28]
 80067c6:	9307      	strlt	r3, [sp, #28]
 80067c8:	bfb8      	it	lt
 80067ca:	9204      	strlt	r2, [sp, #16]
 80067cc:	7823      	ldrb	r3, [r4, #0]
 80067ce:	2b2e      	cmp	r3, #46	; 0x2e
 80067d0:	d10c      	bne.n	80067ec <_svfiprintf_r+0x130>
 80067d2:	7863      	ldrb	r3, [r4, #1]
 80067d4:	2b2a      	cmp	r3, #42	; 0x2a
 80067d6:	d135      	bne.n	8006844 <_svfiprintf_r+0x188>
 80067d8:	9b03      	ldr	r3, [sp, #12]
 80067da:	1d1a      	adds	r2, r3, #4
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	9203      	str	r2, [sp, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bfb8      	it	lt
 80067e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80067e8:	3402      	adds	r4, #2
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068b8 <_svfiprintf_r+0x1fc>
 80067f0:	7821      	ldrb	r1, [r4, #0]
 80067f2:	2203      	movs	r2, #3
 80067f4:	4650      	mov	r0, sl
 80067f6:	f7f9 fcf3 	bl	80001e0 <memchr>
 80067fa:	b140      	cbz	r0, 800680e <_svfiprintf_r+0x152>
 80067fc:	2340      	movs	r3, #64	; 0x40
 80067fe:	eba0 000a 	sub.w	r0, r0, sl
 8006802:	fa03 f000 	lsl.w	r0, r3, r0
 8006806:	9b04      	ldr	r3, [sp, #16]
 8006808:	4303      	orrs	r3, r0
 800680a:	3401      	adds	r4, #1
 800680c:	9304      	str	r3, [sp, #16]
 800680e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006812:	4826      	ldr	r0, [pc, #152]	; (80068ac <_svfiprintf_r+0x1f0>)
 8006814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006818:	2206      	movs	r2, #6
 800681a:	f7f9 fce1 	bl	80001e0 <memchr>
 800681e:	2800      	cmp	r0, #0
 8006820:	d038      	beq.n	8006894 <_svfiprintf_r+0x1d8>
 8006822:	4b23      	ldr	r3, [pc, #140]	; (80068b0 <_svfiprintf_r+0x1f4>)
 8006824:	bb1b      	cbnz	r3, 800686e <_svfiprintf_r+0x1b2>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	3307      	adds	r3, #7
 800682a:	f023 0307 	bic.w	r3, r3, #7
 800682e:	3308      	adds	r3, #8
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006834:	4433      	add	r3, r6
 8006836:	9309      	str	r3, [sp, #36]	; 0x24
 8006838:	e767      	b.n	800670a <_svfiprintf_r+0x4e>
 800683a:	fb0c 3202 	mla	r2, ip, r2, r3
 800683e:	460c      	mov	r4, r1
 8006840:	2001      	movs	r0, #1
 8006842:	e7a5      	b.n	8006790 <_svfiprintf_r+0xd4>
 8006844:	2300      	movs	r3, #0
 8006846:	3401      	adds	r4, #1
 8006848:	9305      	str	r3, [sp, #20]
 800684a:	4619      	mov	r1, r3
 800684c:	f04f 0c0a 	mov.w	ip, #10
 8006850:	4620      	mov	r0, r4
 8006852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006856:	3a30      	subs	r2, #48	; 0x30
 8006858:	2a09      	cmp	r2, #9
 800685a:	d903      	bls.n	8006864 <_svfiprintf_r+0x1a8>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0c5      	beq.n	80067ec <_svfiprintf_r+0x130>
 8006860:	9105      	str	r1, [sp, #20]
 8006862:	e7c3      	b.n	80067ec <_svfiprintf_r+0x130>
 8006864:	fb0c 2101 	mla	r1, ip, r1, r2
 8006868:	4604      	mov	r4, r0
 800686a:	2301      	movs	r3, #1
 800686c:	e7f0      	b.n	8006850 <_svfiprintf_r+0x194>
 800686e:	ab03      	add	r3, sp, #12
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	462a      	mov	r2, r5
 8006874:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <_svfiprintf_r+0x1f8>)
 8006876:	a904      	add	r1, sp, #16
 8006878:	4638      	mov	r0, r7
 800687a:	f7fd ffa9 	bl	80047d0 <_printf_float>
 800687e:	1c42      	adds	r2, r0, #1
 8006880:	4606      	mov	r6, r0
 8006882:	d1d6      	bne.n	8006832 <_svfiprintf_r+0x176>
 8006884:	89ab      	ldrh	r3, [r5, #12]
 8006886:	065b      	lsls	r3, r3, #25
 8006888:	f53f af2c 	bmi.w	80066e4 <_svfiprintf_r+0x28>
 800688c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800688e:	b01d      	add	sp, #116	; 0x74
 8006890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006894:	ab03      	add	r3, sp, #12
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	462a      	mov	r2, r5
 800689a:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <_svfiprintf_r+0x1f8>)
 800689c:	a904      	add	r1, sp, #16
 800689e:	4638      	mov	r0, r7
 80068a0:	f7fe fa3a 	bl	8004d18 <_printf_i>
 80068a4:	e7eb      	b.n	800687e <_svfiprintf_r+0x1c2>
 80068a6:	bf00      	nop
 80068a8:	080077bc 	.word	0x080077bc
 80068ac:	080077c6 	.word	0x080077c6
 80068b0:	080047d1 	.word	0x080047d1
 80068b4:	08006605 	.word	0x08006605
 80068b8:	080077c2 	.word	0x080077c2

080068bc <_sbrk_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4d06      	ldr	r5, [pc, #24]	; (80068d8 <_sbrk_r+0x1c>)
 80068c0:	2300      	movs	r3, #0
 80068c2:	4604      	mov	r4, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	602b      	str	r3, [r5, #0]
 80068c8:	f7fb fe8e 	bl	80025e8 <_sbrk>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_sbrk_r+0x1a>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_sbrk_r+0x1a>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	200002b8 	.word	0x200002b8

080068dc <__assert_func>:
 80068dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068de:	4614      	mov	r4, r2
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b09      	ldr	r3, [pc, #36]	; (8006908 <__assert_func+0x2c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4605      	mov	r5, r0
 80068e8:	68d8      	ldr	r0, [r3, #12]
 80068ea:	b14c      	cbz	r4, 8006900 <__assert_func+0x24>
 80068ec:	4b07      	ldr	r3, [pc, #28]	; (800690c <__assert_func+0x30>)
 80068ee:	9100      	str	r1, [sp, #0]
 80068f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068f4:	4906      	ldr	r1, [pc, #24]	; (8006910 <__assert_func+0x34>)
 80068f6:	462b      	mov	r3, r5
 80068f8:	f000 f80e 	bl	8006918 <fiprintf>
 80068fc:	f000 faac 	bl	8006e58 <abort>
 8006900:	4b04      	ldr	r3, [pc, #16]	; (8006914 <__assert_func+0x38>)
 8006902:	461c      	mov	r4, r3
 8006904:	e7f3      	b.n	80068ee <__assert_func+0x12>
 8006906:	bf00      	nop
 8006908:	20000010 	.word	0x20000010
 800690c:	080077cd 	.word	0x080077cd
 8006910:	080077da 	.word	0x080077da
 8006914:	08007808 	.word	0x08007808

08006918 <fiprintf>:
 8006918:	b40e      	push	{r1, r2, r3}
 800691a:	b503      	push	{r0, r1, lr}
 800691c:	4601      	mov	r1, r0
 800691e:	ab03      	add	r3, sp, #12
 8006920:	4805      	ldr	r0, [pc, #20]	; (8006938 <fiprintf+0x20>)
 8006922:	f853 2b04 	ldr.w	r2, [r3], #4
 8006926:	6800      	ldr	r0, [r0, #0]
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	f000 f897 	bl	8006a5c <_vfiprintf_r>
 800692e:	b002      	add	sp, #8
 8006930:	f85d eb04 	ldr.w	lr, [sp], #4
 8006934:	b003      	add	sp, #12
 8006936:	4770      	bx	lr
 8006938:	20000010 	.word	0x20000010

0800693c <__ascii_mbtowc>:
 800693c:	b082      	sub	sp, #8
 800693e:	b901      	cbnz	r1, 8006942 <__ascii_mbtowc+0x6>
 8006940:	a901      	add	r1, sp, #4
 8006942:	b142      	cbz	r2, 8006956 <__ascii_mbtowc+0x1a>
 8006944:	b14b      	cbz	r3, 800695a <__ascii_mbtowc+0x1e>
 8006946:	7813      	ldrb	r3, [r2, #0]
 8006948:	600b      	str	r3, [r1, #0]
 800694a:	7812      	ldrb	r2, [r2, #0]
 800694c:	1e10      	subs	r0, r2, #0
 800694e:	bf18      	it	ne
 8006950:	2001      	movne	r0, #1
 8006952:	b002      	add	sp, #8
 8006954:	4770      	bx	lr
 8006956:	4610      	mov	r0, r2
 8006958:	e7fb      	b.n	8006952 <__ascii_mbtowc+0x16>
 800695a:	f06f 0001 	mvn.w	r0, #1
 800695e:	e7f8      	b.n	8006952 <__ascii_mbtowc+0x16>

08006960 <memmove>:
 8006960:	4288      	cmp	r0, r1
 8006962:	b510      	push	{r4, lr}
 8006964:	eb01 0402 	add.w	r4, r1, r2
 8006968:	d902      	bls.n	8006970 <memmove+0x10>
 800696a:	4284      	cmp	r4, r0
 800696c:	4623      	mov	r3, r4
 800696e:	d807      	bhi.n	8006980 <memmove+0x20>
 8006970:	1e43      	subs	r3, r0, #1
 8006972:	42a1      	cmp	r1, r4
 8006974:	d008      	beq.n	8006988 <memmove+0x28>
 8006976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800697a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800697e:	e7f8      	b.n	8006972 <memmove+0x12>
 8006980:	4402      	add	r2, r0
 8006982:	4601      	mov	r1, r0
 8006984:	428a      	cmp	r2, r1
 8006986:	d100      	bne.n	800698a <memmove+0x2a>
 8006988:	bd10      	pop	{r4, pc}
 800698a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800698e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006992:	e7f7      	b.n	8006984 <memmove+0x24>

08006994 <__malloc_lock>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__malloc_lock+0x8>)
 8006996:	f000 bc1f 	b.w	80071d8 <__retarget_lock_acquire_recursive>
 800699a:	bf00      	nop
 800699c:	200002bc 	.word	0x200002bc

080069a0 <__malloc_unlock>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__malloc_unlock+0x8>)
 80069a2:	f000 bc1a 	b.w	80071da <__retarget_lock_release_recursive>
 80069a6:	bf00      	nop
 80069a8:	200002bc 	.word	0x200002bc

080069ac <_realloc_r>:
 80069ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b0:	4680      	mov	r8, r0
 80069b2:	4614      	mov	r4, r2
 80069b4:	460e      	mov	r6, r1
 80069b6:	b921      	cbnz	r1, 80069c2 <_realloc_r+0x16>
 80069b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069bc:	4611      	mov	r1, r2
 80069be:	f7ff bdad 	b.w	800651c <_malloc_r>
 80069c2:	b92a      	cbnz	r2, 80069d0 <_realloc_r+0x24>
 80069c4:	f7ff fd3e 	bl	8006444 <_free_r>
 80069c8:	4625      	mov	r5, r4
 80069ca:	4628      	mov	r0, r5
 80069cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d0:	f000 fc6a 	bl	80072a8 <_malloc_usable_size_r>
 80069d4:	4284      	cmp	r4, r0
 80069d6:	4607      	mov	r7, r0
 80069d8:	d802      	bhi.n	80069e0 <_realloc_r+0x34>
 80069da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069de:	d812      	bhi.n	8006a06 <_realloc_r+0x5a>
 80069e0:	4621      	mov	r1, r4
 80069e2:	4640      	mov	r0, r8
 80069e4:	f7ff fd9a 	bl	800651c <_malloc_r>
 80069e8:	4605      	mov	r5, r0
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d0ed      	beq.n	80069ca <_realloc_r+0x1e>
 80069ee:	42bc      	cmp	r4, r7
 80069f0:	4622      	mov	r2, r4
 80069f2:	4631      	mov	r1, r6
 80069f4:	bf28      	it	cs
 80069f6:	463a      	movcs	r2, r7
 80069f8:	f7ff f97c 	bl	8005cf4 <memcpy>
 80069fc:	4631      	mov	r1, r6
 80069fe:	4640      	mov	r0, r8
 8006a00:	f7ff fd20 	bl	8006444 <_free_r>
 8006a04:	e7e1      	b.n	80069ca <_realloc_r+0x1e>
 8006a06:	4635      	mov	r5, r6
 8006a08:	e7df      	b.n	80069ca <_realloc_r+0x1e>

08006a0a <__sfputc_r>:
 8006a0a:	6893      	ldr	r3, [r2, #8]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	b410      	push	{r4}
 8006a12:	6093      	str	r3, [r2, #8]
 8006a14:	da08      	bge.n	8006a28 <__sfputc_r+0x1e>
 8006a16:	6994      	ldr	r4, [r2, #24]
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	db01      	blt.n	8006a20 <__sfputc_r+0x16>
 8006a1c:	290a      	cmp	r1, #10
 8006a1e:	d103      	bne.n	8006a28 <__sfputc_r+0x1e>
 8006a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a24:	f000 b94a 	b.w	8006cbc <__swbuf_r>
 8006a28:	6813      	ldr	r3, [r2, #0]
 8006a2a:	1c58      	adds	r0, r3, #1
 8006a2c:	6010      	str	r0, [r2, #0]
 8006a2e:	7019      	strb	r1, [r3, #0]
 8006a30:	4608      	mov	r0, r1
 8006a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <__sfputs_r>:
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	460f      	mov	r7, r1
 8006a3e:	4614      	mov	r4, r2
 8006a40:	18d5      	adds	r5, r2, r3
 8006a42:	42ac      	cmp	r4, r5
 8006a44:	d101      	bne.n	8006a4a <__sfputs_r+0x12>
 8006a46:	2000      	movs	r0, #0
 8006a48:	e007      	b.n	8006a5a <__sfputs_r+0x22>
 8006a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a4e:	463a      	mov	r2, r7
 8006a50:	4630      	mov	r0, r6
 8006a52:	f7ff ffda 	bl	8006a0a <__sfputc_r>
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	d1f3      	bne.n	8006a42 <__sfputs_r+0xa>
 8006a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a5c <_vfiprintf_r>:
 8006a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a60:	460d      	mov	r5, r1
 8006a62:	b09d      	sub	sp, #116	; 0x74
 8006a64:	4614      	mov	r4, r2
 8006a66:	4698      	mov	r8, r3
 8006a68:	4606      	mov	r6, r0
 8006a6a:	b118      	cbz	r0, 8006a74 <_vfiprintf_r+0x18>
 8006a6c:	6983      	ldr	r3, [r0, #24]
 8006a6e:	b90b      	cbnz	r3, 8006a74 <_vfiprintf_r+0x18>
 8006a70:	f000 fb14 	bl	800709c <__sinit>
 8006a74:	4b89      	ldr	r3, [pc, #548]	; (8006c9c <_vfiprintf_r+0x240>)
 8006a76:	429d      	cmp	r5, r3
 8006a78:	d11b      	bne.n	8006ab2 <_vfiprintf_r+0x56>
 8006a7a:	6875      	ldr	r5, [r6, #4]
 8006a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a7e:	07d9      	lsls	r1, r3, #31
 8006a80:	d405      	bmi.n	8006a8e <_vfiprintf_r+0x32>
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	059a      	lsls	r2, r3, #22
 8006a86:	d402      	bmi.n	8006a8e <_vfiprintf_r+0x32>
 8006a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a8a:	f000 fba5 	bl	80071d8 <__retarget_lock_acquire_recursive>
 8006a8e:	89ab      	ldrh	r3, [r5, #12]
 8006a90:	071b      	lsls	r3, r3, #28
 8006a92:	d501      	bpl.n	8006a98 <_vfiprintf_r+0x3c>
 8006a94:	692b      	ldr	r3, [r5, #16]
 8006a96:	b9eb      	cbnz	r3, 8006ad4 <_vfiprintf_r+0x78>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f000 f96e 	bl	8006d7c <__swsetup_r>
 8006aa0:	b1c0      	cbz	r0, 8006ad4 <_vfiprintf_r+0x78>
 8006aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aa4:	07dc      	lsls	r4, r3, #31
 8006aa6:	d50e      	bpl.n	8006ac6 <_vfiprintf_r+0x6a>
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aac:	b01d      	add	sp, #116	; 0x74
 8006aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab2:	4b7b      	ldr	r3, [pc, #492]	; (8006ca0 <_vfiprintf_r+0x244>)
 8006ab4:	429d      	cmp	r5, r3
 8006ab6:	d101      	bne.n	8006abc <_vfiprintf_r+0x60>
 8006ab8:	68b5      	ldr	r5, [r6, #8]
 8006aba:	e7df      	b.n	8006a7c <_vfiprintf_r+0x20>
 8006abc:	4b79      	ldr	r3, [pc, #484]	; (8006ca4 <_vfiprintf_r+0x248>)
 8006abe:	429d      	cmp	r5, r3
 8006ac0:	bf08      	it	eq
 8006ac2:	68f5      	ldreq	r5, [r6, #12]
 8006ac4:	e7da      	b.n	8006a7c <_vfiprintf_r+0x20>
 8006ac6:	89ab      	ldrh	r3, [r5, #12]
 8006ac8:	0598      	lsls	r0, r3, #22
 8006aca:	d4ed      	bmi.n	8006aa8 <_vfiprintf_r+0x4c>
 8006acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ace:	f000 fb84 	bl	80071da <__retarget_lock_release_recursive>
 8006ad2:	e7e9      	b.n	8006aa8 <_vfiprintf_r+0x4c>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad8:	2320      	movs	r3, #32
 8006ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae2:	2330      	movs	r3, #48	; 0x30
 8006ae4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ca8 <_vfiprintf_r+0x24c>
 8006ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aec:	f04f 0901 	mov.w	r9, #1
 8006af0:	4623      	mov	r3, r4
 8006af2:	469a      	mov	sl, r3
 8006af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af8:	b10a      	cbz	r2, 8006afe <_vfiprintf_r+0xa2>
 8006afa:	2a25      	cmp	r2, #37	; 0x25
 8006afc:	d1f9      	bne.n	8006af2 <_vfiprintf_r+0x96>
 8006afe:	ebba 0b04 	subs.w	fp, sl, r4
 8006b02:	d00b      	beq.n	8006b1c <_vfiprintf_r+0xc0>
 8006b04:	465b      	mov	r3, fp
 8006b06:	4622      	mov	r2, r4
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7ff ff94 	bl	8006a38 <__sfputs_r>
 8006b10:	3001      	adds	r0, #1
 8006b12:	f000 80aa 	beq.w	8006c6a <_vfiprintf_r+0x20e>
 8006b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b18:	445a      	add	r2, fp
 8006b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80a2 	beq.w	8006c6a <_vfiprintf_r+0x20e>
 8006b26:	2300      	movs	r3, #0
 8006b28:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b30:	f10a 0a01 	add.w	sl, sl, #1
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	9307      	str	r3, [sp, #28]
 8006b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006b3e:	4654      	mov	r4, sl
 8006b40:	2205      	movs	r2, #5
 8006b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b46:	4858      	ldr	r0, [pc, #352]	; (8006ca8 <_vfiprintf_r+0x24c>)
 8006b48:	f7f9 fb4a 	bl	80001e0 <memchr>
 8006b4c:	9a04      	ldr	r2, [sp, #16]
 8006b4e:	b9d8      	cbnz	r0, 8006b88 <_vfiprintf_r+0x12c>
 8006b50:	06d1      	lsls	r1, r2, #27
 8006b52:	bf44      	itt	mi
 8006b54:	2320      	movmi	r3, #32
 8006b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5a:	0713      	lsls	r3, r2, #28
 8006b5c:	bf44      	itt	mi
 8006b5e:	232b      	movmi	r3, #43	; 0x2b
 8006b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b64:	f89a 3000 	ldrb.w	r3, [sl]
 8006b68:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6a:	d015      	beq.n	8006b98 <_vfiprintf_r+0x13c>
 8006b6c:	9a07      	ldr	r2, [sp, #28]
 8006b6e:	4654      	mov	r4, sl
 8006b70:	2000      	movs	r0, #0
 8006b72:	f04f 0c0a 	mov.w	ip, #10
 8006b76:	4621      	mov	r1, r4
 8006b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b7c:	3b30      	subs	r3, #48	; 0x30
 8006b7e:	2b09      	cmp	r3, #9
 8006b80:	d94e      	bls.n	8006c20 <_vfiprintf_r+0x1c4>
 8006b82:	b1b0      	cbz	r0, 8006bb2 <_vfiprintf_r+0x156>
 8006b84:	9207      	str	r2, [sp, #28]
 8006b86:	e014      	b.n	8006bb2 <_vfiprintf_r+0x156>
 8006b88:	eba0 0308 	sub.w	r3, r0, r8
 8006b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b90:	4313      	orrs	r3, r2
 8006b92:	9304      	str	r3, [sp, #16]
 8006b94:	46a2      	mov	sl, r4
 8006b96:	e7d2      	b.n	8006b3e <_vfiprintf_r+0xe2>
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	1d19      	adds	r1, r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	9103      	str	r1, [sp, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bfbb      	ittet	lt
 8006ba4:	425b      	neglt	r3, r3
 8006ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8006baa:	9307      	strge	r3, [sp, #28]
 8006bac:	9307      	strlt	r3, [sp, #28]
 8006bae:	bfb8      	it	lt
 8006bb0:	9204      	strlt	r2, [sp, #16]
 8006bb2:	7823      	ldrb	r3, [r4, #0]
 8006bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb6:	d10c      	bne.n	8006bd2 <_vfiprintf_r+0x176>
 8006bb8:	7863      	ldrb	r3, [r4, #1]
 8006bba:	2b2a      	cmp	r3, #42	; 0x2a
 8006bbc:	d135      	bne.n	8006c2a <_vfiprintf_r+0x1ce>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	1d1a      	adds	r2, r3, #4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	9203      	str	r2, [sp, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfb8      	it	lt
 8006bca:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bce:	3402      	adds	r4, #2
 8006bd0:	9305      	str	r3, [sp, #20]
 8006bd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006cb8 <_vfiprintf_r+0x25c>
 8006bd6:	7821      	ldrb	r1, [r4, #0]
 8006bd8:	2203      	movs	r2, #3
 8006bda:	4650      	mov	r0, sl
 8006bdc:	f7f9 fb00 	bl	80001e0 <memchr>
 8006be0:	b140      	cbz	r0, 8006bf4 <_vfiprintf_r+0x198>
 8006be2:	2340      	movs	r3, #64	; 0x40
 8006be4:	eba0 000a 	sub.w	r0, r0, sl
 8006be8:	fa03 f000 	lsl.w	r0, r3, r0
 8006bec:	9b04      	ldr	r3, [sp, #16]
 8006bee:	4303      	orrs	r3, r0
 8006bf0:	3401      	adds	r4, #1
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf8:	482c      	ldr	r0, [pc, #176]	; (8006cac <_vfiprintf_r+0x250>)
 8006bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bfe:	2206      	movs	r2, #6
 8006c00:	f7f9 faee 	bl	80001e0 <memchr>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d03f      	beq.n	8006c88 <_vfiprintf_r+0x22c>
 8006c08:	4b29      	ldr	r3, [pc, #164]	; (8006cb0 <_vfiprintf_r+0x254>)
 8006c0a:	bb1b      	cbnz	r3, 8006c54 <_vfiprintf_r+0x1f8>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	3307      	adds	r3, #7
 8006c10:	f023 0307 	bic.w	r3, r3, #7
 8006c14:	3308      	adds	r3, #8
 8006c16:	9303      	str	r3, [sp, #12]
 8006c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1a:	443b      	add	r3, r7
 8006c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1e:	e767      	b.n	8006af0 <_vfiprintf_r+0x94>
 8006c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c24:	460c      	mov	r4, r1
 8006c26:	2001      	movs	r0, #1
 8006c28:	e7a5      	b.n	8006b76 <_vfiprintf_r+0x11a>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	3401      	adds	r4, #1
 8006c2e:	9305      	str	r3, [sp, #20]
 8006c30:	4619      	mov	r1, r3
 8006c32:	f04f 0c0a 	mov.w	ip, #10
 8006c36:	4620      	mov	r0, r4
 8006c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c3c:	3a30      	subs	r2, #48	; 0x30
 8006c3e:	2a09      	cmp	r2, #9
 8006c40:	d903      	bls.n	8006c4a <_vfiprintf_r+0x1ee>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0c5      	beq.n	8006bd2 <_vfiprintf_r+0x176>
 8006c46:	9105      	str	r1, [sp, #20]
 8006c48:	e7c3      	b.n	8006bd2 <_vfiprintf_r+0x176>
 8006c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c4e:	4604      	mov	r4, r0
 8006c50:	2301      	movs	r3, #1
 8006c52:	e7f0      	b.n	8006c36 <_vfiprintf_r+0x1da>
 8006c54:	ab03      	add	r3, sp, #12
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4b16      	ldr	r3, [pc, #88]	; (8006cb4 <_vfiprintf_r+0x258>)
 8006c5c:	a904      	add	r1, sp, #16
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f7fd fdb6 	bl	80047d0 <_printf_float>
 8006c64:	4607      	mov	r7, r0
 8006c66:	1c78      	adds	r0, r7, #1
 8006c68:	d1d6      	bne.n	8006c18 <_vfiprintf_r+0x1bc>
 8006c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c6c:	07d9      	lsls	r1, r3, #31
 8006c6e:	d405      	bmi.n	8006c7c <_vfiprintf_r+0x220>
 8006c70:	89ab      	ldrh	r3, [r5, #12]
 8006c72:	059a      	lsls	r2, r3, #22
 8006c74:	d402      	bmi.n	8006c7c <_vfiprintf_r+0x220>
 8006c76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c78:	f000 faaf 	bl	80071da <__retarget_lock_release_recursive>
 8006c7c:	89ab      	ldrh	r3, [r5, #12]
 8006c7e:	065b      	lsls	r3, r3, #25
 8006c80:	f53f af12 	bmi.w	8006aa8 <_vfiprintf_r+0x4c>
 8006c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c86:	e711      	b.n	8006aac <_vfiprintf_r+0x50>
 8006c88:	ab03      	add	r3, sp, #12
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	462a      	mov	r2, r5
 8006c8e:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <_vfiprintf_r+0x258>)
 8006c90:	a904      	add	r1, sp, #16
 8006c92:	4630      	mov	r0, r6
 8006c94:	f7fe f840 	bl	8004d18 <_printf_i>
 8006c98:	e7e4      	b.n	8006c64 <_vfiprintf_r+0x208>
 8006c9a:	bf00      	nop
 8006c9c:	08007934 	.word	0x08007934
 8006ca0:	08007954 	.word	0x08007954
 8006ca4:	08007914 	.word	0x08007914
 8006ca8:	080077bc 	.word	0x080077bc
 8006cac:	080077c6 	.word	0x080077c6
 8006cb0:	080047d1 	.word	0x080047d1
 8006cb4:	08006a39 	.word	0x08006a39
 8006cb8:	080077c2 	.word	0x080077c2

08006cbc <__swbuf_r>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	460e      	mov	r6, r1
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	b118      	cbz	r0, 8006cce <__swbuf_r+0x12>
 8006cc6:	6983      	ldr	r3, [r0, #24]
 8006cc8:	b90b      	cbnz	r3, 8006cce <__swbuf_r+0x12>
 8006cca:	f000 f9e7 	bl	800709c <__sinit>
 8006cce:	4b21      	ldr	r3, [pc, #132]	; (8006d54 <__swbuf_r+0x98>)
 8006cd0:	429c      	cmp	r4, r3
 8006cd2:	d12b      	bne.n	8006d2c <__swbuf_r+0x70>
 8006cd4:	686c      	ldr	r4, [r5, #4]
 8006cd6:	69a3      	ldr	r3, [r4, #24]
 8006cd8:	60a3      	str	r3, [r4, #8]
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	071a      	lsls	r2, r3, #28
 8006cde:	d52f      	bpl.n	8006d40 <__swbuf_r+0x84>
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	b36b      	cbz	r3, 8006d40 <__swbuf_r+0x84>
 8006ce4:	6923      	ldr	r3, [r4, #16]
 8006ce6:	6820      	ldr	r0, [r4, #0]
 8006ce8:	1ac0      	subs	r0, r0, r3
 8006cea:	6963      	ldr	r3, [r4, #20]
 8006cec:	b2f6      	uxtb	r6, r6
 8006cee:	4283      	cmp	r3, r0
 8006cf0:	4637      	mov	r7, r6
 8006cf2:	dc04      	bgt.n	8006cfe <__swbuf_r+0x42>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f000 f93c 	bl	8006f74 <_fflush_r>
 8006cfc:	bb30      	cbnz	r0, 8006d4c <__swbuf_r+0x90>
 8006cfe:	68a3      	ldr	r3, [r4, #8]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	60a3      	str	r3, [r4, #8]
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	6022      	str	r2, [r4, #0]
 8006d0a:	701e      	strb	r6, [r3, #0]
 8006d0c:	6963      	ldr	r3, [r4, #20]
 8006d0e:	3001      	adds	r0, #1
 8006d10:	4283      	cmp	r3, r0
 8006d12:	d004      	beq.n	8006d1e <__swbuf_r+0x62>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	07db      	lsls	r3, r3, #31
 8006d18:	d506      	bpl.n	8006d28 <__swbuf_r+0x6c>
 8006d1a:	2e0a      	cmp	r6, #10
 8006d1c:	d104      	bne.n	8006d28 <__swbuf_r+0x6c>
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 f927 	bl	8006f74 <_fflush_r>
 8006d26:	b988      	cbnz	r0, 8006d4c <__swbuf_r+0x90>
 8006d28:	4638      	mov	r0, r7
 8006d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <__swbuf_r+0x9c>)
 8006d2e:	429c      	cmp	r4, r3
 8006d30:	d101      	bne.n	8006d36 <__swbuf_r+0x7a>
 8006d32:	68ac      	ldr	r4, [r5, #8]
 8006d34:	e7cf      	b.n	8006cd6 <__swbuf_r+0x1a>
 8006d36:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <__swbuf_r+0xa0>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	bf08      	it	eq
 8006d3c:	68ec      	ldreq	r4, [r5, #12]
 8006d3e:	e7ca      	b.n	8006cd6 <__swbuf_r+0x1a>
 8006d40:	4621      	mov	r1, r4
 8006d42:	4628      	mov	r0, r5
 8006d44:	f000 f81a 	bl	8006d7c <__swsetup_r>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d0cb      	beq.n	8006ce4 <__swbuf_r+0x28>
 8006d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d50:	e7ea      	b.n	8006d28 <__swbuf_r+0x6c>
 8006d52:	bf00      	nop
 8006d54:	08007934 	.word	0x08007934
 8006d58:	08007954 	.word	0x08007954
 8006d5c:	08007914 	.word	0x08007914

08006d60 <__ascii_wctomb>:
 8006d60:	b149      	cbz	r1, 8006d76 <__ascii_wctomb+0x16>
 8006d62:	2aff      	cmp	r2, #255	; 0xff
 8006d64:	bf85      	ittet	hi
 8006d66:	238a      	movhi	r3, #138	; 0x8a
 8006d68:	6003      	strhi	r3, [r0, #0]
 8006d6a:	700a      	strbls	r2, [r1, #0]
 8006d6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d70:	bf98      	it	ls
 8006d72:	2001      	movls	r0, #1
 8006d74:	4770      	bx	lr
 8006d76:	4608      	mov	r0, r1
 8006d78:	4770      	bx	lr
	...

08006d7c <__swsetup_r>:
 8006d7c:	4b32      	ldr	r3, [pc, #200]	; (8006e48 <__swsetup_r+0xcc>)
 8006d7e:	b570      	push	{r4, r5, r6, lr}
 8006d80:	681d      	ldr	r5, [r3, #0]
 8006d82:	4606      	mov	r6, r0
 8006d84:	460c      	mov	r4, r1
 8006d86:	b125      	cbz	r5, 8006d92 <__swsetup_r+0x16>
 8006d88:	69ab      	ldr	r3, [r5, #24]
 8006d8a:	b913      	cbnz	r3, 8006d92 <__swsetup_r+0x16>
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f000 f985 	bl	800709c <__sinit>
 8006d92:	4b2e      	ldr	r3, [pc, #184]	; (8006e4c <__swsetup_r+0xd0>)
 8006d94:	429c      	cmp	r4, r3
 8006d96:	d10f      	bne.n	8006db8 <__swsetup_r+0x3c>
 8006d98:	686c      	ldr	r4, [r5, #4]
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006da0:	0719      	lsls	r1, r3, #28
 8006da2:	d42c      	bmi.n	8006dfe <__swsetup_r+0x82>
 8006da4:	06dd      	lsls	r5, r3, #27
 8006da6:	d411      	bmi.n	8006dcc <__swsetup_r+0x50>
 8006da8:	2309      	movs	r3, #9
 8006daa:	6033      	str	r3, [r6, #0]
 8006dac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	f04f 30ff 	mov.w	r0, #4294967295
 8006db6:	e03e      	b.n	8006e36 <__swsetup_r+0xba>
 8006db8:	4b25      	ldr	r3, [pc, #148]	; (8006e50 <__swsetup_r+0xd4>)
 8006dba:	429c      	cmp	r4, r3
 8006dbc:	d101      	bne.n	8006dc2 <__swsetup_r+0x46>
 8006dbe:	68ac      	ldr	r4, [r5, #8]
 8006dc0:	e7eb      	b.n	8006d9a <__swsetup_r+0x1e>
 8006dc2:	4b24      	ldr	r3, [pc, #144]	; (8006e54 <__swsetup_r+0xd8>)
 8006dc4:	429c      	cmp	r4, r3
 8006dc6:	bf08      	it	eq
 8006dc8:	68ec      	ldreq	r4, [r5, #12]
 8006dca:	e7e6      	b.n	8006d9a <__swsetup_r+0x1e>
 8006dcc:	0758      	lsls	r0, r3, #29
 8006dce:	d512      	bpl.n	8006df6 <__swsetup_r+0x7a>
 8006dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dd2:	b141      	cbz	r1, 8006de6 <__swsetup_r+0x6a>
 8006dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dd8:	4299      	cmp	r1, r3
 8006dda:	d002      	beq.n	8006de2 <__swsetup_r+0x66>
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7ff fb31 	bl	8006444 <_free_r>
 8006de2:	2300      	movs	r3, #0
 8006de4:	6363      	str	r3, [r4, #52]	; 0x34
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dec:	81a3      	strh	r3, [r4, #12]
 8006dee:	2300      	movs	r3, #0
 8006df0:	6063      	str	r3, [r4, #4]
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	f043 0308 	orr.w	r3, r3, #8
 8006dfc:	81a3      	strh	r3, [r4, #12]
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	b94b      	cbnz	r3, 8006e16 <__swsetup_r+0x9a>
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e0c:	d003      	beq.n	8006e16 <__swsetup_r+0x9a>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4630      	mov	r0, r6
 8006e12:	f000 fa09 	bl	8007228 <__smakebuf_r>
 8006e16:	89a0      	ldrh	r0, [r4, #12]
 8006e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e1c:	f010 0301 	ands.w	r3, r0, #1
 8006e20:	d00a      	beq.n	8006e38 <__swsetup_r+0xbc>
 8006e22:	2300      	movs	r3, #0
 8006e24:	60a3      	str	r3, [r4, #8]
 8006e26:	6963      	ldr	r3, [r4, #20]
 8006e28:	425b      	negs	r3, r3
 8006e2a:	61a3      	str	r3, [r4, #24]
 8006e2c:	6923      	ldr	r3, [r4, #16]
 8006e2e:	b943      	cbnz	r3, 8006e42 <__swsetup_r+0xc6>
 8006e30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e34:	d1ba      	bne.n	8006dac <__swsetup_r+0x30>
 8006e36:	bd70      	pop	{r4, r5, r6, pc}
 8006e38:	0781      	lsls	r1, r0, #30
 8006e3a:	bf58      	it	pl
 8006e3c:	6963      	ldrpl	r3, [r4, #20]
 8006e3e:	60a3      	str	r3, [r4, #8]
 8006e40:	e7f4      	b.n	8006e2c <__swsetup_r+0xb0>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e7f7      	b.n	8006e36 <__swsetup_r+0xba>
 8006e46:	bf00      	nop
 8006e48:	20000010 	.word	0x20000010
 8006e4c:	08007934 	.word	0x08007934
 8006e50:	08007954 	.word	0x08007954
 8006e54:	08007914 	.word	0x08007914

08006e58 <abort>:
 8006e58:	b508      	push	{r3, lr}
 8006e5a:	2006      	movs	r0, #6
 8006e5c:	f000 fa54 	bl	8007308 <raise>
 8006e60:	2001      	movs	r0, #1
 8006e62:	f7fb fb49 	bl	80024f8 <_exit>
	...

08006e68 <__sflush_r>:
 8006e68:	898a      	ldrh	r2, [r1, #12]
 8006e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6e:	4605      	mov	r5, r0
 8006e70:	0710      	lsls	r0, r2, #28
 8006e72:	460c      	mov	r4, r1
 8006e74:	d458      	bmi.n	8006f28 <__sflush_r+0xc0>
 8006e76:	684b      	ldr	r3, [r1, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	dc05      	bgt.n	8006e88 <__sflush_r+0x20>
 8006e7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dc02      	bgt.n	8006e88 <__sflush_r+0x20>
 8006e82:	2000      	movs	r0, #0
 8006e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	d0f9      	beq.n	8006e82 <__sflush_r+0x1a>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e94:	682f      	ldr	r7, [r5, #0]
 8006e96:	602b      	str	r3, [r5, #0]
 8006e98:	d032      	beq.n	8006f00 <__sflush_r+0x98>
 8006e9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	075a      	lsls	r2, r3, #29
 8006ea0:	d505      	bpl.n	8006eae <__sflush_r+0x46>
 8006ea2:	6863      	ldr	r3, [r4, #4]
 8006ea4:	1ac0      	subs	r0, r0, r3
 8006ea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ea8:	b10b      	cbz	r3, 8006eae <__sflush_r+0x46>
 8006eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006eac:	1ac0      	subs	r0, r0, r3
 8006eae:	2300      	movs	r3, #0
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eb4:	6a21      	ldr	r1, [r4, #32]
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	47b0      	blx	r6
 8006eba:	1c43      	adds	r3, r0, #1
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	d106      	bne.n	8006ece <__sflush_r+0x66>
 8006ec0:	6829      	ldr	r1, [r5, #0]
 8006ec2:	291d      	cmp	r1, #29
 8006ec4:	d82c      	bhi.n	8006f20 <__sflush_r+0xb8>
 8006ec6:	4a2a      	ldr	r2, [pc, #168]	; (8006f70 <__sflush_r+0x108>)
 8006ec8:	40ca      	lsrs	r2, r1
 8006eca:	07d6      	lsls	r6, r2, #31
 8006ecc:	d528      	bpl.n	8006f20 <__sflush_r+0xb8>
 8006ece:	2200      	movs	r2, #0
 8006ed0:	6062      	str	r2, [r4, #4]
 8006ed2:	04d9      	lsls	r1, r3, #19
 8006ed4:	6922      	ldr	r2, [r4, #16]
 8006ed6:	6022      	str	r2, [r4, #0]
 8006ed8:	d504      	bpl.n	8006ee4 <__sflush_r+0x7c>
 8006eda:	1c42      	adds	r2, r0, #1
 8006edc:	d101      	bne.n	8006ee2 <__sflush_r+0x7a>
 8006ede:	682b      	ldr	r3, [r5, #0]
 8006ee0:	b903      	cbnz	r3, 8006ee4 <__sflush_r+0x7c>
 8006ee2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ee6:	602f      	str	r7, [r5, #0]
 8006ee8:	2900      	cmp	r1, #0
 8006eea:	d0ca      	beq.n	8006e82 <__sflush_r+0x1a>
 8006eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ef0:	4299      	cmp	r1, r3
 8006ef2:	d002      	beq.n	8006efa <__sflush_r+0x92>
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f7ff faa5 	bl	8006444 <_free_r>
 8006efa:	2000      	movs	r0, #0
 8006efc:	6360      	str	r0, [r4, #52]	; 0x34
 8006efe:	e7c1      	b.n	8006e84 <__sflush_r+0x1c>
 8006f00:	6a21      	ldr	r1, [r4, #32]
 8006f02:	2301      	movs	r3, #1
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b0      	blx	r6
 8006f08:	1c41      	adds	r1, r0, #1
 8006f0a:	d1c7      	bne.n	8006e9c <__sflush_r+0x34>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0c4      	beq.n	8006e9c <__sflush_r+0x34>
 8006f12:	2b1d      	cmp	r3, #29
 8006f14:	d001      	beq.n	8006f1a <__sflush_r+0xb2>
 8006f16:	2b16      	cmp	r3, #22
 8006f18:	d101      	bne.n	8006f1e <__sflush_r+0xb6>
 8006f1a:	602f      	str	r7, [r5, #0]
 8006f1c:	e7b1      	b.n	8006e82 <__sflush_r+0x1a>
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f24:	81a3      	strh	r3, [r4, #12]
 8006f26:	e7ad      	b.n	8006e84 <__sflush_r+0x1c>
 8006f28:	690f      	ldr	r7, [r1, #16]
 8006f2a:	2f00      	cmp	r7, #0
 8006f2c:	d0a9      	beq.n	8006e82 <__sflush_r+0x1a>
 8006f2e:	0793      	lsls	r3, r2, #30
 8006f30:	680e      	ldr	r6, [r1, #0]
 8006f32:	bf08      	it	eq
 8006f34:	694b      	ldreq	r3, [r1, #20]
 8006f36:	600f      	str	r7, [r1, #0]
 8006f38:	bf18      	it	ne
 8006f3a:	2300      	movne	r3, #0
 8006f3c:	eba6 0807 	sub.w	r8, r6, r7
 8006f40:	608b      	str	r3, [r1, #8]
 8006f42:	f1b8 0f00 	cmp.w	r8, #0
 8006f46:	dd9c      	ble.n	8006e82 <__sflush_r+0x1a>
 8006f48:	6a21      	ldr	r1, [r4, #32]
 8006f4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f4c:	4643      	mov	r3, r8
 8006f4e:	463a      	mov	r2, r7
 8006f50:	4628      	mov	r0, r5
 8006f52:	47b0      	blx	r6
 8006f54:	2800      	cmp	r0, #0
 8006f56:	dc06      	bgt.n	8006f66 <__sflush_r+0xfe>
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f5e:	81a3      	strh	r3, [r4, #12]
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
 8006f64:	e78e      	b.n	8006e84 <__sflush_r+0x1c>
 8006f66:	4407      	add	r7, r0
 8006f68:	eba8 0800 	sub.w	r8, r8, r0
 8006f6c:	e7e9      	b.n	8006f42 <__sflush_r+0xda>
 8006f6e:	bf00      	nop
 8006f70:	20400001 	.word	0x20400001

08006f74 <_fflush_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	690b      	ldr	r3, [r1, #16]
 8006f78:	4605      	mov	r5, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	b913      	cbnz	r3, 8006f84 <_fflush_r+0x10>
 8006f7e:	2500      	movs	r5, #0
 8006f80:	4628      	mov	r0, r5
 8006f82:	bd38      	pop	{r3, r4, r5, pc}
 8006f84:	b118      	cbz	r0, 8006f8e <_fflush_r+0x1a>
 8006f86:	6983      	ldr	r3, [r0, #24]
 8006f88:	b90b      	cbnz	r3, 8006f8e <_fflush_r+0x1a>
 8006f8a:	f000 f887 	bl	800709c <__sinit>
 8006f8e:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <_fflush_r+0x6c>)
 8006f90:	429c      	cmp	r4, r3
 8006f92:	d11b      	bne.n	8006fcc <_fflush_r+0x58>
 8006f94:	686c      	ldr	r4, [r5, #4]
 8006f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0ef      	beq.n	8006f7e <_fflush_r+0xa>
 8006f9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fa0:	07d0      	lsls	r0, r2, #31
 8006fa2:	d404      	bmi.n	8006fae <_fflush_r+0x3a>
 8006fa4:	0599      	lsls	r1, r3, #22
 8006fa6:	d402      	bmi.n	8006fae <_fflush_r+0x3a>
 8006fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006faa:	f000 f915 	bl	80071d8 <__retarget_lock_acquire_recursive>
 8006fae:	4628      	mov	r0, r5
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	f7ff ff59 	bl	8006e68 <__sflush_r>
 8006fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fb8:	07da      	lsls	r2, r3, #31
 8006fba:	4605      	mov	r5, r0
 8006fbc:	d4e0      	bmi.n	8006f80 <_fflush_r+0xc>
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	059b      	lsls	r3, r3, #22
 8006fc2:	d4dd      	bmi.n	8006f80 <_fflush_r+0xc>
 8006fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fc6:	f000 f908 	bl	80071da <__retarget_lock_release_recursive>
 8006fca:	e7d9      	b.n	8006f80 <_fflush_r+0xc>
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <_fflush_r+0x70>)
 8006fce:	429c      	cmp	r4, r3
 8006fd0:	d101      	bne.n	8006fd6 <_fflush_r+0x62>
 8006fd2:	68ac      	ldr	r4, [r5, #8]
 8006fd4:	e7df      	b.n	8006f96 <_fflush_r+0x22>
 8006fd6:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <_fflush_r+0x74>)
 8006fd8:	429c      	cmp	r4, r3
 8006fda:	bf08      	it	eq
 8006fdc:	68ec      	ldreq	r4, [r5, #12]
 8006fde:	e7da      	b.n	8006f96 <_fflush_r+0x22>
 8006fe0:	08007934 	.word	0x08007934
 8006fe4:	08007954 	.word	0x08007954
 8006fe8:	08007914 	.word	0x08007914

08006fec <std>:
 8006fec:	2300      	movs	r3, #0
 8006fee:	b510      	push	{r4, lr}
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ffa:	6083      	str	r3, [r0, #8]
 8006ffc:	8181      	strh	r1, [r0, #12]
 8006ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8007000:	81c2      	strh	r2, [r0, #14]
 8007002:	6183      	str	r3, [r0, #24]
 8007004:	4619      	mov	r1, r3
 8007006:	2208      	movs	r2, #8
 8007008:	305c      	adds	r0, #92	; 0x5c
 800700a:	f7fd fb39 	bl	8004680 <memset>
 800700e:	4b05      	ldr	r3, [pc, #20]	; (8007024 <std+0x38>)
 8007010:	6263      	str	r3, [r4, #36]	; 0x24
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <std+0x3c>)
 8007014:	62a3      	str	r3, [r4, #40]	; 0x28
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <std+0x40>)
 8007018:	62e3      	str	r3, [r4, #44]	; 0x2c
 800701a:	4b05      	ldr	r3, [pc, #20]	; (8007030 <std+0x44>)
 800701c:	6224      	str	r4, [r4, #32]
 800701e:	6323      	str	r3, [r4, #48]	; 0x30
 8007020:	bd10      	pop	{r4, pc}
 8007022:	bf00      	nop
 8007024:	08007341 	.word	0x08007341
 8007028:	08007363 	.word	0x08007363
 800702c:	0800739b 	.word	0x0800739b
 8007030:	080073bf 	.word	0x080073bf

08007034 <_cleanup_r>:
 8007034:	4901      	ldr	r1, [pc, #4]	; (800703c <_cleanup_r+0x8>)
 8007036:	f000 b8af 	b.w	8007198 <_fwalk_reent>
 800703a:	bf00      	nop
 800703c:	08006f75 	.word	0x08006f75

08007040 <__sfmoreglue>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	2268      	movs	r2, #104	; 0x68
 8007044:	1e4d      	subs	r5, r1, #1
 8007046:	4355      	muls	r5, r2
 8007048:	460e      	mov	r6, r1
 800704a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800704e:	f7ff fa65 	bl	800651c <_malloc_r>
 8007052:	4604      	mov	r4, r0
 8007054:	b140      	cbz	r0, 8007068 <__sfmoreglue+0x28>
 8007056:	2100      	movs	r1, #0
 8007058:	e9c0 1600 	strd	r1, r6, [r0]
 800705c:	300c      	adds	r0, #12
 800705e:	60a0      	str	r0, [r4, #8]
 8007060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007064:	f7fd fb0c 	bl	8004680 <memset>
 8007068:	4620      	mov	r0, r4
 800706a:	bd70      	pop	{r4, r5, r6, pc}

0800706c <__sfp_lock_acquire>:
 800706c:	4801      	ldr	r0, [pc, #4]	; (8007074 <__sfp_lock_acquire+0x8>)
 800706e:	f000 b8b3 	b.w	80071d8 <__retarget_lock_acquire_recursive>
 8007072:	bf00      	nop
 8007074:	200002bd 	.word	0x200002bd

08007078 <__sfp_lock_release>:
 8007078:	4801      	ldr	r0, [pc, #4]	; (8007080 <__sfp_lock_release+0x8>)
 800707a:	f000 b8ae 	b.w	80071da <__retarget_lock_release_recursive>
 800707e:	bf00      	nop
 8007080:	200002bd 	.word	0x200002bd

08007084 <__sinit_lock_acquire>:
 8007084:	4801      	ldr	r0, [pc, #4]	; (800708c <__sinit_lock_acquire+0x8>)
 8007086:	f000 b8a7 	b.w	80071d8 <__retarget_lock_acquire_recursive>
 800708a:	bf00      	nop
 800708c:	200002be 	.word	0x200002be

08007090 <__sinit_lock_release>:
 8007090:	4801      	ldr	r0, [pc, #4]	; (8007098 <__sinit_lock_release+0x8>)
 8007092:	f000 b8a2 	b.w	80071da <__retarget_lock_release_recursive>
 8007096:	bf00      	nop
 8007098:	200002be 	.word	0x200002be

0800709c <__sinit>:
 800709c:	b510      	push	{r4, lr}
 800709e:	4604      	mov	r4, r0
 80070a0:	f7ff fff0 	bl	8007084 <__sinit_lock_acquire>
 80070a4:	69a3      	ldr	r3, [r4, #24]
 80070a6:	b11b      	cbz	r3, 80070b0 <__sinit+0x14>
 80070a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ac:	f7ff bff0 	b.w	8007090 <__sinit_lock_release>
 80070b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070b4:	6523      	str	r3, [r4, #80]	; 0x50
 80070b6:	4b13      	ldr	r3, [pc, #76]	; (8007104 <__sinit+0x68>)
 80070b8:	4a13      	ldr	r2, [pc, #76]	; (8007108 <__sinit+0x6c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80070be:	42a3      	cmp	r3, r4
 80070c0:	bf04      	itt	eq
 80070c2:	2301      	moveq	r3, #1
 80070c4:	61a3      	streq	r3, [r4, #24]
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 f820 	bl	800710c <__sfp>
 80070cc:	6060      	str	r0, [r4, #4]
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 f81c 	bl	800710c <__sfp>
 80070d4:	60a0      	str	r0, [r4, #8]
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 f818 	bl	800710c <__sfp>
 80070dc:	2200      	movs	r2, #0
 80070de:	60e0      	str	r0, [r4, #12]
 80070e0:	2104      	movs	r1, #4
 80070e2:	6860      	ldr	r0, [r4, #4]
 80070e4:	f7ff ff82 	bl	8006fec <std>
 80070e8:	68a0      	ldr	r0, [r4, #8]
 80070ea:	2201      	movs	r2, #1
 80070ec:	2109      	movs	r1, #9
 80070ee:	f7ff ff7d 	bl	8006fec <std>
 80070f2:	68e0      	ldr	r0, [r4, #12]
 80070f4:	2202      	movs	r2, #2
 80070f6:	2112      	movs	r1, #18
 80070f8:	f7ff ff78 	bl	8006fec <std>
 80070fc:	2301      	movs	r3, #1
 80070fe:	61a3      	str	r3, [r4, #24]
 8007100:	e7d2      	b.n	80070a8 <__sinit+0xc>
 8007102:	bf00      	nop
 8007104:	08007598 	.word	0x08007598
 8007108:	08007035 	.word	0x08007035

0800710c <__sfp>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	4607      	mov	r7, r0
 8007110:	f7ff ffac 	bl	800706c <__sfp_lock_acquire>
 8007114:	4b1e      	ldr	r3, [pc, #120]	; (8007190 <__sfp+0x84>)
 8007116:	681e      	ldr	r6, [r3, #0]
 8007118:	69b3      	ldr	r3, [r6, #24]
 800711a:	b913      	cbnz	r3, 8007122 <__sfp+0x16>
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff ffbd 	bl	800709c <__sinit>
 8007122:	3648      	adds	r6, #72	; 0x48
 8007124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007128:	3b01      	subs	r3, #1
 800712a:	d503      	bpl.n	8007134 <__sfp+0x28>
 800712c:	6833      	ldr	r3, [r6, #0]
 800712e:	b30b      	cbz	r3, 8007174 <__sfp+0x68>
 8007130:	6836      	ldr	r6, [r6, #0]
 8007132:	e7f7      	b.n	8007124 <__sfp+0x18>
 8007134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007138:	b9d5      	cbnz	r5, 8007170 <__sfp+0x64>
 800713a:	4b16      	ldr	r3, [pc, #88]	; (8007194 <__sfp+0x88>)
 800713c:	60e3      	str	r3, [r4, #12]
 800713e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007142:	6665      	str	r5, [r4, #100]	; 0x64
 8007144:	f000 f847 	bl	80071d6 <__retarget_lock_init_recursive>
 8007148:	f7ff ff96 	bl	8007078 <__sfp_lock_release>
 800714c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007150:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007154:	6025      	str	r5, [r4, #0]
 8007156:	61a5      	str	r5, [r4, #24]
 8007158:	2208      	movs	r2, #8
 800715a:	4629      	mov	r1, r5
 800715c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007160:	f7fd fa8e 	bl	8004680 <memset>
 8007164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800716c:	4620      	mov	r0, r4
 800716e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007170:	3468      	adds	r4, #104	; 0x68
 8007172:	e7d9      	b.n	8007128 <__sfp+0x1c>
 8007174:	2104      	movs	r1, #4
 8007176:	4638      	mov	r0, r7
 8007178:	f7ff ff62 	bl	8007040 <__sfmoreglue>
 800717c:	4604      	mov	r4, r0
 800717e:	6030      	str	r0, [r6, #0]
 8007180:	2800      	cmp	r0, #0
 8007182:	d1d5      	bne.n	8007130 <__sfp+0x24>
 8007184:	f7ff ff78 	bl	8007078 <__sfp_lock_release>
 8007188:	230c      	movs	r3, #12
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	e7ee      	b.n	800716c <__sfp+0x60>
 800718e:	bf00      	nop
 8007190:	08007598 	.word	0x08007598
 8007194:	ffff0001 	.word	0xffff0001

08007198 <_fwalk_reent>:
 8007198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800719c:	4606      	mov	r6, r0
 800719e:	4688      	mov	r8, r1
 80071a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071a4:	2700      	movs	r7, #0
 80071a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071aa:	f1b9 0901 	subs.w	r9, r9, #1
 80071ae:	d505      	bpl.n	80071bc <_fwalk_reent+0x24>
 80071b0:	6824      	ldr	r4, [r4, #0]
 80071b2:	2c00      	cmp	r4, #0
 80071b4:	d1f7      	bne.n	80071a6 <_fwalk_reent+0xe>
 80071b6:	4638      	mov	r0, r7
 80071b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071bc:	89ab      	ldrh	r3, [r5, #12]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d907      	bls.n	80071d2 <_fwalk_reent+0x3a>
 80071c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071c6:	3301      	adds	r3, #1
 80071c8:	d003      	beq.n	80071d2 <_fwalk_reent+0x3a>
 80071ca:	4629      	mov	r1, r5
 80071cc:	4630      	mov	r0, r6
 80071ce:	47c0      	blx	r8
 80071d0:	4307      	orrs	r7, r0
 80071d2:	3568      	adds	r5, #104	; 0x68
 80071d4:	e7e9      	b.n	80071aa <_fwalk_reent+0x12>

080071d6 <__retarget_lock_init_recursive>:
 80071d6:	4770      	bx	lr

080071d8 <__retarget_lock_acquire_recursive>:
 80071d8:	4770      	bx	lr

080071da <__retarget_lock_release_recursive>:
 80071da:	4770      	bx	lr

080071dc <__swhatbuf_r>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	460e      	mov	r6, r1
 80071e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e4:	2900      	cmp	r1, #0
 80071e6:	b096      	sub	sp, #88	; 0x58
 80071e8:	4614      	mov	r4, r2
 80071ea:	461d      	mov	r5, r3
 80071ec:	da08      	bge.n	8007200 <__swhatbuf_r+0x24>
 80071ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	602a      	str	r2, [r5, #0]
 80071f6:	061a      	lsls	r2, r3, #24
 80071f8:	d410      	bmi.n	800721c <__swhatbuf_r+0x40>
 80071fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071fe:	e00e      	b.n	800721e <__swhatbuf_r+0x42>
 8007200:	466a      	mov	r2, sp
 8007202:	f000 f903 	bl	800740c <_fstat_r>
 8007206:	2800      	cmp	r0, #0
 8007208:	dbf1      	blt.n	80071ee <__swhatbuf_r+0x12>
 800720a:	9a01      	ldr	r2, [sp, #4]
 800720c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007210:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007214:	425a      	negs	r2, r3
 8007216:	415a      	adcs	r2, r3
 8007218:	602a      	str	r2, [r5, #0]
 800721a:	e7ee      	b.n	80071fa <__swhatbuf_r+0x1e>
 800721c:	2340      	movs	r3, #64	; 0x40
 800721e:	2000      	movs	r0, #0
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	b016      	add	sp, #88	; 0x58
 8007224:	bd70      	pop	{r4, r5, r6, pc}
	...

08007228 <__smakebuf_r>:
 8007228:	898b      	ldrh	r3, [r1, #12]
 800722a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800722c:	079d      	lsls	r5, r3, #30
 800722e:	4606      	mov	r6, r0
 8007230:	460c      	mov	r4, r1
 8007232:	d507      	bpl.n	8007244 <__smakebuf_r+0x1c>
 8007234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	6123      	str	r3, [r4, #16]
 800723c:	2301      	movs	r3, #1
 800723e:	6163      	str	r3, [r4, #20]
 8007240:	b002      	add	sp, #8
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	ab01      	add	r3, sp, #4
 8007246:	466a      	mov	r2, sp
 8007248:	f7ff ffc8 	bl	80071dc <__swhatbuf_r>
 800724c:	9900      	ldr	r1, [sp, #0]
 800724e:	4605      	mov	r5, r0
 8007250:	4630      	mov	r0, r6
 8007252:	f7ff f963 	bl	800651c <_malloc_r>
 8007256:	b948      	cbnz	r0, 800726c <__smakebuf_r+0x44>
 8007258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800725c:	059a      	lsls	r2, r3, #22
 800725e:	d4ef      	bmi.n	8007240 <__smakebuf_r+0x18>
 8007260:	f023 0303 	bic.w	r3, r3, #3
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	e7e3      	b.n	8007234 <__smakebuf_r+0xc>
 800726c:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <__smakebuf_r+0x7c>)
 800726e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	6020      	str	r0, [r4, #0]
 8007274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007278:	81a3      	strh	r3, [r4, #12]
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	6163      	str	r3, [r4, #20]
 800727e:	9b01      	ldr	r3, [sp, #4]
 8007280:	6120      	str	r0, [r4, #16]
 8007282:	b15b      	cbz	r3, 800729c <__smakebuf_r+0x74>
 8007284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007288:	4630      	mov	r0, r6
 800728a:	f000 f8d1 	bl	8007430 <_isatty_r>
 800728e:	b128      	cbz	r0, 800729c <__smakebuf_r+0x74>
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	f023 0303 	bic.w	r3, r3, #3
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	81a3      	strh	r3, [r4, #12]
 800729c:	89a0      	ldrh	r0, [r4, #12]
 800729e:	4305      	orrs	r5, r0
 80072a0:	81a5      	strh	r5, [r4, #12]
 80072a2:	e7cd      	b.n	8007240 <__smakebuf_r+0x18>
 80072a4:	08007035 	.word	0x08007035

080072a8 <_malloc_usable_size_r>:
 80072a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ac:	1f18      	subs	r0, r3, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bfbc      	itt	lt
 80072b2:	580b      	ldrlt	r3, [r1, r0]
 80072b4:	18c0      	addlt	r0, r0, r3
 80072b6:	4770      	bx	lr

080072b8 <_raise_r>:
 80072b8:	291f      	cmp	r1, #31
 80072ba:	b538      	push	{r3, r4, r5, lr}
 80072bc:	4604      	mov	r4, r0
 80072be:	460d      	mov	r5, r1
 80072c0:	d904      	bls.n	80072cc <_raise_r+0x14>
 80072c2:	2316      	movs	r3, #22
 80072c4:	6003      	str	r3, [r0, #0]
 80072c6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072ce:	b112      	cbz	r2, 80072d6 <_raise_r+0x1e>
 80072d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072d4:	b94b      	cbnz	r3, 80072ea <_raise_r+0x32>
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 f830 	bl	800733c <_getpid_r>
 80072dc:	462a      	mov	r2, r5
 80072de:	4601      	mov	r1, r0
 80072e0:	4620      	mov	r0, r4
 80072e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e6:	f000 b817 	b.w	8007318 <_kill_r>
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d00a      	beq.n	8007304 <_raise_r+0x4c>
 80072ee:	1c59      	adds	r1, r3, #1
 80072f0:	d103      	bne.n	80072fa <_raise_r+0x42>
 80072f2:	2316      	movs	r3, #22
 80072f4:	6003      	str	r3, [r0, #0]
 80072f6:	2001      	movs	r0, #1
 80072f8:	e7e7      	b.n	80072ca <_raise_r+0x12>
 80072fa:	2400      	movs	r4, #0
 80072fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007300:	4628      	mov	r0, r5
 8007302:	4798      	blx	r3
 8007304:	2000      	movs	r0, #0
 8007306:	e7e0      	b.n	80072ca <_raise_r+0x12>

08007308 <raise>:
 8007308:	4b02      	ldr	r3, [pc, #8]	; (8007314 <raise+0xc>)
 800730a:	4601      	mov	r1, r0
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	f7ff bfd3 	b.w	80072b8 <_raise_r>
 8007312:	bf00      	nop
 8007314:	20000010 	.word	0x20000010

08007318 <_kill_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4d07      	ldr	r5, [pc, #28]	; (8007338 <_kill_r+0x20>)
 800731c:	2300      	movs	r3, #0
 800731e:	4604      	mov	r4, r0
 8007320:	4608      	mov	r0, r1
 8007322:	4611      	mov	r1, r2
 8007324:	602b      	str	r3, [r5, #0]
 8007326:	f7fb f8d7 	bl	80024d8 <_kill>
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	d102      	bne.n	8007334 <_kill_r+0x1c>
 800732e:	682b      	ldr	r3, [r5, #0]
 8007330:	b103      	cbz	r3, 8007334 <_kill_r+0x1c>
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	bd38      	pop	{r3, r4, r5, pc}
 8007336:	bf00      	nop
 8007338:	200002b8 	.word	0x200002b8

0800733c <_getpid_r>:
 800733c:	f7fb b8c4 	b.w	80024c8 <_getpid>

08007340 <__sread>:
 8007340:	b510      	push	{r4, lr}
 8007342:	460c      	mov	r4, r1
 8007344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007348:	f000 f894 	bl	8007474 <_read_r>
 800734c:	2800      	cmp	r0, #0
 800734e:	bfab      	itete	ge
 8007350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007352:	89a3      	ldrhlt	r3, [r4, #12]
 8007354:	181b      	addge	r3, r3, r0
 8007356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800735a:	bfac      	ite	ge
 800735c:	6563      	strge	r3, [r4, #84]	; 0x54
 800735e:	81a3      	strhlt	r3, [r4, #12]
 8007360:	bd10      	pop	{r4, pc}

08007362 <__swrite>:
 8007362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007366:	461f      	mov	r7, r3
 8007368:	898b      	ldrh	r3, [r1, #12]
 800736a:	05db      	lsls	r3, r3, #23
 800736c:	4605      	mov	r5, r0
 800736e:	460c      	mov	r4, r1
 8007370:	4616      	mov	r6, r2
 8007372:	d505      	bpl.n	8007380 <__swrite+0x1e>
 8007374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007378:	2302      	movs	r3, #2
 800737a:	2200      	movs	r2, #0
 800737c:	f000 f868 	bl	8007450 <_lseek_r>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	4632      	mov	r2, r6
 800738e:	463b      	mov	r3, r7
 8007390:	4628      	mov	r0, r5
 8007392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	f000 b817 	b.w	80073c8 <_write_r>

0800739a <__sseek>:
 800739a:	b510      	push	{r4, lr}
 800739c:	460c      	mov	r4, r1
 800739e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a2:	f000 f855 	bl	8007450 <_lseek_r>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	bf15      	itete	ne
 80073ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80073ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073b6:	81a3      	strheq	r3, [r4, #12]
 80073b8:	bf18      	it	ne
 80073ba:	81a3      	strhne	r3, [r4, #12]
 80073bc:	bd10      	pop	{r4, pc}

080073be <__sclose>:
 80073be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c2:	f000 b813 	b.w	80073ec <_close_r>
	...

080073c8 <_write_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4d07      	ldr	r5, [pc, #28]	; (80073e8 <_write_r+0x20>)
 80073cc:	4604      	mov	r4, r0
 80073ce:	4608      	mov	r0, r1
 80073d0:	4611      	mov	r1, r2
 80073d2:	2200      	movs	r2, #0
 80073d4:	602a      	str	r2, [r5, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	f7fb f8b5 	bl	8002546 <_write>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d102      	bne.n	80073e6 <_write_r+0x1e>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	b103      	cbz	r3, 80073e6 <_write_r+0x1e>
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	bd38      	pop	{r3, r4, r5, pc}
 80073e8:	200002b8 	.word	0x200002b8

080073ec <_close_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4d06      	ldr	r5, [pc, #24]	; (8007408 <_close_r+0x1c>)
 80073f0:	2300      	movs	r3, #0
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	602b      	str	r3, [r5, #0]
 80073f8:	f7fb f8c1 	bl	800257e <_close>
 80073fc:	1c43      	adds	r3, r0, #1
 80073fe:	d102      	bne.n	8007406 <_close_r+0x1a>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	b103      	cbz	r3, 8007406 <_close_r+0x1a>
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	200002b8 	.word	0x200002b8

0800740c <_fstat_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d07      	ldr	r5, [pc, #28]	; (800742c <_fstat_r+0x20>)
 8007410:	2300      	movs	r3, #0
 8007412:	4604      	mov	r4, r0
 8007414:	4608      	mov	r0, r1
 8007416:	4611      	mov	r1, r2
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	f7fb f8bc 	bl	8002596 <_fstat>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	d102      	bne.n	8007428 <_fstat_r+0x1c>
 8007422:	682b      	ldr	r3, [r5, #0]
 8007424:	b103      	cbz	r3, 8007428 <_fstat_r+0x1c>
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	bd38      	pop	{r3, r4, r5, pc}
 800742a:	bf00      	nop
 800742c:	200002b8 	.word	0x200002b8

08007430 <_isatty_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d06      	ldr	r5, [pc, #24]	; (800744c <_isatty_r+0x1c>)
 8007434:	2300      	movs	r3, #0
 8007436:	4604      	mov	r4, r0
 8007438:	4608      	mov	r0, r1
 800743a:	602b      	str	r3, [r5, #0]
 800743c:	f7fb f8bb 	bl	80025b6 <_isatty>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_isatty_r+0x1a>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	b103      	cbz	r3, 800744a <_isatty_r+0x1a>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	200002b8 	.word	0x200002b8

08007450 <_lseek_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	4d07      	ldr	r5, [pc, #28]	; (8007470 <_lseek_r+0x20>)
 8007454:	4604      	mov	r4, r0
 8007456:	4608      	mov	r0, r1
 8007458:	4611      	mov	r1, r2
 800745a:	2200      	movs	r2, #0
 800745c:	602a      	str	r2, [r5, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	f7fb f8b4 	bl	80025cc <_lseek>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d102      	bne.n	800746e <_lseek_r+0x1e>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	b103      	cbz	r3, 800746e <_lseek_r+0x1e>
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	200002b8 	.word	0x200002b8

08007474 <_read_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	4d07      	ldr	r5, [pc, #28]	; (8007494 <_read_r+0x20>)
 8007478:	4604      	mov	r4, r0
 800747a:	4608      	mov	r0, r1
 800747c:	4611      	mov	r1, r2
 800747e:	2200      	movs	r2, #0
 8007480:	602a      	str	r2, [r5, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	f7fb f842 	bl	800250c <_read>
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	d102      	bne.n	8007492 <_read_r+0x1e>
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	b103      	cbz	r3, 8007492 <_read_r+0x1e>
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	bd38      	pop	{r3, r4, r5, pc}
 8007494:	200002b8 	.word	0x200002b8

08007498 <_init>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	bf00      	nop
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr

080074a4 <_fini>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	bf00      	nop
 80074a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074aa:	bc08      	pop	{r3}
 80074ac:	469e      	mov	lr, r3
 80074ae:	4770      	bx	lr
